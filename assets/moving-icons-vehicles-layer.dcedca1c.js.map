{"version":3,"file":"moving-icons-vehicles-layer.dcedca1c.js","sources":["../../src/layers/moving-icons/moving-icons-vehicles-layer.ts"],"sourcesContent":["// BC 2021-04-30: this file forked from https://github.com/visgl/deck.gl\r\n//\r\n// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n\r\nimport { Layer, project32, picking, log } from '@deck.gl/core'\r\nimport GL from '@luma.gl/constants'\r\nimport { Model, Geometry } from '@luma.gl/core'\r\n\r\nimport vertShader from './icon-layer.glsl.vert?raw'\r\nimport fragShader from './icon-layer.glsl.frag?raw'\r\n\r\nimport IconManager from './icon-manager'\r\n\r\nconst DEFAULT_COLOR = [0, 0, 0, 255]\r\n\r\nconst defaultProps = {\r\n  iconAtlas: { type: 'image', value: null, async: true },\r\n  iconMapping: { type: 'object', value: {}, async: true },\r\n  sizeScale: { type: 'number', value: 1, min: 0 },\r\n  billboard: false,\r\n  sizeUnits: 'pixels',\r\n  sizeMinPixels: { type: 'number', min: 0, value: 0 }, //  min point radius in pixels\r\n  sizeMaxPixels: { type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER }, // max point radius in pixels\r\n  alphaCutoff: { type: 'number', value: 0.05, min: 0, max: 1 },\r\n  iconStill: { type: 'object', value: null },\r\n\r\n  getIcon: { type: 'accessor', value: 'vehicle' }, // (x: any) => x.icon },\r\n  getBOffsets: { type: 'accessor', value: [0, 0] }, // (x: any) => x.icon },\r\n  getBIconFrames: { type: 'accessor', value: [128, 128, 128, 128] }, // (x: any) => x.icon },\r\n  getBColorModes: { type: 'accessor', value: 1 }, // (x: any) => x.icon },\r\n\r\n  getColor: { type: 'accessor', value: DEFAULT_COLOR },\r\n  getSize: { type: 'accessor', value: 1 },\r\n  getAngle: { type: 'accessor', value: 0 },\r\n  getPixelOffset: { type: 'accessor', value: [0, 0] },\r\n\r\n  getPathStart: { type: 'accessor', value: null },\r\n  getPathEnd: { type: 'accessor', value: null },\r\n  getTimeStart: { type: 'accessor', value: null },\r\n  getTimeEnd: { type: 'accessor', value: null },\r\n  currentTime: { type: 'number', value: 0 },\r\n\r\n  pickable: { type: 'boolean', value: true },\r\n  onIconError: { type: 'function', value: null, compare: false, optional: true },\r\n}\r\n\r\nexport default class IconLayer extends Layer {\r\n  getShaders() {\r\n    return super.getShaders({ vs: vertShader, fs: fragShader, modules: [project32, picking] })\r\n  }\r\n\r\n  initializeState() {\r\n    this.state = {\r\n      iconManager: new IconManager(this.context.gl, {\r\n        onUpdate: this._onUpdate.bind(this),\r\n        onError: this._onError.bind(this) as any,\r\n      }),\r\n    }\r\n\r\n    const attributeManager = this.getAttributeManager()\r\n\r\n    /* eslint-disable max-len */\r\n    attributeManager.addInstanced({\r\n      instanceTimestamps: {\r\n        size: 1,\r\n        accessor: 'getTimeStart',\r\n      },\r\n      instanceTimestampsNext: {\r\n        size: 1,\r\n        accessor: 'getTimeEnd',\r\n      },\r\n      instanceStartPositions: {\r\n        size: 2,\r\n        accessor: 'getPathStart',\r\n      },\r\n      instanceEndPositions: {\r\n        size: 2,\r\n        accessor: 'getPathEnd',\r\n      },\r\n      instanceSizes: {\r\n        size: 1,\r\n        transition: true,\r\n        accessor: 'getSize',\r\n        defaultValue: 1,\r\n      },\r\n      instanceOffsets: {\r\n        size: 2,\r\n        defaultValue: [0, 0],\r\n        accessor: 'getBOffsets',\r\n        // transform: this.getInstanceOffset\r\n      },\r\n      instanceIconFrames: {\r\n        size: 4,\r\n        defaultValue: [0, 0, 128, 128],\r\n        accessor: 'getBIconFrames',\r\n        // transform: this.getInstanceIconFrame\r\n      },\r\n      instanceColorModes: {\r\n        size: 1,\r\n        type: GL.UNSIGNED_BYTE,\r\n        defaultValue: 1,\r\n        accessor: 'getBColorModes',\r\n        // accessor: 'getIcon',\r\n        // transform: this.getInstanceColorMode,\r\n      },\r\n\r\n      // instanceOffsets: { size: 2, accessor: 'getIcon', transform: this.getInstanceOffset },\r\n      // instanceIconFrames: { size: 4, accessor: 'getIcon', transform: this.getInstanceIconFrame },\r\n      // instanceColorModes: {\r\n      //   size: 1,\r\n      //   type: GL.UNSIGNED_BYTE,\r\n      //   accessor: 'getIcon',\r\n      //   transform: this.getInstanceColorMode,\r\n      // },\r\n      instanceColors: {\r\n        size: this.props.colorFormat.length,\r\n        type: GL.UNSIGNED_BYTE,\r\n        normalized: true,\r\n        transition: true,\r\n        accessor: 'getColor',\r\n        defaultValue: DEFAULT_COLOR,\r\n      },\r\n      instanceAngles: {\r\n        size: 1,\r\n        transition: true,\r\n        accessor: 'getAngle',\r\n      },\r\n      instancePixelOffset: {\r\n        size: 2,\r\n        transition: true,\r\n        accessor: 'getPixelOffset',\r\n      },\r\n    })\r\n    /* eslint-enable max-len */\r\n  }\r\n\r\n  /* eslint-disable max-statements, complexity */\r\n  updateState({ oldProps, props, changeFlags }: any) {\r\n    super.updateState({ props, oldProps, changeFlags })\r\n\r\n    const attributeManager = this.getAttributeManager()\r\n    const { iconAtlas, iconMapping, data, getIcon } = props\r\n    const { iconManager } = this.state\r\n\r\n    iconManager.setProps({ loadOptions: props.loadOptions })\r\n\r\n    let iconMappingChanged = false\r\n    const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas')\r\n\r\n    // prepacked iconAtlas from user\r\n    if (prePacked) {\r\n      if (oldProps.iconAtlas !== props.iconAtlas) {\r\n        iconManager.setProps({ iconAtlas, autoPacking: false })\r\n      }\r\n\r\n      if (oldProps.iconMapping !== props.iconMapping) {\r\n        iconManager.setProps({ iconMapping })\r\n        iconMappingChanged = true\r\n      }\r\n    } else {\r\n      // otherwise, use autoPacking\r\n      iconManager.setProps({ autoPacking: true })\r\n    }\r\n\r\n    // handle data changed\r\n    if (\r\n      changeFlags.dataChanged ||\r\n      (changeFlags.updateTriggersChanged &&\r\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\r\n    ) {\r\n      iconManager.setProps({ data, getIcon })\r\n    }\r\n\r\n    if (iconMappingChanged) {\r\n      attributeManager.invalidate('instanceOffsets')\r\n      attributeManager.invalidate('instanceIconFrames')\r\n      attributeManager.invalidate('instanceColorModes')\r\n    }\r\n\r\n    if (changeFlags.extensionsChanged) {\r\n      const { gl } = this.context\r\n      this.state.model?.delete()\r\n      this.state.model = this._getModel(gl)\r\n      attributeManager.invalidateAll()\r\n    }\r\n  }\r\n  /* eslint-enable max-statements, complexity */\r\n\r\n  get isLoaded() {\r\n    return super.isLoaded && this.state.iconManager.isLoaded\r\n  }\r\n\r\n  finalizeState() {\r\n    super.finalizeState()\r\n    // Release resources held by the icon manager\r\n    this.state.iconManager.finalize()\r\n  }\r\n\r\n  draw({ uniforms }: any) {\r\n    const {\r\n      sizeScale,\r\n      sizeMinPixels,\r\n      sizeMaxPixels,\r\n      sizeUnits,\r\n      billboard,\r\n      alphaCutoff,\r\n      currentTime,\r\n      iconStill,\r\n      pickable,\r\n    } = this.props\r\n\r\n    const { iconManager } = this.state\r\n    const { viewport } = this.context\r\n\r\n    const iconsTexture = iconManager.getTexture()\r\n    if (iconsTexture) {\r\n      this.state.model\r\n        .setUniforms(uniforms)\r\n        .setUniforms({\r\n          iconsTexture,\r\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\r\n          sizeScale: sizeScale * (sizeUnits === 'pixels' ? viewport.metersPerPixel : 1),\r\n          sizeMinPixels,\r\n          sizeMaxPixels,\r\n          billboard,\r\n          alphaCutoff,\r\n          currentTime,\r\n          pickable,\r\n          iconStillOffsets: this.getInstanceOffset(iconStill),\r\n          iconStillFrames: this.getInstanceIconFrame(iconStill),\r\n        })\r\n        .draw()\r\n    }\r\n  }\r\n\r\n  _getModel(gl: any) {\r\n    // The icon-layer vertex shader uses 2d positions\r\n    // specifed via: attribute vec2 positions;\r\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1]\r\n\r\n    return new Model(gl, {\r\n      ...this.getShaders(),\r\n      id: this.props.id,\r\n      geometry: new Geometry({\r\n        drawMode: GL.TRIANGLE_FAN,\r\n        attributes: {\r\n          // The size must be explicitly passed here otherwise luma.gl\r\n          // will default to assuming that positions are 3D (x,y,z)\r\n          positions: {\r\n            size: 2,\r\n            value: new Float32Array(positions),\r\n          },\r\n        },\r\n      }),\r\n      isInstanced: true,\r\n    })\r\n  }\r\n\r\n  _onUpdate() {\r\n    this.setNeedsRedraw()\r\n  }\r\n\r\n  _onError(evt: any) {\r\n    const { onIconError } = this.getCurrentLayer().props\r\n    if (onIconError) {\r\n      onIconError(evt)\r\n    } else {\r\n      log.error(evt.error)()\r\n    }\r\n  }\r\n\r\n  getInstanceOffset(icon: any) {\r\n    const rect = this.state.iconManager.getIconMapping(icon)\r\n    return [rect.width / 2 - rect.anchorX || 0, rect.height / 2 - rect.anchorY || 0]\r\n  }\r\n\r\n  getInstanceColorMode(icon: any) {\r\n    const mapping = this.state.iconManager.getIconMapping(icon)\r\n    return mapping.mask ? 1 : 0\r\n  }\r\n\r\n  getInstanceIconFrame(icon: any) {\r\n    const rect = this.state.iconManager.getIconMapping(icon)\r\n    return [rect.x || 0, rect.y || 0, rect.width || 0, rect.height || 0]\r\n  }\r\n}\r\n\r\nIconLayer.layerName = 'FlatIconLayer'\r\nIconLayer.defaultProps = defaultProps\r\n"],"names":["DEFAULT_COLOR","defaultProps","IconLayer","Layer","vertShader","fragShader","project32","picking","IconManager","GL","oldProps","props","changeFlags","attributeManager","iconAtlas","iconMapping","data","getIcon","iconManager","iconMappingChanged","gl","_a","uniforms","sizeScale","sizeMinPixels","sizeMaxPixels","sizeUnits","billboard","alphaCutoff","currentTime","iconStill","pickable","viewport","iconsTexture","positions","Model","Geometry","evt","onIconError","log","icon","rect"],"mappings":"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"}