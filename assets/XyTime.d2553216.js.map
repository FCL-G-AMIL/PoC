{"version":3,"file":"XyTime.d2553216.js","sources":["../../src/plugins/xy-time/ScatterplotColorBinsLayer.ts","../../src/plugins/xy-time/XyTimeDeckMap.tsx","../../src/plugins/xy-time/XyTime.vue","../../src/plugins/xy-time/XyTime.vue?vue&type=template&lang.js"],"sourcesContent":["import { ScatterplotLayer } from '@deck.gl/layers'\r\n\r\nexport default class ScatterplotColorBinsLayer extends ScatterplotLayer {\r\n  public initializeState(context: any) {\r\n    super.initializeState(context)\r\n\r\n    this.getAttributeManager().addInstanced({\r\n      instanceValue: {\r\n        accessor: 'getValue',\r\n        size: 1,\r\n        defaultValue: 0.0,\r\n        transition: true,\r\n      },\r\n    })\r\n  }\r\n\r\n  public getShaders() {\r\n    return {\r\n      ...super.getShaders(),\r\n      inject: {\r\n        'vs:#decl': `\r\n            #define MAX_COLORS 21\r\n            #define MAX_BREAKPOINTS 20\r\n            uniform int numBreakpoints;\r\n            uniform vec3 colors[MAX_COLORS];\r\n            uniform float breakpoints[MAX_BREAKPOINTS];\r\n            attribute float instanceValue;\r\n            `,\r\n        'vs:DECKGL_FILTER_COLOR': `\r\n            // geometry.pickingColor = instancePickingColors;\r\n            picking_setPickingColor(geometry.pickingColor);\r\n\r\n            int lastBreakpoint = numBreakpoints;\r\n\r\n            for(int i=0; i < MAX_BREAKPOINTS; ++i) {\r\n              if (instanceValue < breakpoints[i]) {\r\n                color = vec4(colors[i], 1.0);\r\n                return;\r\n              }\r\n              if (i == lastBreakpoint) {\r\n                color = vec4(colors[i], 1.0);\r\n                return;\r\n              }\r\n            }\r\n            color = vec4(1.0, 0.0, 0.0, 1.0);\r\n            return;\r\n          `,\r\n      },\r\n    }\r\n  }\r\n\r\n  // uniform cannot change size, so we pre-allocate the\r\n  // max storage for colors and breakpoints here.\r\n  private MAX_COLORS = 21\r\n  private uniformColors = new Array(this.MAX_COLORS * 3)\r\n  private uniformBreakpoints = new Array(this.MAX_COLORS - 1)\r\n\r\n  draw({ uniforms }: any) {\r\n    const { colors, breakpoints } = this.props\r\n\r\n    colors.map((c: number[], i: number) => {\r\n      this.uniformColors[i * 3] = c[0] / 256\r\n      this.uniformColors[i * 3 + 1] = c[1] / 256\r\n      this.uniformColors[i * 3 + 2] = c[2] / 256\r\n    })\r\n\r\n    breakpoints.map((c: number, i: number) => {\r\n      this.uniformBreakpoints[i] = c\r\n    })\r\n\r\n    const combinedUniforms = {\r\n      ...uniforms,\r\n      colors: this.uniformColors,\r\n      breakpoints: this.uniformBreakpoints,\r\n      numBreakpoints: breakpoints.length,\r\n    }\r\n\r\n    super.draw({\r\n      uniforms: combinedUniforms,\r\n    })\r\n  }\r\n}\r\n\r\nScatterplotColorBinsLayer.layerName = 'ScatterplotColorBinsLayer'\r\nScatterplotColorBinsLayer.defaultProps = {\r\n  colors: [\r\n    [128, 128, 128],\r\n    [128, 128, 128],\r\n  ],\r\n  breakpoints: [0.0],\r\n}\r\n","import React, { useState, useMemo, useEffect } from 'react'\r\nimport DeckGL from '@deck.gl/react'\r\nimport { StaticMap } from 'react-map-gl'\r\nimport { DataFilterExtension } from '@deck.gl/extensions'\r\nimport * as timeConvert from 'convert-seconds'\r\n\r\nimport { REACT_VIEW_HANDLES, MAPBOX_TOKEN } from '@/Globals'\r\nimport ScatterplotColorBinsLayer from '@/plugins/xy-time/ScatterplotColorBinsLayer'\r\nimport globalStore from '@/store'\r\n\r\nconst dataFilter = new DataFilterExtension({ filterSize: 1 })\r\n\r\nfunction convertSecondsToClockTimeMinutes(index: number) {\r\n  const seconds = index\r\n\r\n  try {\r\n    const hms = timeConvert(seconds)\r\n    const minutes = ('00' + hms.minutes).slice(-2)\r\n    return `${hms.hours}:${minutes}`\r\n  } catch (e) {\r\n    return '00:00'\r\n  }\r\n}\r\n\r\nconst INITIAL_VIEW = {\r\n  pitch: 0,\r\n  zoom: 11,\r\n  bearing: 0,\r\n  longitude: 13.38,\r\n  latitude: 52.5,\r\n}\r\n\r\n// -------------------------------------------------------------------\r\nexport default function Component({\r\n  viewId = 0,\r\n  pointLayers = [] as {\r\n    coordinates: Float32Array\r\n    time: Float32Array\r\n    color: Uint8Array\r\n    value: Float32Array\r\n    timeRange: number[]\r\n  }[],\r\n  timeFilter = [] as number[],\r\n  dark = false,\r\n  colors = [\r\n    [1, 0, 0],\r\n    [0.25, 0.25, 1],\r\n  ] as number[][],\r\n  breakpoints = [0.0] as number[],\r\n  radius = 5,\r\n  mapIsIndependent = false,\r\n}) {\r\n  // manage SimWrapper centralized viewState - for linked maps\r\n  const [viewState, setViewState] = useState(INITIAL_VIEW)\r\n\r\n  REACT_VIEW_HANDLES[viewId] = () => {\r\n    setViewState(globalStore.state.viewState)\r\n  }\r\n\r\n  function handleViewState(view: any) {\r\n    if (!view.latitude) return\r\n\r\n    if (!view.center) view.center = [0, 0]\r\n    view.center[0] = view.longitude\r\n    view.center[1] = view.latitude\r\n    setViewState(view)\r\n\r\n    if (!mapIsIndependent) globalStore.commit('setMapCamera', view)\r\n  }\r\n\r\n  function getTooltip(element: any) {\r\n    // console.log(element)\r\n    if (element.index < 0) return null\r\n\r\n    const layerId = element?.layer?.id\r\n    if (layerId === undefined) return null\r\n\r\n    const time = pointLayers[layerId].time[element.index]\r\n    const humanTime = convertSecondsToClockTimeMinutes(time)\r\n\r\n    const value = pointLayers[layerId].value[element.index]\r\n    const cleanValue = Math.round(1e6 * value) / 1e6\r\n    return {\r\n      html: `\\\r\n        <table style=\"font-size: 0.9rem\">\r\n        <tr>\r\n          <td>Value</td>\r\n          <td style=\"padding-left: 0.5rem;\"><b>${cleanValue}</b></td>\r\n        </tr><tr>\r\n          <td style=\"text-align: right;\">Time</td>\r\n          <td style=\"padding-left: 0.5rem;\"><b>${humanTime}</b></td>\r\n        </tr>\r\n        </table>\r\n      `,\r\n      style: dark\r\n        ? { color: '#ccc', backgroundColor: '#2a3c4f' }\r\n        : { color: '#223', backgroundColor: 'white' },\r\n    }\r\n  }\r\n\r\n  // add a scatterplotlayer for each set of points in pointLayers\r\n  const layers = pointLayers.map((points, layerIndex) => {\r\n    // The entire layer can be hidden if all of its points\r\n    // are beyond the timeFilter range that is being shown.\r\n    const outOfRange = points.timeRange[0] > timeFilter[1] || points.timeRange[1] < timeFilter[0]\r\n\r\n    //@ts-ignore\r\n    return new ScatterplotColorBinsLayer({\r\n      data: {\r\n        length: points.time.length,\r\n        attributes: {\r\n          getPosition: { value: points.coordinates, size: 2 },\r\n          getFilterValue: { value: points.time, size: 1 },\r\n          getValue: { value: points.value, size: 1 },\r\n        },\r\n      },\r\n      autoHighlight: true,\r\n      breakpoints: breakpoints,\r\n      colors: colors,\r\n      extensions: [dataFilter],\r\n      id: layerIndex,\r\n      filled: true,\r\n      filterRange: timeFilter.length ? timeFilter : null,\r\n      getRadius: radius, // 5 // (d: any) => Math.sqrt(d...),\r\n      // getFillColor: [10, 50, 10],\r\n      highlightColor: [255, 0, 224],\r\n      opacity: 1,\r\n      parameters: { depthTest: false },\r\n      pickable: true,\r\n      radiusScale: 1,\r\n      stroked: false,\r\n      updateTriggers: {\r\n        getPosition: pointLayers,\r\n        getFillColor: pointLayers,\r\n        getFilterValue: timeFilter,\r\n      },\r\n      // transitions: {\r\n      //   getFillColor: 500,\r\n      //   getColor: 500,\r\n      //   getValue: 500,\r\n      //   getFilterValue: 500,\r\n      // },\r\n      // hide layers that are entirely outside the time window filter:\r\n      visible: !outOfRange,\r\n    })\r\n  })\r\n\r\n  // initialViewState={initialViewState}\r\n  return (\r\n    <DeckGL\r\n      layers={layers}\r\n      controller={true}\r\n      useDevicePixels={true}\r\n      viewState={viewState}\r\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\r\n      pickingRadius={4}\r\n      onClick={getTooltip}\r\n      getTooltip={getTooltip}\r\n    >\r\n      {\r\n        /*\r\n        // @ts-ignore */\r\n        <StaticMap\r\n          mapStyle={globalStore.getters.mapStyle}\r\n          preventStyleDiffing={true}\r\n          mapboxApiAccessToken={MAPBOX_TOKEN}\r\n        />\r\n      }\r\n    </DeckGL>\r\n  )\r\n}\r\n","<template lang=\"pug\">\r\n.viz-plugin(:class=\"{'hide-thumbnail': !thumbnail}\" oncontextmenu=\"return false\" :id=\"`id-${viewId}`\")\r\n\r\n  xy-time-deck-map.map-layer(v-if=\"!thumbnail\"\r\n    :viewId=\"viewId\"\r\n    :pointLayers=\"pointLayers\"\r\n    :timeFilter=\"timeFilter\"\r\n    :dark=\"this.$store.state.isDarkMode\"\r\n    :colors=\"this.colors\"\r\n    :breakpoints=\"this.breakpoints\"\r\n    :radius=\"this.guiConfig.radius\"\r\n    :mapIsIndependent=\"false\"\r\n  )\r\n\r\n  zoom-buttons(v-if=\"!thumbnail\" corner=\"bottom\")\r\n\r\n  .top-right\r\n    .gui-config(:id=\"configId\")\r\n\r\n  .bottom-right\r\n    .legend-area(v-if=\"legendStore\")\r\n      legend-box(:legendStore=\"legendStore\")\r\n\r\n  time-slider.time-slider-area(v-if=\"isLoaded\"\r\n    :range=\"timeRange\"\r\n    :activeTimeExtent=\"timeFilter\"\r\n    :labels=\"timeLabels\"\r\n    :isAnimating=\"isAnimating\"\r\n    @timeExtent=\"handleTimeSliderValues\"\r\n    @toggleAnimation=\"toggleAnimation\"\r\n    @drag=\"isAnimating=false\"\r\n  )\r\n\r\n  .message(v-if=\"!thumbnail && myState.statusMessage\")\r\n    p.status-message {{ myState.statusMessage }}\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {\r\n      loading: 'Loading data...',\r\n      sorting: 'Sorting into bins...',\r\n      aggregate: 'Summary',\r\n      maxHeight: '3D Height',\r\n      showDetails: 'Show Details',\r\n      selection: 'Selection',\r\n      areas: 'Areas',\r\n      count: 'Count',\r\n      promptCRS: `Enter the coordinate reference system, e.g. EPSG:25832\\n\\nThese coordinates are not in long/lat format. To fix this permanently, convert them to long/lat or add \"# EPSG:xxxx\" to your CSV header`,\r\n    },\r\n    de: {\r\n      loading: 'Dateien laden...',\r\n      sorting: 'Sortieren...',\r\n      aggregate: 'Daten',\r\n      maxHeight: '3-D Höhe',\r\n      showDetails: 'Details anzeigen',\r\n      selection: 'Ausgewählt',\r\n      areas: 'Orte',\r\n      count: 'Anzahl',\r\n    },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\n\r\nimport GUI from 'lil-gui'\r\nimport YAML from 'yaml'\r\nimport colormap from 'colormap'\r\n\r\nimport util from '@/js/util'\r\nimport globalStore from '@/store'\r\nimport CollapsiblePanel from '@/components/CollapsiblePanel.vue'\r\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport LegendBox from '@/components/viz-configurator/LegendBox.vue'\r\nimport LegendStore from '@/js/LegendStore'\r\nimport TimeSlider from '@/components/TimeSlider.vue'\r\nimport XyTimeDeckMap from './XyTimeDeckMap'\r\nimport XytDataParser from './XytDataParser.worker.ts?worker'\r\nimport ZoomButtons from '@/components/ZoomButtons.vue'\r\n\r\nimport {\r\n  ColorScheme,\r\n  FileSystem,\r\n  LegendItem,\r\n  LegendItemType,\r\n  FileSystemConfig,\r\n  VisualizationPlugin,\r\n  Status,\r\n  REACT_VIEW_HANDLES,\r\n} from '@/Globals'\r\n\r\ninterface VizDetail {\r\n  title: string\r\n  description?: string\r\n  file: string\r\n  projection: any\r\n  thumbnail?: string\r\n  center: any\r\n  zoom: number\r\n  buckets: number\r\n  clipMax: number\r\n  exponent: number\r\n  radius: number\r\n  colorRamp: string\r\n  breakpoints: string\r\n}\r\n\r\ninterface PointLayer {\r\n  color: Uint8Array\r\n  value: Float32Array\r\n  coordinates: Float32Array\r\n  time: Float32Array\r\n  timeRange: number[]\r\n}\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'XYTime',\r\n  i18n,\r\n  components: {\r\n    CollapsiblePanel,\r\n    DrawingTool,\r\n    LegendBox,\r\n    TimeSlider,\r\n    ZoomButtons,\r\n    XyTimeDeckMap,\r\n  },\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    yamlConfig: String,\r\n    config: Object,\r\n    thumbnail: Boolean,\r\n  },\r\n  data: () => {\r\n    return {\r\n      guiConfig: {\r\n        buckets: 7,\r\n        exponent: 4,\r\n        radius: 5,\r\n        'clip max': 100,\r\n        'color ramp': 'viridis',\r\n        colorRamps: ['bathymetry', 'electric', 'inferno', 'jet', 'magma', 'par', 'viridis'],\r\n        flip: false,\r\n        'manual breaks': '',\r\n      },\r\n      viewId: `xyt-id-${Math.floor(1e12 * Math.random())}` as any,\r\n      configId: `gui-config-${Math.floor(1e12 * Math.random())}` as any,\r\n      timeLabels: [0, 1] as any[],\r\n      startTime: 0,\r\n      isAnimating: false,\r\n      timeFilter: [0, 3599],\r\n      colors: [\r\n        [128, 128, 128],\r\n        [128, 128, 128],\r\n      ] as number[][],\r\n      breakpoints: [0.0],\r\n      range: [Infinity, -Infinity],\r\n      timeRange: [Infinity, -Infinity],\r\n      legendStore: null as LegendStore | null,\r\n      standaloneYAMLconfig: {\r\n        title: '',\r\n        description: '',\r\n        file: '',\r\n        projection: '',\r\n        thumbnail: '',\r\n        radius: 250,\r\n        maxHeight: 0,\r\n        center: null as any,\r\n        zoom: 9,\r\n      },\r\n      YAMLrequirementsXY: { file: '' },\r\n      columnLookup: [] as number[],\r\n      gzipWorker: null as Worker | null,\r\n      vizDetails: {\r\n        title: '',\r\n        description: '',\r\n        file: '',\r\n        projection: '',\r\n        thumbnail: '',\r\n        center: null as any,\r\n        zoom: 9,\r\n        // x-y-t details:\r\n        buckets: 5,\r\n        exponent: 4,\r\n        clipMax: 100,\r\n        radius: 5,\r\n        colorRamp: 'viridis',\r\n        flip: false,\r\n        breakpoints: '',\r\n      } as VizDetail,\r\n      myState: {\r\n        statusMessage: '',\r\n        subfolder: '',\r\n        yamlConfig: '',\r\n        thumbnail: false,\r\n      },\r\n      pointLayers: [] as PointLayer[],\r\n      isLoaded: false,\r\n      animator: null as any,\r\n      guiController: null as GUI | null,\r\n      resizer: null as ResizeObserver | null,\r\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\r\n      ANIMATE_SPEED: 4,\r\n      animationElapsedTime: 0,\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.$store.commit('setFullScreen', !this.thumbnail)\r\n    this.myState.thumbnail = this.thumbnail\r\n    this.myState.yamlConfig = this.yamlConfig || ''\r\n    this.myState.subfolder = this.subfolder\r\n\r\n    await this.getVizDetails()\r\n    await this.buildThumbnail()\r\n\r\n    if (this.thumbnail) return\r\n\r\n    this.setupLogoMover()\r\n\r\n    // ----------------------------------------------------\r\n    this.setupGui()\r\n    this.myState.statusMessage = `${this.$i18n.t('loading')}`\r\n\r\n    if (!this.isLoaded) await this.loadFiles()\r\n  },\r\n  beforeDestroy() {\r\n    // MUST erase the React view handle to prevent gigantic memory leak!\r\n    REACT_VIEW_HANDLES[this.viewId] = undefined\r\n    delete REACT_VIEW_HANDLES[this.viewId]\r\n\r\n    try {\r\n      if (this.gzipWorker) {\r\n        this.gzipWorker.postMessage({ terminate: true })\r\n        this.gzipWorker.terminate()\r\n      }\r\n      if (this.guiController) this.guiController.destroy()\r\n    } catch (e) {\r\n      console.warn(e)\r\n    }\r\n\r\n    if (this.animator) window.cancelAnimationFrame(this.animator)\r\n\r\n    this.$store.commit('setFullScreen', false)\r\n  },\r\n\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    urlThumbnail(): any {\r\n      return this.thumbnailUrl\r\n    },\r\n  },\r\n  watch: {\r\n    '$store.state.viewState'() {\r\n      if (REACT_VIEW_HANDLES[this.viewId]) REACT_VIEW_HANDLES[this.viewId]()\r\n    },\r\n  },\r\n  methods: {\r\n    handleTimeSliderValues(timeValues: any[]) {\r\n      this.animationElapsedTime = timeValues[0]\r\n      this.timeFilter = timeValues\r\n      this.timeLabels = [\r\n        this.convertSecondsToClockTimeMinutes(timeValues[0]),\r\n        this.convertSecondsToClockTimeMinutes(timeValues[1]),\r\n      ]\r\n    },\r\n\r\n    setupLogoMover() {\r\n      this.resizer = new ResizeObserver(this.moveLogo)\r\n      const deckmap = document.getElementById(`id-${this.viewId}`) as HTMLElement\r\n      this.resizer.observe(deckmap)\r\n    },\r\n\r\n    moveLogo() {\r\n      const deckmap = document.getElementById(`${this.viewId}`) as HTMLElement\r\n      const logo = deckmap?.querySelector('.mapboxgl-ctrl-bottom-left') as HTMLElement\r\n      if (logo) {\r\n        const right = deckmap.clientWidth > 640 ? '280px' : '36px'\r\n        logo.style.right = right\r\n      }\r\n    },\r\n\r\n    setupGui() {\r\n      this.guiController = new GUI({\r\n        title: 'Settings',\r\n        injectStyles: true,\r\n        width: 200,\r\n        container: document.getElementById(this.configId) || undefined,\r\n      })\r\n\r\n      const config = this.guiController // .addFolder('Colors')\r\n      config.add(this.guiConfig, 'radius', 1, 20, 1)\r\n\r\n      const colors = config.addFolder('colors')\r\n      colors.add(this.guiConfig, 'color ramp', this.guiConfig.colorRamps).onChange(this.setColors)\r\n      colors.add(this.guiConfig, 'flip').onChange(this.setColors)\r\n\r\n      const breakpoints = config.addFolder('breakpoints')\r\n      breakpoints.add(this.guiConfig, 'buckets', 2, 19, 1).onChange(this.setColors)\r\n      breakpoints.add(this.guiConfig, 'clip max', 0, 100, 1).onChange(this.setColors)\r\n      breakpoints.add(this.guiConfig, 'exponent', 1, 10, 1).onChange(this.setColors)\r\n      breakpoints.add(this.guiConfig, 'manual breaks').onChange(this.setColors)\r\n\r\n      // const times = this.guiController.addFolder('Time')\r\n    },\r\n    async solveProjection() {\r\n      if (this.thumbnail) return\r\n\r\n      console.log('WHAT PROJECTION:')\r\n\r\n      try {\r\n        const text = await this.fileApi.getFileText(\r\n          this.myState.subfolder + '/' + this.myState.yamlConfig\r\n        )\r\n        this.vizDetails = YAML.parse(text)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    },\r\n\r\n    async getVizDetails() {\r\n      if (this.config) {\r\n        this.validateYAML()\r\n        this.vizDetails = Object.assign({}, this.config) as VizDetail\r\n        return\r\n      }\r\n\r\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\r\n\r\n      if (hasYaml) {\r\n        await this.loadStandaloneYAMLConfig()\r\n      } else {\r\n        // console.log('NO YAML WTF')\r\n        this.setConfigForRawCSV()\r\n      }\r\n    },\r\n\r\n    setConfigForRawCSV() {\r\n      let projection = 'EPSG:4326' // Include \"# EPSG:xxx\" in header of CSV to set EPSG\r\n\r\n      // output_trips:\r\n      this.vizDetails = Object.assign(this.vizDetails, {\r\n        title: 'Point Data: ' + this.myState.yamlConfig,\r\n        description: this.myState.yamlConfig,\r\n        file: this.myState.yamlConfig,\r\n        projection,\r\n        center: this.vizDetails.center,\r\n        zoom: this.vizDetails.zoom,\r\n      })\r\n\r\n      this.$emit('title', this.vizDetails.title || this.vizDetails.file)\r\n      return\r\n    },\r\n\r\n    async loadStandaloneYAMLConfig() {\r\n      try {\r\n        // might be a project config:\r\n        const filename =\r\n          this.myState.yamlConfig.indexOf('/') > -1\r\n            ? this.myState.yamlConfig\r\n            : this.myState.subfolder + '/' + this.myState.yamlConfig\r\n\r\n        const text = await this.fileApi.getFileText(filename)\r\n        this.standaloneYAMLconfig = Object.assign({}, YAML.parse(text))\r\n        this.validateYAML()\r\n        this.setVizDetails()\r\n      } catch (err) {\r\n        const e = err as any\r\n        console.log('failed')\r\n\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg: `File not found`,\r\n          desc: `Could not find: ${this.myState.subfolder}/${this.myState.yamlConfig}`,\r\n        })\r\n      }\r\n    },\r\n\r\n    validateYAML() {\r\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\r\n      let configuration = {} as any\r\n\r\n      if (hasYaml) {\r\n        console.log('has yaml')\r\n        configuration = this.standaloneYAMLconfig\r\n      } else {\r\n        console.log('no yaml')\r\n        configuration = this.config\r\n      }\r\n\r\n      for (const key in this.YAMLrequirementsXY) {\r\n        if (key in configuration === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `YAML file missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsXY for required keys',\r\n          })\r\n        }\r\n      }\r\n\r\n      if (configuration.radius == 0) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `Radius set to zero`,\r\n          desc: 'Radius can not be zero, preset value used instead. ',\r\n        })\r\n      }\r\n\r\n      if (configuration.zoom < 5 || configuration.zoom > 20) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `Zoom is out of the recommended range `,\r\n          desc: 'Zoom levels should be between 5 and 20. ',\r\n        })\r\n      }\r\n    },\r\n\r\n    setVizDetails() {\r\n      this.vizDetails = Object.assign({}, this.vizDetails, this.standaloneYAMLconfig)\r\n\r\n      const t = this.vizDetails.title\r\n        ? this.vizDetails.title\r\n        : 'Point Data: ' + this.vizDetails.file\r\n      this.$emit('title', t)\r\n\r\n      if (this.vizDetails.buckets) this.guiConfig.buckets = this.vizDetails.buckets\r\n      if (this.vizDetails.exponent) this.guiConfig.exponent = this.vizDetails.exponent\r\n      if (this.vizDetails.radius) this.guiConfig.radius = this.vizDetails.radius\r\n      if (this.vizDetails.clipMax) this.guiConfig['clip max'] = this.vizDetails.clipMax\r\n      if (this.vizDetails.colorRamp) this.guiConfig['color ramp'] = this.vizDetails.colorRamp\r\n      if (this.vizDetails.breakpoints) this.guiConfig['manual breaks'] = this.vizDetails.breakpoints\r\n    },\r\n\r\n    setManualBreakpoints() {\r\n      const breakpoints = this.guiConfig['manual breaks'].split(',').map(b => {\r\n        return Number.parseFloat(b.trim())\r\n      })\r\n      this.breakpoints = breakpoints\r\n      this.guiConfig.buckets = 1 + breakpoints.length\r\n    },\r\n\r\n    async buildThumbnail() {\r\n      if (this.thumbnail && this.vizDetails.thumbnail) {\r\n        try {\r\n          const blob = await this.fileApi.getFileBlob(\r\n            this.myState.subfolder + '/' + this.vizDetails.thumbnail\r\n          )\r\n          const buffer = await blob.arrayBuffer()\r\n          const base64 = util.arrayBufferToBase64(buffer)\r\n          if (base64)\r\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n      }\r\n    },\r\n\r\n    async parseCSVFile(filename: string) {\r\n      this.myState.statusMessage = 'Loading file...'\r\n\r\n      let totalRows = 0\r\n      // get the raw unzipped arraybuffer\r\n      this.gzipWorker = new XytDataParser()\r\n\r\n      this.gzipWorker.onmessage = async (event: MessageEvent) => {\r\n        if (event.data.status) {\r\n          this.myState.statusMessage = event.data.status\r\n        } else if (event.data.error) {\r\n          this.myState.statusMessage = event.data.error\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `XYT Loading Error`,\r\n            desc: `Error loading: ${this.myState.subfolder}/${this.vizDetails.file}`,\r\n          })\r\n        } else if (event.data.finished) {\r\n          this.finishedLoadingData(totalRows, event.data)\r\n        } else if (event.data.needCRS) {\r\n          if (this.gzipWorker) this.gzipWorker.terminate()\r\n          let userCRS = prompt('' + this.$t('promptCRS')) || 'EPSG:25833'\r\n          if (Number.isFinite(parseInt(userCRS))) userCRS = `EPSG:${userCRS}`\r\n          this.vizDetails.projection = userCRS.toUpperCase()\r\n          this.parseCSVFile(filename)\r\n        } else {\r\n          const rows = event.data.time.length\r\n          // zoom map on first load\r\n          if (!totalRows) this.setFirstZoom(event.data.coordinates, rows)\r\n          // save layer data\r\n          totalRows += rows\r\n          this.timeRange = [\r\n            Math.min(this.timeRange[0], event.data.time[0]),\r\n            Math.max(this.timeRange[1], event.data.time[rows - 1]),\r\n          ]\r\n          this.pointLayers.push(event.data)\r\n        }\r\n      }\r\n\r\n      this.gzipWorker.postMessage({\r\n        filepath: filename,\r\n        fileSystem: this.fileSystem,\r\n        projection: this.vizDetails.projection,\r\n      })\r\n    },\r\n\r\n    setFirstZoom(coordinates: any[], rows: number) {\r\n      const longitude = 0.5 * (coordinates[0] + coordinates[rows * 2 - 2])\r\n      const latitude = 0.5 * (coordinates[1] + coordinates[rows * 2 - 1])\r\n\r\n      if (Number.isFinite(longitude) && Number.isFinite(latitude)) {\r\n        globalStore.commit(\r\n          'setMapCamera',\r\n          Object.assign({}, globalStore.state.viewState, { longitude, latitude, zoom: 10 })\r\n        )\r\n      }\r\n    },\r\n\r\n    finishedLoadingData(totalRows: number, data: any) {\r\n      console.log('ALL DONE', { totalRows, data: data.range, time: this.timeRange })\r\n      this.myState.statusMessage = ''\r\n      this.timeFilter = [this.timeRange[0], this.timeRange[0] + 3599]\r\n      this.isLoaded = true\r\n      this.range = data.range\r\n      // if (!this.timeRange[1]) this.timeRange[1] = 1\r\n      if (this.gzipWorker) this.gzipWorker.terminate()\r\n\r\n      this.setColors()\r\n      this.moveLogo()\r\n    },\r\n\r\n    animate() {\r\n      if (!this.isAnimating) return\r\n\r\n      this.animationElapsedTime = this.ANIMATE_SPEED * (Date.now() - this.startTime)\r\n      const animationClockTime = this.animationElapsedTime + this.timeRange[0]\r\n\r\n      if (animationClockTime > this.timeRange[1]) {\r\n        this.startTime = Date.now()\r\n        this.animationElapsedTime = 0 // this.timeRange[0]\r\n      }\r\n\r\n      const span = this.timeFilter[1] - this.timeFilter[0]\r\n      this.timeFilter = [animationClockTime, animationClockTime + span]\r\n\r\n      this.animator = window.requestAnimationFrame(this.animate)\r\n    },\r\n\r\n    toggleAnimation() {\r\n      this.isAnimating = !this.isAnimating\r\n      if (this.isAnimating) {\r\n        this.animationElapsedTime = this.timeFilter[0] - this.timeRange[0]\r\n        this.startTime = Date.now() - this.animationElapsedTime / this.ANIMATE_SPEED\r\n        this.animate()\r\n      }\r\n    },\r\n\r\n    setColors() {\r\n      const EXPONENT = this.guiConfig.exponent // powerFunction // 4 // log-e? not steep enough\r\n\r\n      let colors256 = colormap({\r\n        colormap: this.guiConfig['color ramp'],\r\n        nshades: 256,\r\n        format: 'rba',\r\n        alpha: 1,\r\n      }).map((c: number[]) => [c[0], c[1], c[2]])\r\n\r\n      if (this.guiConfig.flip) colors256 = colors256.reverse()\r\n\r\n      const step = 256 / (this.guiConfig.buckets - 1)\r\n      const colors = []\r\n      for (let i = 0; i < this.guiConfig.buckets - 1; i++) {\r\n        colors.push(colors256[Math.round(step * i)])\r\n      }\r\n      colors.push(colors256[255])\r\n\r\n      this.colors = colors\r\n\r\n      // figure out min and max\r\n      const max1 = Math.pow(this.range[1], 1 / EXPONENT)\r\n      const max2 = (max1 * this.guiConfig['clip max']) / 100.0\r\n      // const clippedMin = (this.range[1] * this.clipData[0]) / 100.0\r\n      // console.log({ max1, max2 })\r\n\r\n      // generate some breakpoints if user didn't supply them\r\n      if (this.guiConfig['manual breaks']) {\r\n        this.setManualBreakpoints()\r\n      } else {\r\n        if (!this.vizDetails.breakpoints) {\r\n          const breakpoints = [] as number[]\r\n          for (let i = 1; i < this.guiConfig.buckets; i++) {\r\n            const raw = (max2 * i) / this.guiConfig.buckets\r\n            const breakpoint = Math.pow(raw, EXPONENT)\r\n            breakpoints.push(breakpoint)\r\n          }\r\n\r\n          this.breakpoints = breakpoints\r\n        }\r\n      }\r\n\r\n      // only update legend if we have the full dataset already\r\n      if (this.isLoaded) this.setLegend(colors, this.breakpoints)\r\n    },\r\n\r\n    setLegend(colors: any[], breakpoints: number[]) {\r\n      // hide the legend if there is no data to show.\r\n      if (this.range[1] - this.range[0] === 0) return\r\n\r\n      this.legendStore = new LegendStore()\r\n      this.legendStore.setLegendSection({\r\n        section: 'Legend',\r\n        column: 'Legend',\r\n        values: colors.map((rgb, index) => {\r\n          const breakpoint = breakpoints[index == 0 ? index : index - 1]\r\n          let label = '' + Math.round(1e6 * breakpoint) / 1e6\r\n          if (index == 0) label = '< ' + label\r\n          if (index == colors.length - 1) label = '> ' + label\r\n          return { label, value: rgb }\r\n        }),\r\n      })\r\n    },\r\n\r\n    async loadFiles() {\r\n      await this.fileApi.getChromePermission(this.fileSystem.handle)\r\n\r\n      try {\r\n        let filename = `${this.myState.subfolder}/${this.vizDetails.file}`\r\n        await this.parseCSVFile(filename)\r\n        this.$emit('isLoaded')\r\n      } catch (e) {\r\n        console.error(e)\r\n        this.myState.statusMessage = '' + e\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg: `Loading/Parsing Error`,\r\n          desc: 'Error loading/parsing: ${this.myState.subfolder}/${this.vizDetails.file}',\r\n        })\r\n      }\r\n    },\r\n\r\n    convertSecondsToClockTimeMinutes(index: number) {\r\n      const h = Math.floor(index / 3600)\r\n      const m = Math.floor((index - h * 3600) / 60)\r\n      const s = index - h * 3600 - m * 60\r\n\r\n      const hms = { h: `${h}`, m: `${m}`.padStart(2, '0'), s: `${s}`.padStart(2, '0') }\r\n\r\n      return `${hms.h}:${hms.m}`\r\n    },\r\n  },\r\n})\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.viz-plugin {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: $thumbnailHeight;\r\n  background: url('assets/thumbnail.jpg') center / cover no-repeat;\r\n  z-index: -1;\r\n}\r\n\r\n.viz-plugin.hide-thumbnail {\r\n  background: none;\r\n  z-index: 0;\r\n}\r\n\r\n.message {\r\n  z-index: 5;\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  box-shadow: 0px 2px 10px #22222222;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: auto auto 0 0;\r\n  background-color: var(--bgPanel);\r\n  padding: 0.5rem 1.5rem;\r\n\r\n  a {\r\n    color: white;\r\n    text-decoration: none;\r\n\r\n    &.router-link-exact-active {\r\n      color: white;\r\n    }\r\n  }\r\n\r\n  p {\r\n    color: var(--textFancy);\r\n    font-size: 1.2rem;\r\n    font-weight: normal;\r\n    line-height: 1.75rem;\r\n    margin: auto 0.5rem auto 0;\r\n    padding: 0 0;\r\n  }\r\n}\r\n\r\n.map-layer {\r\n  pointer-events: auto;\r\n}\r\n\r\n.drawing-tool {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n.bottom-right {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  margin: auto 7px 15rem auto;\r\n  box-shadow: 0px 0px 5px 3px rgba(128, 128, 128, 0.1);\r\n}\r\n\r\n.legend-area {\r\n  background-color: var(--bgPanel);\r\n  border: 1px solid var(--bgPanel2);\r\n}\r\n\r\n.time-slider-area {\r\n  position: absolute;\r\n  bottom: 2.5rem;\r\n  left: 0;\r\n  right: 0;\r\n  margin: 0 8rem 0 0.5rem;\r\n  filter: $filterShadow;\r\n}\r\n\r\n.buckets {\r\n  color: var(--text);\r\n  padding: 4px 4px 4px 4px;\r\n  display: flex;\r\n}\r\n\r\n.ramp-selector {\r\n  background-color: var(--bgBold);\r\n}\r\n\r\n.configurator {\r\n  user-select: none;\r\n  background-color: var(--bgPanel);\r\n  margin-top: 2rem;\r\n}\r\n\r\n.clip-slider {\r\n  margin: 0 0.5rem;\r\n}\r\n\r\n.top-right {\r\n  background-color: var(--bgPanel2);\r\n  color: white;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: 5;\r\n  border-left: 1px solid #66669940;\r\n  border-bottom: 1px solid #66669940;\r\n  box-shadow: 0px 0px 5px 3px rgba(128, 128, 128, 0.1);\r\n}\r\n\r\n* > .number {\r\n  background-color: yellow;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n  .message {\r\n    padding: 0.5rem 0.5rem;\r\n  }\r\n}\r\n</style>\r\n","\r\n.viz-plugin(:class=\"{'hide-thumbnail': !thumbnail}\" oncontextmenu=\"return false\" :id=\"`id-${viewId}`\")\r\n\r\n  xy-time-deck-map.map-layer(v-if=\"!thumbnail\"\r\n    :viewId=\"viewId\"\r\n    :pointLayers=\"pointLayers\"\r\n    :timeFilter=\"timeFilter\"\r\n    :dark=\"this.$store.state.isDarkMode\"\r\n    :colors=\"this.colors\"\r\n    :breakpoints=\"this.breakpoints\"\r\n    :radius=\"this.guiConfig.radius\"\r\n    :mapIsIndependent=\"false\"\r\n  )\r\n\r\n  zoom-buttons(v-if=\"!thumbnail\" corner=\"bottom\")\r\n\r\n  .top-right\r\n    .gui-config(:id=\"configId\")\r\n\r\n  .bottom-right\r\n    .legend-area(v-if=\"legendStore\")\r\n      legend-box(:legendStore=\"legendStore\")\r\n\r\n  time-slider.time-slider-area(v-if=\"isLoaded\"\r\n    :range=\"timeRange\"\r\n    :activeTimeExtent=\"timeFilter\"\r\n    :labels=\"timeLabels\"\r\n    :isAnimating=\"isAnimating\"\r\n    @timeExtent=\"handleTimeSliderValues\"\r\n    @toggleAnimation=\"toggleAnimation\"\r\n    @drag=\"isAnimating=false\"\r\n  )\r\n\r\n  .message(v-if=\"!thumbnail && myState.statusMessage\")\r\n    p.status-message {{ myState.statusMessage }}\r\n\r\n"],"names":["ScatterplotColorBinsLayer","ScatterplotLayer","context","uniforms","colors","breakpoints","c","i","combinedUniforms","dataFilter","DataFilterExtension","filterSize","convertSecondsToClockTimeMinutes","index","seconds","hms","timeConvert","minutes","slice","hours","INITIAL_VIEW","pitch","zoom","bearing","longitude","latitude","Component","viewId","pointLayers","timeFilter","dark","radius","mapIsIndependent","viewState","setViewState","useState","REACT_VIEW_HANDLES","globalStore","state","handleViewState","view","center","commit","getTooltip","element","layerId","layer","id","time","humanTime","value","html","Math","round","style","color","backgroundColor","layers","map","points","layerIndex","outOfRange","timeRange","data","length","attributes","getPosition","coordinates","size","getFilterValue","getValue","autoHighlight","extensions","filled","filterRange","getRadius","highlightColor","opacity","parameters","depthTest","pickable","radiusScale","stroked","updateTriggers","getFillColor","visible","React","createElement","DeckGL","controller","useDevicePixels","onViewStateChange","e","pickingRadius","onClick","StaticMap","mapStyle","getters","preventStyleDiffing","mapboxApiAccessToken","MAPBOX_TOKEN","i18n","MyComponent","defineComponent","CollapsiblePanel","DrawingTool","LegendBox","TimeSlider","ZoomButtons","XyTimeDeckMap","HTTPFileSystem","svnProject","a","timeValues","deckmap","logo","right","GUI","config","text","YAML","projection","filename","Status","hasYaml","configuration","key","b","buffer","base64","util","totalRows","XytDataParser","event","userCRS","rows","animationClockTime","span","EXPONENT","colors256","colormap","step","max2","raw","breakpoint","LegendStore","rgb","label","h","m","render","_vm","_h","_c","$event","staticRenderFns"],"mappings":"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"}