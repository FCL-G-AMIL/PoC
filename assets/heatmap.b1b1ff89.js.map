{"version":3,"file":"heatmap.b1b1ff89.js","sources":["../../src/dash-panels/heatmap.vue","../../src/dash-panels/heatmap.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\nVuePlotly.myplot(\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n)\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\nimport { transpose } from 'mathjs'\r\n\r\nimport VuePlotly from '@/components/VuePlotly.vue'\r\nimport DashboardDataManager, { FilterDefinition } from '@/js/DashboardDataManager'\r\nimport { DataTable, FileSystemConfig, BG_COLOR_DASHBOARD, UI_FONT, Status } from '@/Globals'\r\nimport globalStore from '@/store'\r\nimport { buildCleanTitle } from './_allPanels'\r\n\r\nexport default defineComponent({\r\n  name: 'HeatmapPanel',\r\n  components: { VuePlotly },\r\n  props: {\r\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\r\n    subfolder: { type: String, required: true },\r\n    files: { type: Array, required: true },\r\n    config: { type: Object as any, required: true },\r\n    cardTitle: { type: String, required: true },\r\n    cardId: String,\r\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\r\n    zoomed: Boolean,\r\n  },\r\n  data: () => {\r\n    return {\r\n      globalState: globalStore.state,\r\n      // dataSet is either x,y or allRows[]\r\n      dataSet: {} as { x?: any[]; y?: any[]; allRows?: DataTable },\r\n      id: ('heatmap-' + Math.floor(1e12 * Math.random())) as any,\r\n      YAMLrequirementsHeatmap: { dataset: '', y: '', columns: [] },\r\n      layout: {\r\n        margin: { t: 8, b: 50 },\r\n        font: {\r\n          color: '#444444',\r\n          family: UI_FONT,\r\n        },\r\n        barmode: '',\r\n        bargap: 0.08,\r\n        xaxis: {\r\n          autorange: true,\r\n          title: '',\r\n        },\r\n        yaxis: {\r\n          autorange: true,\r\n          title: '',\r\n        },\r\n        legend: {\r\n          x: 1,\r\n          xanchor: 'right',\r\n          y: 1,\r\n        },\r\n      } as any,\r\n      data: [] as any[],\r\n      options: {\r\n        displaylogo: false,\r\n        responsive: true,\r\n        modeBarButtonsToRemove: [\r\n          'pan2d',\r\n          'zoom2d',\r\n          'select2d',\r\n          'lasso2d',\r\n          'zoomIn2d',\r\n          'zoomOut2d',\r\n          'autoScale2d',\r\n          'hoverClosestCartesian',\r\n          'hoverCompareCartesian',\r\n          'resetScale2d',\r\n          'toggleSpikelines',\r\n          'resetViewMapbox',\r\n        ],\r\n        toImageButtonOptions: {\r\n          format: 'png', // one of png, svg, jpeg, webp\r\n          filename: 'heatmap',\r\n          width: 1200,\r\n          height: 800,\r\n          scale: 1.0, // Multiply title/legend/axis/canvas sizes by this factor\r\n        },\r\n      },\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.updateTheme()\r\n    this.checkWarningsAndErrors()\r\n    this.dataSet = await this.loadData()\r\n\r\n    if (Object.keys(this.dataSet).length) {\r\n      this.updateChart()\r\n      this.options.toImageButtonOptions.filename = buildCleanTitle(this.cardTitle, this.subfolder)\r\n      this.$emit('dimension-resizer', { id: this.cardId, resizer: this.changeDimensions })\r\n    }\r\n    this.$emit('isLoaded')\r\n  },\r\n  beforeDestroy() {\r\n    this.datamanager?.removeFilterListener(this.config, this.handleFilterChanged)\r\n  },\r\n\r\n  watch: {\r\n    zoomed() {\r\n      this.resizePlot()\r\n    },\r\n    'globalState.isDarkMode'() {\r\n      this.updateTheme()\r\n    },\r\n  },\r\n  methods: {\r\n    changeDimensions(dimensions: { width: number; height: number }) {\r\n      this.layout = Object.assign({}, this.layout, dimensions)\r\n    },\r\n\r\n    resizePlot() {\r\n      var elements = document.getElementsByClassName('spinner-box')\r\n      if (this.zoomed) {\r\n        for (let element of elements) {\r\n          if (element.clientHeight > 0) {\r\n            this.layout.height = element.clientHeight\r\n          }\r\n        }\r\n      } else {\r\n        this.layout.height = 300\r\n      }\r\n    },\r\n\r\n    updateTheme() {\r\n      const colors = {\r\n        paper_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        plot_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        font: { color: this.globalState.isDarkMode ? '#cccccc' : '#444444' },\r\n      }\r\n      this.layout = Object.assign({}, this.layout, colors)\r\n    },\r\n\r\n    handleFilterChanged() {\r\n      if (!this.datamanager) return\r\n\r\n      const { filteredRows } = this.datamanager.getFilteredDataset(this.config) as any\r\n\r\n      if (!filteredRows || !filteredRows.length) {\r\n        this.dataSet = { allRows: {} }\r\n      } else {\r\n        const allRows = {} as any\r\n\r\n        const keys = Object.keys(filteredRows[0])\r\n        keys.forEach(key => (allRows[key] = { name: key, values: [] as any }))\r\n\r\n        filteredRows.forEach((row: any) => {\r\n          keys.forEach(key => allRows[key].values.push(row[key]))\r\n        })\r\n        this.dataSet = { allRows }\r\n      }\r\n\r\n      this.updateChart()\r\n    },\r\n\r\n    async loadData() {\r\n      try {\r\n        this.validateYAML()\r\n        let dataset = await this.datamanager.getDataset(this.config)\r\n\r\n        // no filter? we are done\r\n        if (!this.config.filters) return dataset\r\n\r\n        // filter data before returning:\r\n        this.datamanager.addFilterListener(this.config, this.handleFilterChanged)\r\n\r\n        for (const [column, value] of Object.entries(this.config.filters)) {\r\n          const filter: FilterDefinition = {\r\n            dataset: this.config.dataset,\r\n            column: column,\r\n            value: value,\r\n            range: Array.isArray(value),\r\n          }\r\n          this.datamanager.setFilter(filter)\r\n        }\r\n        // empty for now; filtered data will come back later via handleFilterChanged async.\r\n        return { allRows: {} }\r\n      } catch (e) {\r\n        console.error('' + e)\r\n      }\r\n      return { allRows: {} }\r\n    },\r\n\r\n    validateYAML() {\r\n      console.log('in heatmap validation')\r\n\r\n      for (const key in this.YAMLrequirementsHeatmap) {\r\n        if (key in this.config === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `YAML file missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsXY for required keys',\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    updateChart() {\r\n      this.layout.xaxis.title = this.config.xAxisTitle || this.config.xAxisName || ''\r\n      this.layout.yaxis.title = this.config.yAxisTitle || this.config.yAxisName || ''\r\n\r\n      try {\r\n        if (this.config.groupBy) this.updateChartWithGroupBy()\r\n        else this.updateChartSimple()\r\n      } catch (e) {\r\n        const msg = '' + e\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg,\r\n          desc: 'Add a desription...',\r\n        })\r\n      }\r\n    },\r\n\r\n    updateChartWithGroupBy() {\r\n      // tba\r\n    },\r\n\r\n    updateChartSimple() {\r\n      var xaxis: any[] = []\r\n      var matrix: any[] = []\r\n\r\n      const allRows = this.dataSet.allRows || ({} as any)\r\n\r\n      const columns = this.config.columns || this.config.usedCol || []\r\n      if (!columns.length) return\r\n\r\n      // Reads all the data of the y-axis.\r\n      let yaxis = allRows[this.config.y].values\r\n\r\n      // Reads all the data of the x-axis.\r\n      for (const key of Object.keys(allRows)) {\r\n        if (columns.includes(key)) {\r\n          xaxis.push(key)\r\n        }\r\n      }\r\n\r\n      // Converts all data to the matrix format of the heatmap\r\n      let i = 0\r\n      for (const column of this.config.columns) {\r\n        matrix[i++] = allRows[column].values\r\n      }\r\n\r\n      if (!this.config.flipAxes) matrix = transpose(matrix)\r\n\r\n      // Pushes the data into the chart\r\n      this.data = [\r\n        {\r\n          x: this.config.flipAxes ? yaxis : xaxis,\r\n          y: this.config.flipAxes ? xaxis : yaxis,\r\n          z: matrix,\r\n          colorscale: 'Viridis', // 'YlOrRed', // 'Hot',\r\n          type: 'heatmap',\r\n          automargin: true,\r\n        },\r\n      ]\r\n    },\r\n\r\n    // Check this plot for warnings and errors\r\n    checkWarningsAndErrors() {\r\n      var plotTitle = this.cardTitle\r\n      // warnings\r\n      // missing title\r\n      if (plotTitle.length == 0) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `The plot title is missing!`,\r\n          desc: \"Please add a plot title in the .yaml-file (title: 'Example title')\",\r\n        })\r\n      }\r\n      // errors\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.myplot {\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n}\r\n</style>\r\n","\r\nVuePlotly.myplot(\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n)\r\n"],"names":["__vue2_script","defineComponent","VuePlotly","globalStore","UI_FONT","buildCleanTitle","_a","dimensions","elements","element","colors","BG_COLOR_DASHBOARD","filteredRows","allRows","keys","key","row","dataset","column","value","filter","e","Status","msg","xaxis","matrix","columns","yaxis","i","transpose","plotTitle","render","_vm","_h","_c","staticRenderFns"],"mappings":"8VAoBA,IAAAA,EAAAC,EAAA,CACA,KAAA,eACA,WAAA,CAAA,UAAAC,CAAA,EACA,MAAA,CACA,iBAAA,CAAA,KAAA,OAAA,SAAA,EAAA,EACA,UAAA,CAAA,KAAA,OAAA,SAAA,EAAA,EACA,MAAA,CAAA,KAAA,MAAA,SAAA,EAAA,EACA,OAAA,CAAA,KAAA,OAAA,SAAA,EAAA,EACA,UAAA,CAAA,KAAA,OAAA,SAAA,EAAA,EACA,OAAA,OACA,YAAA,CAAA,KAAA,OAAA,SAAA,EAAA,EACA,OAAA,OACA,EACA,KAAA,KACA,CACA,YAAAC,EAAA,MAEA,QAAA,CAAA,EACA,GAAA,WAAA,KAAA,MAAA,KAAA,KAAA,QAAA,EACA,wBAAA,CAAA,QAAA,GAAA,EAAA,GAAA,QAAA,EAAA,EACA,OAAA,CACA,OAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EACA,KAAA,CACA,MAAA,UACA,OAAAC,CACA,EACA,QAAA,GACA,OAAA,IACA,MAAA,CACA,UAAA,GACA,MAAA,EACA,EACA,MAAA,CACA,UAAA,GACA,MAAA,EACA,EACA,OAAA,CACA,EAAA,EACA,QAAA,QACA,EAAA,CACA,CACA,EACA,KAAA,CAAA,EACA,QAAA,CACA,YAAA,GACA,WAAA,GACA,uBAAA,CACA,QACA,SACA,WACA,UACA,WACA,YACA,cACA,wBACA,wBACA,eACA,mBACA,iBACA,EACA,qBAAA,CACA,OAAA,MACA,SAAA,UACA,MAAA,KACA,OAAA,IACA,MAAA,CACA,CACA,CAAA,GAGA,MAAA,SAAA,CACA,KAAA,YAAA,EACA,KAAA,uBAAA,EACA,KAAA,QAAA,MAAA,KAAA,SAAA,EAEA,OAAA,KAAA,KAAA,OAAA,EAAA,SACA,KAAA,YAAA,EACA,KAAA,QAAA,qBAAA,SAAAC,EAAA,KAAA,UAAA,KAAA,SAAA,EACA,KAAA,MAAA,oBAAA,CAAA,GAAA,KAAA,OAAA,QAAA,KAAA,gBAAA,CAAA,GAEA,KAAA,MAAA,UAAA,CACA,EACA,eAAA,QACAC,EAAA,KAAA,cAAA,MAAAA,EAAA,qBAAA,KAAA,OAAA,KAAA,oBACA,EAEA,MAAA,CACA,QAAA,CACA,KAAA,WAAA,CACA,EACA,0BAAA,CACA,KAAA,YAAA,CACA,CACA,EACA,QAAA,CACA,iBAAAC,EAAA,CACA,KAAA,OAAA,OAAA,OAAA,CAAA,EAAA,KAAA,OAAAA,CAAA,CACA,EAEA,YAAA,CACA,IAAAC,EAAA,SAAA,uBAAA,aAAA,EACA,GAAA,KAAA,OACA,QAAAC,KAAAD,EACAC,EAAA,aAAA,IACA,KAAA,OAAA,OAAAA,EAAA,mBAIA,KAAA,OAAA,OAAA,GAEA,EAEA,aAAA,CACA,MAAAC,EAAA,CACA,cAAAC,EAAA,KAAA,YAAA,aACA,aAAAA,EAAA,KAAA,YAAA,aACA,KAAA,CAAA,MAAA,KAAA,YAAA,WAAA,UAAA,SAAA,CAAA,EAEA,KAAA,OAAA,OAAA,OAAA,CAAA,EAAA,KAAA,OAAAD,CAAA,CACA,EAEA,qBAAA,CACA,GAAA,CAAA,KAAA,YAAA,OAEA,KAAA,CAAA,aAAAE,CAAA,EAAA,KAAA,YAAA,mBAAA,KAAA,MAAA,EAEA,GAAA,CAAAA,GAAA,CAAAA,EAAA,OACA,KAAA,QAAA,CAAA,QAAA,CAAA,CAAA,MACA,CACA,MAAAC,EAAA,CAAA,EAEAC,EAAA,OAAA,KAAAF,EAAA,EAAA,EACAE,EAAA,QAAAC,GAAAF,EAAAE,GAAA,CAAA,KAAAA,EAAA,OAAA,CAAA,CAAA,CAAA,EAEAH,EAAA,QAAAI,GAAA,CACAF,EAAA,WAAAD,EAAAE,GAAA,OAAA,KAAAC,EAAAD,EAAA,CAAA,CAAA,CACA,EACA,KAAA,QAAA,CAAA,QAAAF,EACA,CAEA,KAAA,YAAA,CACA,EAEA,MAAA,UAAA,CACA,GAAA,CACA,KAAA,aAAA,EACA,IAAAI,EAAA,MAAA,KAAA,YAAA,WAAA,KAAA,MAAA,EAGA,GAAA,CAAA,KAAA,OAAA,QAAA,OAAAA,EAGA,KAAA,YAAA,kBAAA,KAAA,OAAA,KAAA,mBAAA,EAEA,SAAA,CAAAC,EAAAC,CAAA,IAAA,OAAA,QAAA,KAAA,OAAA,OAAA,EAAA,CACA,MAAAC,EAAA,CACA,QAAA,KAAA,OAAA,QACA,OAAAF,EACA,MAAAC,EACA,MAAA,MAAA,QAAAA,CAAA,CAAA,EAEA,KAAA,YAAA,UAAAC,CAAA,CACA,CAEA,MAAA,CAAA,QAAA,CAAA,SACAC,GACA,QAAA,MAAA,GAAAA,CAAA,CACA,CACA,MAAA,CAAA,QAAA,CAAA,EACA,EAEA,cAAA,CACA,QAAA,IAAA,uBAAA,EAEA,UAAAN,KAAA,KAAA,wBACAA,KAAA,KAAA,QACA,KAAA,OAAA,OAAA,YAAA,CACA,KAAAO,EAAA,MACA,IAAA,mCAAAP,IACA,KAAA,iDAAA,CACA,CAGA,EAEA,aAAA,CACA,KAAA,OAAA,MAAA,MAAA,KAAA,OAAA,YAAA,KAAA,OAAA,WAAA,GACA,KAAA,OAAA,MAAA,MAAA,KAAA,OAAA,YAAA,KAAA,OAAA,WAAA,GAEA,GAAA,CACA,KAAA,OAAA,QAAA,KAAA,uBAAA,EACA,KAAA,kBAAA,QACAM,GACA,MAAAE,EAAA,GAAAF,EACA,KAAA,OAAA,OAAA,YAAA,CACA,KAAAC,EAAA,MACA,IAAAC,EACA,KAAA,qBAAA,CACA,CACA,CACA,EAEA,wBAAA,CAEA,EAEA,mBAAA,CACA,IAAAC,EAAA,CAAA,EACAC,EAAA,CAAA,EAEA,MAAAZ,EAAA,KAAA,QAAA,SAAA,CAAA,EAEAa,EAAA,KAAA,OAAA,SAAA,KAAA,OAAA,SAAA,GACA,GAAA,CAAAA,EAAA,OAAA,OAGA,IAAAC,EAAAd,EAAA,KAAA,OAAA,GAAA,OAGA,UAAAE,KAAA,OAAA,KAAAF,CAAA,EACAa,EAAA,SAAAX,CAAA,GACAS,EAAA,KAAAT,CAAA,EAKA,IAAAa,EAAA,EACA,UAAAV,KAAA,KAAA,OAAA,QACAO,EAAAG,KAAAf,EAAAK,GAAA,OAGA,KAAA,OAAA,WAAAO,EAAAI,EAAAJ,CAAA,GAGA,KAAA,KAAA,CACA,CACA,EAAA,KAAA,OAAA,SAAAE,EAAAH,EACA,EAAA,KAAA,OAAA,SAAAA,EAAAG,EACA,EAAAF,EACA,WAAA,UACA,KAAA,UACA,WAAA,EACA,CAAA,CAEA,EAGA,wBAAA,CACA,IAAAK,EAAA,KAAA,UAGAA,EAAA,QAAA,GACA,KAAA,OAAA,OAAA,YAAA,CACA,KAAAR,EAAA,QACA,IAAA,6BACA,KAAA,oEAAA,CACA,CAGA,CACA,CACA,CAAA,ECzRIS,EAAS,UAAY,CACvB,IAAIC,EAAI,KACJC,EAAGD,EAAI,eACPE,EAAGF,EAAI,MAAM,IAAIC,EAErB,OAAOC,EAAG,YAAa,CACrB,YAAa,SACb,MAAO,CACL,KAAQF,EAAI,KACZ,OAAUA,EAAI,OACd,QAAWA,EAAI,QACf,GAAMA,EAAI,EACX,CACL,CAAG,CACH,EACIG,EAAkB,CAAE"}