{"version":3,"file":"pie.1e6324ea.js","sources":["../../src/dash-panels/pie.vue","../../src/dash-panels/pie.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\nVuePlotly.myplot(v-if=\"data[0].values.length\"\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n)\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport DashboardDataManager, { FilterDefinition } from '@/js/DashboardDataManager'\r\nimport VuePlotly from '@/components/VuePlotly.vue'\r\nimport { FileSystemConfig, Status, BG_COLOR_DASHBOARD, UI_FONT } from '@/Globals'\r\nimport globalStore from '@/store'\r\nimport { buildCleanTitle } from './_allPanels'\r\n\r\nexport default defineComponent({\r\n  name: 'PieChartPanel',\r\n  components: { VuePlotly },\r\n  props: {\r\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\r\n    subfolder: { type: String, required: true },\r\n    files: { type: Array, required: true },\r\n    config: { type: Object as any, required: true },\r\n    cardTitle: { type: String, required: true },\r\n    cardId: String,\r\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\r\n  },\r\n  data: () => {\r\n    return {\r\n      globalState: globalStore.state,\r\n      id: ('pie-' + Math.floor(1e12 * Math.random())) as any,\r\n      // dataSet is either x,y or allRows[]\r\n      dataSet: {} as { x?: any[]; y?: any[]; allRows?: any },\r\n      YAMLrequirementsPie: { dataset: '', useLastRow: '' },\r\n      layout: {\r\n        height: 300,\r\n        margin: { t: 8, b: 0, l: 0, r: 0, pad: 2 },\r\n        font: {\r\n          color: '#444444',\r\n          family: UI_FONT,\r\n        },\r\n        xaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 12 },\r\n          animate: true,\r\n        },\r\n        yaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 16 },\r\n          animate: true,\r\n        },\r\n        legend: {\r\n          // yanchor: 'top',\r\n          // xanchor: 'center',\r\n          orientation: 'v',\r\n          x: 1,\r\n          y: 1,\r\n        },\r\n      },\r\n\r\n      data: [\r\n        {\r\n          sort: false, // to keep colors consistent across plots\r\n          labels: [] as any[],\r\n          values: [] as any[],\r\n          type: 'pie',\r\n          hole: 0.1,\r\n          textinfo: 'label+percent',\r\n          textposition: 'inside',\r\n          automargin: true,\r\n        },\r\n      ],\r\n      options: {\r\n        displaylogo: false,\r\n        responsive: true,\r\n        modeBarButtonsToRemove: [\r\n          'pan2d',\r\n          'zoom2d',\r\n          'select2d',\r\n          'lasso2d',\r\n          'zoomIn2d',\r\n          'zoomOut2d',\r\n          'autoScale2d',\r\n          'hoverClosestCartesian',\r\n          'hoverCompareCartesian',\r\n          'resetScale2d',\r\n          'toggleSpikelines',\r\n          'resetViewMapbox',\r\n        ],\r\n        toImageButtonOptions: {\r\n          format: 'png', // one of png, svg, jpeg, webp\r\n          filename: 'pie-chart',\r\n          width: null,\r\n          height: null,\r\n        },\r\n      },\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.updateTheme()\r\n\r\n    this.options.toImageButtonOptions.filename = buildCleanTitle(this.cardTitle, this.subfolder)\r\n\r\n    this.dataSet = await this.loadData()\r\n    this.updateChart()\r\n\r\n    this.$emit('dimension-resizer', { id: this.cardId, resizer: this.changeDimensions })\r\n    this.$emit('isLoaded')\r\n  },\r\n  beforeDestroy() {\r\n    this.datamanager?.removeFilterListener(this.config, this.handleFilterChanged)\r\n  },\r\n\r\n  watch: {\r\n    'globalState.isDarkMode'() {\r\n      this.updateTheme()\r\n    },\r\n  },\r\n  methods: {\r\n    changeDimensions(dimensions: { width: number; height: number }) {\r\n      this.layout = Object.assign({}, this.layout, dimensions)\r\n    },\r\n\r\n    handleFilterChanged() {\r\n      if (!this.datamanager) return\r\n\r\n      const { filteredRows } = this.datamanager.getFilteredDataset(this.config) as any\r\n\r\n      if (!filteredRows || !filteredRows.length) {\r\n        this.dataSet = { allRows: {} }\r\n      } else {\r\n        const allRows = {} as any\r\n\r\n        const keys = Object.keys(filteredRows[0])\r\n        keys.forEach(key => (allRows[key] = { name: key, values: [] as any }))\r\n\r\n        filteredRows.forEach((row: any) => {\r\n          keys.forEach(key => allRows[key].values.push(row[key]))\r\n        })\r\n        this.dataSet = { allRows }\r\n      }\r\n\r\n      this.updateChart()\r\n    },\r\n\r\n    updateTheme() {\r\n      const colors = {\r\n        paper_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        plot_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        font: { color: this.globalState.isDarkMode ? '#cccccc' : '#444444' },\r\n      }\r\n      this.layout = Object.assign({}, this.layout, colors)\r\n    },\r\n\r\n    async loadData() {\r\n      try {\r\n        this.validateYAML()\r\n        let dataset = await this.datamanager.getDataset(this.config)\r\n\r\n        // no filter? we are done\r\n        if (!this.config.filters) return dataset\r\n\r\n        // filter data before returning:\r\n        this.datamanager.addFilterListener(this.config, this.handleFilterChanged)\r\n\r\n        for (const [column, value] of Object.entries(this.config.filters)) {\r\n          const filter: FilterDefinition = {\r\n            dataset: this.config.dataset,\r\n            column: column,\r\n            value: value,\r\n            range: Array.isArray(value),\r\n          }\r\n          this.datamanager.setFilter(filter)\r\n        }\r\n        // empty for now; filtered data will come back later via handleFilterChanged async.\r\n        return { allRows: {} }\r\n      } catch (e) {\r\n        console.error('' + e)\r\n      }\r\n      return { allRows: {} }\r\n    },\r\n\r\n    validateYAML() {\r\n      for (const key in this.YAMLrequirementsPie) {\r\n        if (key in this.config === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `YAML file missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsXY for required keys',\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    updateChart() {\r\n      try {\r\n        if (this.config.groupBy) this.updateChartWithGroupBy()\r\n        else this.updateChartSimple()\r\n      } catch (e) {\r\n        const msg = '' + e\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg,\r\n          desc: 'Add a desription...',\r\n        })\r\n      }\r\n    },\r\n\r\n    updateChartWithGroupBy() {\r\n      // tba\r\n    },\r\n\r\n    updateChartSimple() {\r\n      const allRows = this.dataSet.allRows || {}\r\n\r\n      this.data[0].labels = Object.keys(allRows)\r\n      this.data[0].values = Object.values(allRows)\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.myplot {\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n}\r\n</style>\r\n","\r\nVuePlotly.myplot(v-if=\"data[0].values.length\"\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n)\r\n"],"names":["__vue2_script","defineComponent","VuePlotly","globalStore","UI_FONT","buildCleanTitle","_a","dimensions","filteredRows","allRows","keys","key","row","colors","BG_COLOR_DASHBOARD","dataset","column","value","filter","e","Status","msg","render","_vm","_h","_c","staticRenderFns"],"mappings":"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"}