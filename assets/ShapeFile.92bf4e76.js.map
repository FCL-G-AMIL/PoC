{"version":3,"file":"ShapeFile.92bf4e76.js","sources":["../../node_modules/d3-array/src/transpose.js","../../node_modules/d3-array/src/zip.js","../../node_modules/reproject/index.js","../../node_modules/truncate-utf8-bytes/lib/truncate.js","../../node_modules/utf8-byte-length/browser.js","../../node_modules/truncate-utf8-bytes/browser.js","../../node_modules/sanitize-filename/index.js","../../node_modules/@deck.gl/layers/src/geojson-layer/sub-layer-map.ts","../../src/layers/GeojsonOffsetLayer.ts","../../src/js/screenshots.ts","../../src/plugins/shape-file/GeojsonLayer.tsx","../../src/components/BackgroundMapOnTop.vue","../../src/components/BackgroundMapOnTop.vue?vue&type=template&lang.js","../../src/plugins/shape-file/ModalIdColumnPicker.vue","../../src/plugins/shape-file/ModalIdColumnPicker.vue?vue&type=template&lang.js","../../src/plugins/shape-file/ShapeFile.vue","../../src/plugins/shape-file/ShapeFile.vue?vue&type=template&lang.js"],"sourcesContent":["import min from \"./min.js\";\n\nexport default function transpose(matrix) {\n  if (!(n = matrix.length)) return [];\n  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n      row[j] = matrix[j][i];\n    }\n  }\n  return transpose;\n}\n\nfunction length(d) {\n  return d.length;\n}\n","import transpose from \"./transpose.js\";\n\nexport default function zip() {\n  return transpose(arguments);\n}\n","'use strict';\n\nvar proj4 = require('proj4').hasOwnProperty('default') ? require('proj4').default : require('proj4');\n// Checks if `list` looks like a `[x, y]`.\nfunction isXY(list) {\n  return list.length >= 2 &&\n    typeof list[0] === 'number' &&\n    typeof list[1] === 'number';\n}\n\nfunction traverseCoords(coordinates, callback) {\n  if (isXY(coordinates)) return callback(coordinates);\n  return coordinates.map(function(coord){return traverseCoords(coord, callback);});\n}\n\n// Simplistic shallow clone that will work for a normal GeoJSON object.\nfunction clone(obj) {\n  if (null == obj || 'object' !== typeof obj) return obj;\n  var copy = obj.constructor();\n  for (var attr in obj) {\n    if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n  }\n  return copy;\n}\n\nfunction traverseGeoJson(geometryCb, nodeCb, geojson) {\n  if (geojson == null) return geojson;\n\n  var r = clone(geojson);\n  var self = traverseGeoJson.bind(this, geometryCb, nodeCb);\n\n  switch (geojson.type) {\n  case 'Feature':\n    r.geometry = self(geojson.geometry);\n    break;\n  case 'FeatureCollection':\n    r.features = r.features.map(self);\n    break;\n  case 'GeometryCollection':\n    r.geometries = r.geometries.map(self);\n    break;\n  default:\n    geometryCb(r);\n    break;\n  }\n\n  if (nodeCb) nodeCb(r);\n\n  return r;\n}\n\nfunction detectCrs(geojson, projs) {\n  var crsInfo = geojson.crs,\n      crs;\n\n  if (crsInfo === undefined) {\n    throw new Error('Unable to detect CRS, GeoJSON has no \"crs\" property.');\n  }\n\n  if (crsInfo.type === 'name') {\n    crs = projs[crsInfo.properties.name];\n  } else if (crsInfo.type === 'EPSG') {\n    crs = projs['EPSG:' + crsInfo.properties.code];\n  }\n\n  if (!crs) {\n    throw new Error('CRS defined in crs section could not be identified: ' + JSON.stringify(crsInfo));\n  }\n\n  return crs;\n}\n\nfunction determineCrs(crs, projs) {\n  if (typeof crs === 'string' || crs instanceof String) {\n    return projs[crs] || proj4.Proj(crs);\n  }\n\n  return crs;\n}\n\nfunction calcBbox(geojson) {\n  var min = [Number.MAX_VALUE, Number.MAX_VALUE],\n      max = [-Number.MAX_VALUE, -Number.MAX_VALUE];\n  traverseGeoJson(function(_gj) {\n    traverseCoords(_gj.coordinates, function(xy) {\n      min[0] = Math.min(min[0], xy[0]);\n      min[1] = Math.min(min[1], xy[1]);\n      max[0] = Math.max(max[0], xy[0]);\n      max[1] = Math.max(max[1], xy[1]);\n    });\n  }, null, geojson);\n  return [min[0], min[1], max[0], max[1]];\n}\n\nfunction reproject(geojson, from, to, projs) {\n  projs = projs || {};\n  if (!from) {\n    from = detectCrs(geojson, projs);\n  } else {\n    from = determineCrs(from, projs);\n  }\n\n  to = determineCrs(to, projs);\n  \n  var transformFunc = proj4(from, to).forward.bind(transformFunc);\n\n  function transform(coords) {\n    var transformed = transformFunc(coords);\n    if (coords.length === 3 && coords[2] !== undefined && transformed[2] === undefined) {\n      // If the projection doesn't explicitly handle Z coordinate, retain the old one.\n      transformed[2] = coords[2];\n    }\n    return transformed;\n  }\n\n  var transformGeometryCoords = function(gj) {\n    // No easy way to put correct CRS info into the GeoJSON,\n    // and definitely wrong to keep the old, so delete it.\n    if (gj.crs) {\n      delete gj.crs;\n    }\n    gj.coordinates = traverseCoords(gj.coordinates, transform);\n  }\n\n  var transformBbox = function(gj) {\n    if (gj.bbox) {\n      gj.bbox = calcBbox(gj);\n    }\n  }\n\n  return traverseGeoJson(transformGeometryCoords, transformBbox, geojson);\n}\n\nmodule.exports = {\n  detectCrs: detectCrs,\n\n  reproject: reproject,\n\n  reverse: function(geojson) {\n    return traverseGeoJson(function(gj) {\n      gj.coordinates = traverseCoords(gj.coordinates, function(xy) {\n        return [ xy[1], xy[0] ];\n      });\n    }, null, geojson);\n  },\n\n  toWgs84: function(geojson, from, projs) {\n    return reproject(geojson, from, proj4.WGS84, projs);\n  }\n};\n","'use strict';\n\nfunction isHighSurrogate(codePoint) {\n  return codePoint >= 0xd800 && codePoint <= 0xdbff;\n}\n\nfunction isLowSurrogate(codePoint) {\n  return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n}\n\n// Truncate string by size in bytes\nmodule.exports = function truncate(getLength, string, byteLength) {\n  if (typeof string !== \"string\") {\n    throw new Error(\"Input must be string\");\n  }\n\n  var charLength = string.length;\n  var curByteLength = 0;\n  var codePoint;\n  var segment;\n\n  for (var i = 0; i < charLength; i += 1) {\n    codePoint = string.charCodeAt(i);\n    segment = string[i];\n\n    if (isHighSurrogate(codePoint) && isLowSurrogate(string.charCodeAt(i + 1))) {\n      i += 1;\n      segment += string[i];\n    }\n\n    curByteLength += getLength(segment);\n\n    if (curByteLength === byteLength) {\n      return string.slice(0, i + 1);\n    }\n    else if (curByteLength > byteLength) {\n      return string.slice(0, i - segment.length + 1);\n    }\n  }\n\n  return string;\n};\n\n","'use strict';\n\nfunction isHighSurrogate(codePoint) {\n  return codePoint >= 0xd800 && codePoint <= 0xdbff;\n}\n\nfunction isLowSurrogate(codePoint) {\n  return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n}\n\n// Truncate string by size in bytes\nmodule.exports = function getByteLength(string) {\n  if (typeof string !== \"string\") {\n    throw new Error(\"Input must be string\");\n  }\n\n  var charLength = string.length;\n  var byteLength = 0;\n  var codePoint = null;\n  var prevCodePoint = null;\n  for (var i = 0; i < charLength; i++) {\n    codePoint = string.charCodeAt(i);\n    // handle 4-byte non-BMP chars\n    // low surrogate\n    if (isLowSurrogate(codePoint)) {\n      // when parsing previous hi-surrogate, 3 is added to byteLength\n      if (prevCodePoint != null && isHighSurrogate(prevCodePoint)) {\n        byteLength += 1;\n      }\n      else {\n        byteLength += 3;\n      }\n    }\n    else if (codePoint <= 0x7f ) {\n      byteLength += 1;\n    }\n    else if (codePoint >= 0x80 && codePoint <= 0x7ff) {\n      byteLength += 2;\n    }\n    else if (codePoint >= 0x800 && codePoint <= 0xffff) {\n      byteLength += 3;\n    }\n    prevCodePoint = codePoint;\n  }\n\n  return byteLength;\n};\n","'use strict';\n\nvar truncate = require(\"./lib/truncate\");\nvar getLength = require(\"utf8-byte-length/browser\");\nmodule.exports = truncate.bind(null, getLength);\n","/*jshint node:true*/\n'use strict';\n\n/**\n * Replaces characters in strings that are illegal/unsafe for filenames.\n * Unsafe characters are either removed or replaced by a substitute set\n * in the optional `options` object.\n *\n * Illegal Characters on Various Operating Systems\n * / ? < > \\ : * | \"\n * https://kb.acronis.com/content/39790\n *\n * Unicode Control codes\n * C0 0x00-0x1f & C1 (0x80-0x9f)\n * http://en.wikipedia.org/wiki/C0_and_C1_control_codes\n *\n * Reserved filenames on Unix-based systems (\".\", \"..\")\n * Reserved filenames in Windows (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\",\n * \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\",\n * \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", and\n * \"LPT9\") case-insesitively and with or without filename extensions.\n *\n * Capped at 255 characters in length.\n * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\n *\n * @param  {String} input   Original filename\n * @param  {Object} options {replacement: String | Function }\n * @return {String}         Sanitized filename\n */\n\nvar truncate = require(\"truncate-utf8-bytes\");\n\nvar illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g;\nvar controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\nvar reservedRe = /^\\.+$/;\nvar windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\nvar windowsTrailingRe = /[\\. ]+$/;\n\nfunction sanitize(input, replacement) {\n  if (typeof input !== 'string') {\n    throw new Error('Input must be string');\n  }\n  var sanitized = input\n    .replace(illegalRe, replacement)\n    .replace(controlRe, replacement)\n    .replace(reservedRe, replacement)\n    .replace(windowsReservedRe, replacement)\n    .replace(windowsTrailingRe, replacement);\n  return truncate(sanitized, 255);\n}\n\nmodule.exports = function (input, options) {\n  var replacement = (options && options.replacement) || '';\n  var output = sanitize(input, replacement);\n  if (replacement === '') {\n    return output;\n  }\n  return sanitize(output, '');\n};\n","import {CompositeLayer, Layer} from '@deck.gl/core';\n\nimport IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n      pointAntialiasing: 'antialiasing',\n      pointBillboard: 'billboard',\n\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n      iconAlphaCutoff: 'alphaCutoff',\n      iconBillboard: 'billboard',\n\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n      textBillboard: 'billboard',\n      textFontSettings: 'fontSettings',\n\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\n\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\n\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n    _full3d: '_full3d',\n\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\n\nexport function getDefaultProps({\n  type,\n  props\n}: {\n  type: typeof Layer;\n  props: Record<string, string>;\n}): Record<string, any> {\n  const result = {};\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n  return result;\n}\n\nexport function forwardProps(\n  layer: CompositeLayer,\n  mapping: Record<string, string>\n): Record<string, any> {\n  const {transitions, updateTriggers} = layer.props;\n  const result: Record<string, any> = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n    if (sourceKey.startsWith('get')) {\n      // isAccessor\n      value = (layer as any).getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n    result[targetKey] = value;\n  }\n  return result;\n}\n","import { GeoJsonLayer } from '@deck.gl/layers'\r\nimport PathOffsetLayer from '@/layers/PathOffsetLayer'\r\nimport { forwardProps } from '@deck.gl/layers/src/geojson-layer/sub-layer-map'\r\n\r\nconst OFFSET_TYPE = {\r\n  NONE: 0,\r\n  LEFT: 1,\r\n  RIGHT: 2,\r\n}\r\n\r\nexport const LINE_LAYER = {\r\n  type: PathOffsetLayer,\r\n  props: {\r\n    lineWidthUnits: 'widthUnits',\r\n    lineWidthScale: 'widthScale',\r\n    lineWidthMinPixels: 'widthMinPixels',\r\n    lineWidthMaxPixels: 'widthMaxPixels',\r\n    lineJointRounded: 'jointRounded',\r\n    lineCapRounded: 'capRounded',\r\n    lineMiterLimit: 'miterLimit',\r\n    lineBillboard: 'billboard',\r\n    getLineColor: 'getColor',\r\n    getLineWidth: 'getWidth',\r\n  },\r\n}\r\n\r\nexport default class GeojsonOffsetLayer extends GeoJsonLayer {\r\n  constructor(props: any) {\r\n    super(props)\r\n  }\r\n\r\n  // this is copied directly from @deck.gl/layers/geojson-layer\r\n  _renderLineLayers() {\r\n    const { extruded, stroked } = this.props\r\n    const { layerProps } = this.state\r\n    const polygonStrokeLayerId = 'polygons-stroke'\r\n    const lineStringsLayerId = 'linestrings'\r\n\r\n    const PolygonStrokeLayer =\r\n      !extruded &&\r\n      stroked &&\r\n      this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) &&\r\n      this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type)\r\n    const LineStringsLayer =\r\n      this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) &&\r\n      this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type)\r\n\r\n    if (PolygonStrokeLayer || LineStringsLayer) {\r\n      const forwardedProps = forwardProps(this, LINE_LAYER.props)\r\n\r\n      return [\r\n        PolygonStrokeLayer &&\r\n          new PolygonStrokeLayer(\r\n            forwardedProps,\r\n            this.getSubLayerProps({\r\n              id: polygonStrokeLayerId,\r\n              updateTriggers: forwardedProps.updateTriggers,\r\n            }),\r\n            layerProps.polygonsOutline\r\n          ),\r\n\r\n        LineStringsLayer &&\r\n          new LineStringsLayer(\r\n            forwardedProps,\r\n            this.getSubLayerProps({\r\n              id: lineStringsLayerId,\r\n              updateTriggers: forwardedProps.updateTriggers,\r\n            }),\r\n            layerProps.lines\r\n          ),\r\n      ]\r\n    }\r\n    return null\r\n  }\r\n\r\n  getShaders() {\r\n    return {\r\n      ...super.getShaders(),\r\n      inject: {\r\n        'vs:#decl': `\r\n            attribute float instanceOffset;\r\n            varying float offset;\r\n            `,\r\n        'vs:#main-start': `\r\n            offset = instanceOffset;\r\n            `,\r\n        'fs:#decl': `\r\n            varying float offset;\r\n            `,\r\n        'fs:#main-start': `\r\n            if (offset == 1.0 && vPathPosition.x < 0.0) {\r\n                discard;\r\n            }\r\n            if (offset == 2.0 && vPathPosition.x > 0.0) {\r\n                discard;\r\n            }\r\n            if (offset == 0.0 && abs(vPathPosition.x) > 0.5) {\r\n                discard;\r\n            }\r\n        `,\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\nGeojsonOffsetLayer.layerName = 'GeojsonOffsetLayer'\r\nGeojsonOffsetLayer.defaultProps = {\r\n  getOffset: { type: 'accessor', value: OFFSET_TYPE.RIGHT },\r\n}\r\n\r\n// /** DeckGL **/\r\n// new deck.DeckGL({\r\n//   container: 'container',\r\n//   mapboxApiAccessToken: '',\r\n//   longitude: -122.408,\r\n//   latitude: 37.785,\r\n//   zoom: 16,\r\n//   pitch: 0,\r\n//   layers: [\r\n//     new deck.PathLayer({\r\n//       data:\r\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/website/bart-lines.json',\r\n//       getPath: d => d.path,\r\n//       getColor: [0, 0, 0],\r\n//       getWidth: 50,\r\n//     }),\r\n//     new MyPathLayer({\r\n//       data:\r\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/website/bart-lines.json',\r\n//       getPath: d => d.path,\r\n//       getColor: [255, 0, 0],\r\n//       getOffset: (d, { index }) => index % 3,\r\n//       getWidth: 50,\r\n//       pickable: true,\r\n//       autoHighlight: true,\r\n//     }),\r\n//   ],\r\n// })\r\n","// screenshot helper functions\r\n// found most of this at:\r\n// (1) https://github.com/visgl/deck.gl/issues/4436\r\n// (2) https://stackoverflow.com/questions/32096540/merge-two-datauris-to-create-a-single-image\r\n\r\nimport { DeckGLLayer } from '@flowmap.gl/core'\r\n\r\nexport async function savePNG(layer: DeckGLLayer, backgroundCanvas: HTMLCanvasElement) {\r\n  const deckLayerImage = layer.context.deck.canvas.toDataURL('image/png')\r\n  const backgroundImage = backgroundCanvas?.toDataURL('image/png')\r\n\r\n  const layerData = []\r\n  if (backgroundImage) layerData.push(backgroundImage)\r\n  layerData.push(deckLayerImage)\r\n\r\n  // convert deck+map to image URL, with added watermark\r\n  const mergedImage = await mergeImageURIs({\r\n    width: layer.context.deck.canvas.width,\r\n    height: layer.context.deck.canvas.height,\r\n    imageDataURLs: layerData,\r\n  })\r\n\r\n  var element = document.createElement('a')\r\n  element.setAttribute('href', mergedImage)\r\n  element.setAttribute('download', 'screenshot.png')\r\n  element.style.display = 'none'\r\n\r\n  document.body.appendChild(element)\r\n  element.click()\r\n  document.body.removeChild(element)\r\n}\r\n\r\n// copypasta from\r\n// https://stackoverflow.com/questions/32096540/merge-two-datauris-to-create-a-single-image\r\nfunction mergeImageURIs(props: { width: number; height: number; imageDataURLs: string[] }) {\r\n  return new Promise<any>((resolve, reject) => {\r\n    var canvas = document.createElement('canvas')\r\n    canvas.width = props.width\r\n    canvas.height = props.height\r\n\r\n    Promise.all(props.imageDataURLs.map(dataURL => add2canvas(canvas, dataURL))).then(() => {\r\n      // add watermark\r\n      const ctx = canvas.getContext('2d') as any\r\n      const boxLeft = canvas.width - 152\r\n      const boxTop = canvas.height - 8\r\n      ctx.beginPath()\r\n      ctx.rect(boxLeft - 4, boxTop - 14, 158, 22)\r\n      ctx.fillStyle = '#ffffff44'\r\n      ctx.fill()\r\n      ctx.font = '11px Arial'\r\n      ctx.fillStyle = '#888'\r\n      ctx.fillText('© Mapbox  © OpenStreetMap', boxLeft, boxTop)\r\n\r\n      // return final dataURL with fully-built image\r\n      resolve(canvas.toDataURL('image/png'))\r\n    })\r\n  })\r\n}\r\n\r\nfunction add2canvas(canvas: any, dataURL: string) {\r\n  return new Promise((resolve, reject) => {\r\n    if (!canvas) reject()\r\n    if (!dataURL) reject()\r\n\r\n    var image = new Image()\r\n\r\n    image.onload = function () {\r\n      canvas.getContext('2d').drawImage(this, 0, 0)\r\n      resolve(true)\r\n    }\r\n    image.src = dataURL\r\n  })\r\n}\r\n\r\nexport default { savePNG }\r\n","import React, { useState, useMemo, useEffect, useRef } from 'react'\r\nimport DeckGL from '@deck.gl/react'\r\nimport { DataFilterExtension } from '@deck.gl/extensions'\r\n\r\nimport { StaticMap, MapRef } from 'react-map-gl'\r\nimport { rgb } from 'd3-color'\r\n\r\nimport { DataTable, MAPBOX_TOKEN, REACT_VIEW_HANDLES } from '@/Globals'\r\n\r\nimport globalStore from '@/store'\r\nimport { OFFSET_DIRECTION } from '@/layers/LineOffsetLayer'\r\nimport GeojsonOffsetLayer from '@/layers/GeojsonOffsetLayer'\r\n\r\nimport screenshots from '@/js/screenshots'\r\n\r\ninterface DeckObject {\r\n  index: number\r\n  target: number[]\r\n  data: any\r\n}\r\n\r\nexport default function Component({\r\n  viewId = 0,\r\n  fillColors = '#59a14f' as string | Uint8Array,\r\n  lineColors = '#4e79a7' as string | Uint8Array,\r\n  lineWidths = 0 as number | Float32Array,\r\n  fillHeights = 0 as number | Float32Array,\r\n  calculatedValues = null as null | Float32Array,\r\n  calculatedValueLabel = '',\r\n  normalizedValues = null as null | Float32Array,\r\n  opacity = 1,\r\n  pointRadii = 4 as number | Float32Array,\r\n  screenshot = 0,\r\n  featureDataTable = {} as DataTable,\r\n  featureFilter = new Float32Array(0),\r\n  tooltip = [] as string[],\r\n  cbTooltip = {} as any,\r\n}) {\r\n  const PRECISION = 4\r\n\r\n  // const features = globalStore.state.globalCache[viewId] as any[]\r\n  const [features, setFeatures] = useState([] as any[])\r\n\r\n  const [viewState, setViewState] = useState(globalStore.state.viewState)\r\n  const [screenshotCount, setScreenshot] = useState(screenshot)\r\n\r\n  const _mapRef = useRef<MapRef>() as any\r\n  // release _mapRef on unmount to avoid memory leak\r\n  // TODO: WAIT! Releasing _mapRef breaks screenshot functionality.\r\n  // useEffect(() => {\r\n  //   if (screenshot <= screenshotCount) _mapRef.current = false\r\n  // })\r\n\r\n  // MAP VIEW -------------------------------------------------------------------------\r\n  REACT_VIEW_HANDLES[viewId] = () => {\r\n    setViewState(globalStore.state.viewState)\r\n  }\r\n\r\n  // Feature setter hack:\r\n  // Using the array itself causes an enormous memory leak. I am not sure why\r\n  // Vue/React/Deck.gl are not managing this array correctly. Surely the problem\r\n  // is in our code, not theirs? But I spent days trying to find it.\r\n  // Anyway, making this deep copy of the feature array seems to solve it.\r\n  REACT_VIEW_HANDLES[1000 + viewId] = (features: any[]) => {\r\n    const fullCopy = features.map(feature => {\r\n      const f = {\r\n        type: '' + feature.type,\r\n        geometry: JSON.parse(JSON.stringify(feature.geometry)),\r\n        properties: JSON.parse(JSON.stringify(feature?.properties || {})),\r\n      } as any\r\n      if ('id' in feature) f.id = '' + feature.id\r\n      return f\r\n    })\r\n    setFeatures(fullCopy)\r\n  }\r\n\r\n  // SCREENSHOT -----------------------------------------------------------------------\r\n  let isTakingScreenshot = screenshot > screenshotCount\r\n\r\n  // FILL COLORS ----------------------------------------------------------------------\r\n  let cbFillColor // can be callback OR a plain string in simple mode\r\n  if (typeof fillColors == 'string') {\r\n    // simple color mode\r\n    const color = rgb(fillColors)\r\n    cbFillColor = [color.r, color.g, color.b]\r\n  } else {\r\n    // array of colors\r\n    cbFillColor = (feature: any, o: DeckObject) => {\r\n      return [\r\n        fillColors[o.index * 3 + 0], // r\r\n        fillColors[o.index * 3 + 1], // g\r\n        fillColors[o.index * 3 + 2], // b\r\n        255, // no opacity, for now\r\n      ]\r\n    }\r\n  }\r\n\r\n  // LINE COLORS ----------------------------------------------------------------------\r\n  const isStroked = !!lineColors\r\n\r\n  let cbLineColor // can be callback OR a plain string in simple mode\r\n  if (typeof lineColors == 'string') {\r\n    // simple color mode\r\n    const color = rgb(lineColors)\r\n    cbLineColor = [color.r, color.g, color.b]\r\n    if (!isStroked) cbLineColor.push(0) // totally transparent\r\n  } else {\r\n    // array of colors\r\n    cbLineColor = (_: any, o: DeckObject) => {\r\n      if (features[o.index].properties._hide) return [0, 0, 0, 0]\r\n\r\n      return [\r\n        lineColors[o.index * 3 + 0], // r\r\n        lineColors[o.index * 3 + 1], // g\r\n        lineColors[o.index * 3 + 2], // b\r\n        255, // no opacity, for now\r\n      ]\r\n    }\r\n  }\r\n\r\n  // LINE WIDTHS ----------------------------------------------------------------------\r\n  let cbLineWidth // can be callback OR a plain string in simple mode\r\n  if (typeof lineWidths == 'number') {\r\n    // simple width mode\r\n    cbLineWidth = lineWidths\r\n  } else {\r\n    // array of widths\r\n    cbLineWidth = (_: any, o: DeckObject) => {\r\n      return lineWidths[o.index]\r\n    }\r\n  }\r\n\r\n  // CIRCLE RADIISESS ---------------------------------------------------------------\r\n  let cbPointRadius // can be callback OR a plain string in simple mode\r\n  if (typeof pointRadii == 'number') {\r\n    // simple radius mode\r\n    cbPointRadius = pointRadii\r\n  } else {\r\n    cbPointRadius = (_: any, o: DeckObject) => {\r\n      return pointRadii[o.index]\r\n    }\r\n  }\r\n\r\n  // FILL HEIGHTS -----------------------------------------------------------------\r\n  let cbFillHeight // can be callback OR a plain string in simple mode\r\n  if (typeof fillHeights == 'number') {\r\n    // simple mode\r\n    cbFillHeight = fillHeights\r\n  } else {\r\n    // array function\r\n    cbFillHeight = (_: any, o: DeckObject) => {\r\n      return fillHeights[o.index]\r\n    }\r\n  }\r\n\r\n  function handleViewState(view: any) {\r\n    if (!view.latitude) return\r\n    view.center = [view.longitude, view.latitude]\r\n    setViewState(view)\r\n    globalStore.commit('setMapCamera', view)\r\n  }\r\n\r\n  // CLICK  ---------------------------------------------------------------------\r\n  function handleClick() {\r\n    console.log('click!')\r\n  }\r\n\r\n  // this will only round a number if it is a plain old regular number with\r\n  // a fractional part to the right of the decimal point.\r\n  function truncateFractionalPart({ value, precision }: { value: any; precision: number }) {\r\n    if (typeof value !== 'number') return value\r\n\r\n    let printValue = '' + value\r\n    if (printValue.includes('.') && printValue.indexOf('.') === printValue.lastIndexOf('.')) {\r\n      if (/\\d$/.test(printValue))\r\n        return printValue.substring(0, 1 + PRECISION + printValue.lastIndexOf('.')) // precise(value, precision)\r\n    }\r\n    return value\r\n  }\r\n\r\n  // TOOLTIP ------------------------------------------------------------------\r\n  function getTooltip({ object, index }: { object: any; index: number }) {\r\n    // tooltip will show values for color settings and for width settings.\r\n    // if there is base data, it will also show values and diff vs. base for both color and width.\r\n\r\n    if (!cbTooltip) return null\r\n\r\n    if (object === null || !features[index]?.properties) {\r\n      cbTooltip(null)\r\n      return null\r\n    }\r\n\r\n    const propList = []\r\n\r\n    // normalized value first\r\n    if (normalizedValues) {\r\n      const label = calculatedValueLabel ?? 'Normalized Value'\r\n      let value = truncateFractionalPart({ value: normalizedValues[index], precision: PRECISION })\r\n\r\n      propList.push(\r\n        `<tr><td style=\"text-align: right; padding-right: 0.5rem;\">${label}</td><td><b>${value}</b></td></tr>`\r\n      )\r\n    }\r\n\r\n    // calculated value\r\n    if (calculatedValues) {\r\n      let cLabel = calculatedValueLabel ?? 'Value'\r\n\r\n      const label = normalizedValues ? cLabel.substring(0, cLabel.lastIndexOf('/')) : cLabel\r\n      let value = truncateFractionalPart({ value: calculatedValues[index], precision: PRECISION })\r\n\r\n      if (calculatedValueLabel.startsWith('%')) value = `${value} %`\r\n\r\n      propList.push(\r\n        `<tr><td style=\"text-align: right; padding-right: 0.5rem;\">${label}</td><td><b>${value}</b></td></tr>\r\n         <tr><td>&nbsp;</td></tr>`\r\n      )\r\n    }\r\n\r\n    // --- dataset tooltip lines ---\r\n    let datasetProps = ''\r\n    const featureTips = Object.entries(features[index].properties)\r\n\r\n    for (const [tipKey, tipValue] of featureTips) {\r\n      if (tipValue === null) continue\r\n\r\n      // Truncate fractional digits IF it is a simple number that has a fraction\r\n      let value = truncateFractionalPart({ value: tipValue, precision: 4 })\r\n      datasetProps += `<tr><td style=\"text-align: right; padding-right: 0.5rem;\">${tipKey}</td><td><b>${value}</b></td></tr>`\r\n    }\r\n\r\n    if (datasetProps) propList.push(datasetProps)\r\n\r\n    // --- boundary feature tooltip lines ---\r\n    let columns = Object.keys(featureDataTable)\r\n    if (tooltip && tooltip.length) {\r\n      columns = tooltip.map(tip => {\r\n        return tip.substring(tip.indexOf('.') + 1)\r\n      })\r\n    }\r\n\r\n    let featureProps = ''\r\n    columns.forEach(column => {\r\n      if (featureDataTable[column]) {\r\n        let value = featureDataTable[column].values[index]\r\n        if (value == null) return\r\n        if (typeof value == 'number') value = truncateFractionalPart({ value, precision: 4 })\r\n\r\n        featureProps += `<tr><td style=\"text-align: right; padding-right: 0.5rem;\">${column}</td><td><b>${value}</b></td></tr>`\r\n      }\r\n    })\r\n    if (featureProps) propList.push(featureProps)\r\n\r\n    // nothing to show? no tooltip\r\n    if (!propList.length) {\r\n      cbTooltip(null)\r\n      return\r\n    }\r\n\r\n    let finalHTML = propList.join('')\r\n    const html = `<table>${finalHTML}</table>`\r\n\r\n    cbTooltip(html)\r\n\r\n    return null\r\n  }\r\n\r\n  const layer = new GeojsonOffsetLayer({\r\n    id: 'geoJsonOffsetLayer',\r\n    data: features,\r\n    // function callbacks: --------------\r\n    getLineWidth: cbLineWidth,\r\n    getLineColor: cbLineColor,\r\n    getFillColor: cbFillColor,\r\n    getPointRadius: cbPointRadius,\r\n    getElevation: cbFillHeight,\r\n    // settings: ------------------------\r\n    autoHighlight: true,\r\n    extruded: !!fillHeights,\r\n    highlightColor: [255, 0, 224],\r\n    // lineJointRounded: true,\r\n    lineWidthUnits: 'pixels',\r\n    lineWidthScale: 1,\r\n    lineWidthMinPixels: typeof lineWidths === 'number' ? 0 : 1,\r\n    lineWidthMaxPixels: 50,\r\n    getOffset: OFFSET_DIRECTION.RIGHT,\r\n    opacity: fillHeights ? 1.0 : 0.8, // 3D must be opaque\r\n    pickable: true,\r\n    pointRadiusUnits: 'pixels',\r\n    pointRadiusMinPixels: 2,\r\n    // pointRadiusMaxPixels: 50,\r\n    stroked: isStroked,\r\n    useDevicePixels: isTakingScreenshot,\r\n    fp64: false,\r\n    updateTriggers: {\r\n      getFillColor: fillColors,\r\n      getLineColor: lineColors,\r\n      getLineWidth: lineWidths,\r\n      getPointRadius: pointRadii,\r\n      getElevation: fillHeights,\r\n      getFilterValue: featureFilter,\r\n    },\r\n    transitions: {\r\n      getFillColor: 300,\r\n      getLineColor: 300,\r\n      getLineWidth: 300,\r\n      getPointRadius: 300,\r\n    },\r\n    parameters: {\r\n      depthTest: !!fillHeights,\r\n      fp64: false,\r\n    },\r\n    glOptions: {\r\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\r\n      preserveDrawingBuffer: true,\r\n      fp64: false,\r\n    },\r\n    // filter shapes\r\n    extensions: [new DataFilterExtension({ filterSize: 1 })],\r\n    filterRange: [0, 1], // set filter to -1 to filter element out\r\n    getFilterValue: (_: any, o: DeckObject) => {\r\n      return featureFilter[o.index]\r\n    },\r\n  }) as any\r\n\r\n  const deckInstance = (\r\n    /*\r\n    //@ts-ignore */\r\n    <DeckGL\r\n      layers={[layer]}\r\n      viewState={viewState}\r\n      controller={true}\r\n      pickingRadius={4}\r\n      getTooltip={getTooltip}\r\n      onClick={handleClick}\r\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\r\n      getCursor={({ isDragging, isHovering }: any) =>\r\n        isDragging ? 'grabbing' : isHovering ? 'pointer' : 'grab'\r\n      }\r\n      onAfterRender={async () => {\r\n        if (screenshot > screenshotCount) {\r\n          await screenshots.savePNG(\r\n            deckInstance.props.layers[0],\r\n            _mapRef?.current?.getMap()._canvas\r\n          )\r\n          setScreenshot(screenshot) // update scrnshot count so we don't take 1000 screenshots by mistake :-/\r\n        }\r\n      }}\r\n    >\r\n      {\r\n        /*\r\n        // @ts-ignore */\r\n        <StaticMap mapStyle={globalStore.getters.mapStyle} mapboxApiAccessToken={MAPBOX_TOKEN} />\r\n      }\r\n    </DeckGL>\r\n  )\r\n\r\n  return deckInstance\r\n}\r\n","<template lang=\"pug\">\r\n.mymaplibre-map(:id=\"containerId\")\r\n  .mymap(:id=\"mapId\")\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport maplibregl, { MapMouseEvent, PositionOptions } from 'maplibre-gl'\r\n\r\nimport globalStore from '@/store'\r\nimport { ColorScheme } from '@/Globals'\r\n\r\nconst Component = defineComponent({\r\n  name: 'BackgroundMapOnTop',\r\n  components: {},\r\n  data: () => {\r\n    return {\r\n      containerId: `c${Math.floor(1e12 * Math.random())}`,\r\n      globalState: globalStore.state,\r\n      isDarkMode: false,\r\n      isMapMoving: false,\r\n      mapId: `map-${Math.floor(1e12 * Math.random())}`,\r\n      mymap: {} as maplibregl.Map,\r\n      resizer: null as ResizeObserver | null,\r\n    }\r\n  },\r\n  computed: {},\r\n  methods: {\r\n    setupResizer() {\r\n      this.resizer = new ResizeObserver(() => {\r\n        this.mymap.resize()\r\n      })\r\n\r\n      const viz = document.getElementById(this.containerId) as HTMLElement\r\n      this.resizer.observe(viz)\r\n    },\r\n    handleMapMotion() {\r\n      const mapCamera = {\r\n        longitude: this.mymap.getCenter().lng,\r\n        latitude: this.mymap.getCenter().lat,\r\n        bearing: this.mymap.getBearing(),\r\n        zoom: this.mymap.getZoom(),\r\n        pitch: this.mymap.getPitch(),\r\n      }\r\n\r\n      this.$store.commit('setMapCamera', mapCamera)\r\n      if (!this.isMapMoving) this.isMapMoving = true\r\n    },\r\n\r\n    async setupMap() {\r\n      const styles = globalStore.state.mapStyles\r\n      try {\r\n        this.mymap = new maplibregl.Map({\r\n          container: this.mapId,\r\n          style: this.isDarkMode ? styles.transparentDark : styles.transparentLight,\r\n          logoPosition: 'top-left',\r\n        })\r\n\r\n        // make sure it starts up aligned with main map\r\n        const view = { ...this.globalState.viewState } as any\r\n        this.mymap.jumpTo(view)\r\n      } catch (e) {\r\n        console.error('HUH?' + e)\r\n        return\r\n      }\r\n\r\n      // Start doing stuff AFTER the MapLibre library has fully initialized\r\n      this.mymap.on('load', this.mapIsReady)\r\n      this.mymap.on('move', this.handleMapMotion)\r\n\r\n      // We are always in thumbnail mode oo-/\r\n      // if (this.thumbnail) {\r\n      if (true) {\r\n        let baubles = document.getElementsByClassName(\r\n          'mapboxgl-ctrl mapboxgl-ctrl-attrib mapboxgl-compact'\r\n        )\r\n        for (const elem of baubles) elem.setAttribute('style', 'display: none')\r\n\r\n        baubles = document.getElementsByClassName('mapboxgl-ctrl mapboxgl-ctrl-group')\r\n        for (const elem of baubles) elem.setAttribute('style', 'display: none')\r\n\r\n        baubles = document.getElementsByClassName('mapboxgl-ctrl-logo')\r\n        for (const elem of baubles) elem.setAttribute('style', 'display: none')\r\n      } else {\r\n        let baubles = document.getElementsByClassName('mapboxgl-ctrl-logo')\r\n        for (const elem of baubles) elem.setAttribute('style', 'margin-bottom: 3rem;')\r\n      }\r\n    },\r\n\r\n    async mapIsReady() {\r\n      this.setupResizer()\r\n    },\r\n\r\n    viewMoved(value: any) {\r\n      if (!this.mymap || this.isMapMoving) {\r\n        this.isMapMoving = false\r\n        return\r\n      }\r\n\r\n      const { bearing, longitude, latitude, zoom, pitch } = value\r\n\r\n      // sometimes closing a view returns a null map, ignore it!\r\n      if (!zoom) return\r\n\r\n      this.mymap.off('move', this.handleMapMotion)\r\n\r\n      this.mymap.jumpTo({\r\n        bearing,\r\n        zoom,\r\n        center: [longitude, latitude],\r\n        pitch,\r\n      })\r\n\r\n      this.mymap.on('move', this.handleMapMotion)\r\n    },\r\n  },\r\n  watch: {\r\n    '$store.state.viewState'(value: any) {\r\n      this.viewMoved(value)\r\n    },\r\n\r\n    '$store.state.colorScheme'() {\r\n      this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode\r\n      if (!this.mymap) return\r\n\r\n      const styles = globalStore.state.mapStyles\r\n      this.mymap.setStyle(this.isDarkMode ? styles.transparentDark : styles.transparentLight)\r\n\r\n      this.mymap.on('style.load', () => {})\r\n    },\r\n\r\n    '$store.state.resizeEvents'() {\r\n      if (this.mymap) this.mymap.resize()\r\n    },\r\n  },\r\n  async mounted() {\r\n    this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode\r\n    this.setupMap()\r\n  },\r\n})\r\nexport default Component\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.mymaplibre-map {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n.mymap {\r\n  height: 100%;\r\n}\r\n</style>\r\n","\r\n.mymaplibre-map(:id=\"containerId\")\r\n  .mymap(:id=\"mapId\")\r\n","<template lang=\"pug\">\r\n.join-picker\r\n  .picker-panel\r\n    p.header: b Select ID Column\r\n    p.subheader Which property contains the unique ID for each feature?\r\n    .split-panel\r\n      .column\r\n          p: b {{ data1.title }}\r\n          .options-box\r\n            p(v-for=\"(row,i) in columns\" :key=\"'@'+i\"\r\n              :class=\"{'selected': i===selected1}\"\r\n              @click=\"selected1=i\"\r\n            ) {{ row }}\r\n\r\n    .buttons\r\n      .button-holder\r\n        button.button(@click=\"clickedCancel\") Cancel\r\n        button.button.is-primary(@click=\"clickedJoin\") Select\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {},\r\n    de: {},\r\n  },\r\n}\r\n\r\ninterface DataSet {\r\n  title: string\r\n  columns: string[]\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\n// Reasonable guesses as to the ID column in the shapefile\r\nconst ID_GUESSES = ['id', 'ID', 'TAZ', 'AB']\r\n\r\nexport default defineComponent({\r\n  name: 'ModalJoinColumnPicker',\r\n  i18n,\r\n  props: {\r\n    data1: { type: Object as PropType<DataSet>, required: true },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      selected1: 0,\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    columns(): string[] {\r\n      return [...this.data1.columns].sort()\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    clickedJoin() {\r\n      this.$emit('join', this.columns[this.selected1])\r\n    },\r\n\r\n    clickedCancel() {\r\n      this.$emit('join', '')\r\n    },\r\n  },\r\n  mounted() {\r\n    // pick a plausible default for the ID column\r\n    for (const guess of ID_GUESSES) {\r\n      const found = this.columns.indexOf(guess)\r\n      if (found > -1) {\r\n        this.selected1 = found\r\n        break\r\n      }\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.join-picker {\r\n  background-color: #000022aa;\r\n  z-index: 10000;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  user-select: none;\r\n  color: #333;\r\n}\r\n\r\n.picker-panel {\r\n  position: relative;\r\n  top: 25%;\r\n  background-color: #dcdce9;\r\n  max-width: 30rem;\r\n  margin: 0 auto;\r\n  box-shadow: 0 2px 24px 5px #00000066;\r\n  border-radius: 4px;\r\n}\r\n\r\n.split-panel {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.column {\r\n  padding: 0 0;\r\n  margin: 0.5rem 0.75rem;\r\n}\r\n\r\n.options-box {\r\n  border: 1px solid #bbb;\r\n  background-color: white;\r\n  max-height: 20rem;\r\n  overflow-y: auto;\r\n}\r\n\r\n.options-box p {\r\n  padding: 0 0.25rem;\r\n}\r\n\r\n.linky {\r\n  margin-top: 3rem;\r\n}\r\n\r\n.header {\r\n  background-color: white;\r\n  padding: 0.25rem 0.75rem;\r\n  border-radius: 4px;\r\n  font-size: 1.2rem;\r\n}\r\n\r\np.selected {\r\n  background-color: #e8ee67;\r\n}\r\n\r\n.subheader {\r\n  padding: 0.25rem 0.75rem;\r\n}\r\n\r\n.button-holder {\r\n  margin: 0.25rem 0.75rem 0.25rem auto;\r\n}\r\n</style>\r\n","\r\n.join-picker\r\n  .picker-panel\r\n    p.header: b Select ID Column\r\n    p.subheader Which property contains the unique ID for each feature?\r\n    .split-panel\r\n      .column\r\n          p: b {{ data1.title }}\r\n          .options-box\r\n            p(v-for=\"(row,i) in columns\" :key=\"'@'+i\"\r\n              :class=\"{'selected': i===selected1}\"\r\n              @click=\"selected1=i\"\r\n            ) {{ row }}\r\n\r\n    .buttons\r\n      .button-holder\r\n        button.button(@click=\"clickedCancel\") Cancel\r\n        button.button.is-primary(@click=\"clickedJoin\") Select\r\n\r\n","<template lang=\"pug\">\r\n.map-layout(:class=\"{'hide-thumbnail': !thumbnail}\"\r\n            :style='{\"background\": urlThumbnail}'\r\n            oncontextmenu=\"return false\")\r\n\r\n  .status-bar(v-show=\"statusText\") {{ statusText }}\r\n\r\n  modal-id-column-picker(v-if=\"showJoiner\"\r\n    v-bind=\"datasetJoinSelector\"\r\n    @join=\"cbDatasetJoined\"\r\n  )\r\n\r\n  .area-map(v-if=\"!thumbnail\" :id=\"`container-${layerId}`\")\r\n    //- drawing-tool.draw-tool(v-if=\"isLoaded && !thumbnail\")\r\n\r\n    geojson-layer(v-if=\"!needsInitialMapExtent\"\r\n      :viewId=\"layerId\"\r\n      :fillColors=\"dataFillColors\"\r\n      :featureDataTable=\"boundaryDataTable\"\r\n      :lineColors=\"dataLineColors\"\r\n      :lineWidths=\"dataLineWidths\"\r\n      :fillHeights=\"dataFillHeights\"\r\n      :screenshot=\"triggerScreenshot\"\r\n      :calculatedValues=\"dataCalculatedValues\"\r\n      :calculatedValueLabel=\"dataCalculatedValueLabel\"\r\n      :normalizedValues=\"dataNormalizedValues\"\r\n      :featureFilter=\"boundaryFilters\"\r\n      :opacity=\"sliderOpacity\"\r\n      :pointRadii=\"dataPointRadii\"\r\n      :tooltip=\"vizDetails.tooltip\"\r\n      :cbTooltip=\"cbTooltip\"\r\n    )\r\n    //- :features=\"useCircles ? centroids: boundaries\"\r\n\r\n    //- background-map-on-top(v-if=\"isLoaded\")\r\n\r\n    viz-configurator(v-if=\"isLoaded\"\r\n      :embedded=\"isEmbedded\"\r\n      :sections=\"configuratorSections\"\r\n      :fileSystem=\"fileSystem\"\r\n      :subfolder=\"subfolder\"\r\n      :yamlConfig=\"generatedExportFilename\"\r\n      :vizDetails=\"vizDetails\"\r\n      :datasets=\"datasets\"\r\n      :legendStore=\"legendStore\"\r\n      :filterDefinitions=\"currentUIFilterDefinitions\"\r\n      @update=\"changeConfiguration\"\r\n      @screenshot=\"takeScreenshot\"\r\n    )\r\n\r\n    .details-panel(v-if=\"tooltipHtml && !statusText\" v-html=\"tooltipHtml\")\r\n\r\n  zoom-buttons(v-if=\"isLoaded && !thumbnail\")\r\n\r\n  .config-bar(v-if=\"!thumbnail && !isEmbedded && isLoaded && Object.keys(filters).length\"\r\n    :class=\"{'is-standalone': !configFromDashboard, 'is-disabled': !isLoaded}\")\r\n\r\n    //- Filter pickers\r\n    .filter(v-for=\"filter in Object.keys(filters)\")\r\n      p {{ filter }}\r\n      b-dropdown(\r\n        v-model=\"filters[filter].active\"\r\n        :scrollable=\"filters[filter].active.length > 10\"\r\n        max-height=\"250\"\r\n        multiple\r\n        @change=\"handleUserSelectedNewFilters(filter)\"\r\n        aria-role=\"list\" :mobile-modal=\"false\" :close-on-click=\"true\"\r\n      )\r\n        template(#trigger=\"{ active }\")\r\n          b-button.is-primary(\r\n            :type=\"filters[filter].active.length ? '' : 'is-outlined'\"\r\n            :label=\"filterLabel(filter)\"\r\n          )\r\n\r\n        b-dropdown-item(v-for=\"option in filters[filter].options\"\r\n          :key=\"option\" :value=\"option\" aria-role=\"listitem\") {{ option }}\r\n\r\n    //- .map-type-buttons(v-if=\"isAreaMode\")\r\n    //-   img.img-button(@click=\"showCircles(false)\" src=\"../../assets/btn-polygons.jpg\" title=\"Shapes\")\r\n    //-   img.img-button(@click=\"showCircles(true)\" src=\"../../assets/btn-circles.jpg\" title=\"Circles\")\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\nimport { group, zip, sum } from 'd3-array'\r\n\r\nimport readBlob from 'read-blob'\r\nimport reproject from 'reproject'\r\nimport Sanitize from 'sanitize-filename'\r\nimport * as shapefile from 'shapefile'\r\nimport * as turf from '@turf/turf'\r\nimport YAML from 'yaml'\r\n\r\nimport globalStore from '@/store'\r\nimport {\r\n  DataTable,\r\n  DataTableColumn,\r\n  DataType,\r\n  FileSystemConfig,\r\n  VisualizationPlugin,\r\n  DEFAULT_PROJECTION,\r\n  REACT_VIEW_HANDLES,\r\n  Status,\r\n} from '@/Globals'\r\n\r\nimport GeojsonLayer from './GeojsonLayer'\r\nimport BackgroundMapOnTop from '@/components/BackgroundMapOnTop.vue'\r\nimport ColorWidthSymbologizer from '@/js/ColorsAndWidths'\r\nimport VizConfigurator from '@/components/viz-configurator/VizConfigurator.vue'\r\nimport ModalIdColumnPicker from './ModalIdColumnPicker.vue'\r\nimport ZoomButtons from '@/components/ZoomButtons.vue'\r\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\r\n\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport DashboardDataManager, { FilterDefinition, checkFilterValue } from '@/js/DashboardDataManager'\r\nimport { arrayBufferToBase64 } from '@/js/util'\r\nimport { CircleRadiusDefinition } from '@/components/viz-configurator/CircleRadius.vue'\r\nimport { FillColorDefinition } from '@/components/viz-configurator/FillColors.vue'\r\nimport { LineColorDefinition } from '@/components/viz-configurator/LineColors.vue'\r\nimport { LineWidthDefinition } from '@/components/viz-configurator/LineWidths.vue'\r\nimport { FillHeightDefinition } from '@/components/viz-configurator/FillHeight.vue'\r\nimport { DatasetDefinition } from '@/components/viz-configurator/AddDatasets.vue'\r\nimport Coords from '@/js/Coords'\r\nimport LegendStore from '@/js/LegendStore'\r\n\r\ninterface FilterDetails {\r\n  column: string\r\n  label?: string\r\n  options: any[]\r\n  active: any[]\r\n  dataset?: any\r\n}\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'ShapeFilePlugin',\r\n  components: {\r\n    BackgroundMapOnTop,\r\n    GeojsonLayer,\r\n    ModalIdColumnPicker,\r\n    VizConfigurator,\r\n    ZoomButtons,\r\n    DrawingTool,\r\n  },\r\n\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    datamanager: { type: Object as PropType<DashboardDataManager> },\r\n    configFromDashboard: { type: Object as any },\r\n    yamlConfig: String,\r\n    thumbnail: Boolean,\r\n    // fsConfig: { type: Object as PropType<FileSystemConfig> },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      boundaries: [] as any[],\r\n      centroids: [] as any[],\r\n      cbDatasetJoined: undefined as any,\r\n      legendStore: new LegendStore(),\r\n      chosenNewFilterColumn: '',\r\n      boundaryDataTable: {} as DataTable,\r\n      dataFillColors: '#888' as string | Uint8Array,\r\n      dataLineColors: '' as string | Uint8Array,\r\n      dataLineWidths: 1 as number | Float32Array,\r\n      dataPointRadii: 5 as number | Float32Array,\r\n      dataFillHeights: 0 as number | Float32Array,\r\n      dataCalculatedValues: null as Float32Array | null,\r\n      dataNormalizedValues: null as Float32Array | null,\r\n      constantLineWidth: null as null | number,\r\n      dataCalculatedValueLabel: '',\r\n\r\n      globalStore,\r\n      globalState: globalStore.state,\r\n      layerId: Math.floor(1e12 * Math.random()),\r\n\r\n      activeColumn: '',\r\n      useCircles: false,\r\n      sliderOpacity: 100,\r\n\r\n      maxValue: 1000,\r\n      expColors: false,\r\n      isLoaded: false,\r\n      isAreaMode: true,\r\n      statusText: 'Loading...',\r\n\r\n      // Filters. Key is column id; value array is empty for \"all\" or a list of \"or\" values\r\n      filters: {} as { [column: string]: FilterDetails },\r\n\r\n      needsInitialMapExtent: true,\r\n      datasetJoinColumn: '',\r\n      featureJoinColumn: '',\r\n      triggerScreenshot: 0,\r\n\r\n      datasetKeyToFilename: {} as any,\r\n\r\n      datasetJoinSelector: {} as { [id: string]: { title: string; columns: string[] } },\r\n      showJoiner: false,\r\n\r\n      // DataManager might be passed in from the dashboard; or we might be\r\n      // in single-view mode, in which case we need to create one for ourselves\r\n      myDataManager: this.datamanager || new DashboardDataManager(this.root, this.subfolder),\r\n\r\n      config: {} as any,\r\n      // these are the settings defined in the UI\r\n      currentUIFilterDefinitions: {} as any,\r\n      currentUIFillColorDefinitions: {} as any,\r\n      currentUILineColorDefinitions: {} as any,\r\n\r\n      // these are the processed filter defs passed to the data manager\r\n      filterDefinitions: [] as FilterDefinition[],\r\n\r\n      isEmbedded: false,\r\n      resizer: null as null | ResizeObserver,\r\n      boundaryFilters: new Float32Array(0),\r\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\r\n      boundaryJoinLookups: {} as { [column: string]: { [lookup: string | number]: number } },\r\n      datasetValuesColumn: '',\r\n\r\n      tooltipHtml: '',\r\n\r\n      vizDetails: {\r\n        title: '',\r\n        description: '',\r\n        datasets: {} as { [id: string]: { file: string; join: string } },\r\n        useSlider: false,\r\n        showDifferences: false,\r\n        shpFile: '',\r\n        dbfFile: '',\r\n        network: '',\r\n        geojsonFile: '',\r\n        projection: '',\r\n        widthFactor: null as any,\r\n        thumbnail: '',\r\n        sum: false,\r\n        filters: [] as { [filterId: string]: any }[],\r\n        shapes: '' as string | { file: string; join: string },\r\n        zoom: null as number | null,\r\n        center: null as any[] | null,\r\n        pitch: null as number | null,\r\n        bearing: null as number | null,\r\n        display: {\r\n          fill: {} as any,\r\n          fillHeight: {} as any,\r\n          color: {} as any,\r\n          width: {} as any,\r\n          lineColor: {} as any,\r\n          lineWidth: {} as any,\r\n          radius: {} as any,\r\n        },\r\n        tooltip: [] as string[],\r\n      },\r\n\r\n      datasets: {} as { [id: string]: DataTable },\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    configuratorSections(): string[] {\r\n      if (this.isAreaMode)\r\n        return ['fill-color', 'fill-height', 'line-color', 'line-width', 'circle-radius', 'filters']\r\n      else return ['line-color', 'line-width', 'filters']\r\n    },\r\n\r\n    datasetChoices(): string[] {\r\n      return Object.keys(this.datasets)\r\n    },\r\n\r\n    generatedExportFilename(): string {\r\n      let filename = Sanitize(this.yamlConfig ?? '')\r\n      filename = filename.replaceAll(' ', '-')\r\n\r\n      if (!filename.startsWith('viz-map-')) filename = 'viz-map-' + filename\r\n      if (!filename.endsWith('.yml') && !filename.endsWith('.yaml')) filename = filename + '.yaml'\r\n\r\n      return filename\r\n    },\r\n\r\n    urlThumbnail(): string {\r\n      return this.thumbnailUrl\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    'globalState.viewState'() {\r\n      if (!REACT_VIEW_HANDLES[this.layerId]) return\r\n      REACT_VIEW_HANDLES[this.layerId]()\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    // incrementing screenshot count triggers the screenshot.\r\n    takeScreenshot() {\r\n      this.triggerScreenshot++\r\n    },\r\n\r\n    setEmbeddedMode() {\r\n      if ('embed' in this.$route.query) {\r\n        console.log('EMBEDDED MODE')\r\n        this.isEmbedded = true\r\n        this.$store.commit('setShowLeftBar', false)\r\n        this.$store.commit('setFullWidth', true)\r\n      }\r\n    },\r\n\r\n    setupLogoMover() {\r\n      this.resizer = new ResizeObserver(this.moveLogo)\r\n      const deckmap = document.getElementById(`container-${this.layerId}`) as HTMLElement\r\n      this.resizer.observe(deckmap)\r\n    },\r\n\r\n    moveLogo() {\r\n      const deckmap = document.getElementById(`container-${this.layerId}`) as HTMLElement\r\n      const logo = deckmap?.querySelector('.mapboxgl-ctrl-bottom-left') as HTMLElement\r\n      if (logo) {\r\n        const right = deckmap.clientWidth > 640 ? '280px' : '36px'\r\n        logo.style.right = right\r\n      }\r\n    },\r\n\r\n    columnsInDataset(datasetId: string) {\r\n      const data = this.datasets[datasetId]\r\n      return Object.keys(data)\r\n    },\r\n\r\n    filterShapesNow() {\r\n      // shape filters only\r\n      const shapeFilters = this.filterDefinitions.filter(f => f.dataset === 'shapes')\r\n\r\n      this.boundaryFilters = new Float32Array(this.boundaries.length)\r\n\r\n      // show all elements if there are no shapefilters defined\r\n      if (!shapeFilters.length) return\r\n\r\n      const isLTGT = /^(<|>)/ // starts with < or >\r\n\r\n      for (const filter of shapeFilters) {\r\n        // console.log('filter >>>:', filter)\r\n        let spec = filter.value\r\n        let conditional = ''\r\n\r\n        // check categorical\r\n        if (spec == '@categorical') {\r\n          conditional = '@categorical'\r\n          spec = ''\r\n        }\r\n        // check LT/GT\r\n        else if (isLTGT.test(spec)) {\r\n          if (spec.startsWith('<=')) {\r\n            conditional = '<='\r\n            spec = parseFloat(spec.substring(2).trim())\r\n          } else if (spec.startsWith('>=')) {\r\n            conditional = '>='\r\n            spec = parseFloat(spec.substring(2).trim())\r\n          } else if (spec.startsWith('<')) {\r\n            conditional = '<'\r\n            spec = parseFloat(spec.substring(1).trim())\r\n          } else if (spec.startsWith('>')) {\r\n            conditional = '>'\r\n            spec = parseFloat(spec.substring(1).trim())\r\n          }\r\n        }\r\n        // handle case where we are testing equal/inequal and its a \"numeric\" string\r\n        else {\r\n          if (typeof spec === 'string') {\r\n            // handle a comma-separated list\r\n            if (spec.indexOf(',') > -1) {\r\n              spec = spec\r\n                .split(',')\r\n                .map(v => v.trim())\r\n                .map(v => (Number.isNaN(parseFloat(v)) ? v : parseFloat(v)))\r\n            } else {\r\n              const numericString = parseFloat(spec)\r\n              if (!Number.isNaN(numericString)) spec = numericString\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!Array.isArray(spec)) spec = [spec]\r\n\r\n        const fullSpecification = { conditional, invert: filter.invert || false, values: spec }\r\n        // console.log('HEREWEGO: ', fullSpecification)\r\n        const dataColumnValues = this.boundaryDataTable[filter.column].values\r\n\r\n        // update every row\r\n        for (let i = 0; i < this.boundaries.length; i++) {\r\n          if (!checkFilterValue(fullSpecification, dataColumnValues[i])) {\r\n            this.boundaryFilters[i] = -1\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    cbTooltip(html: string) {\r\n      this.tooltipHtml = html\r\n    },\r\n\r\n    filterShapesNowOriginal() {\r\n      // shape filters only\r\n      const shapeFilters = this.filterDefinitions.filter(f => f.dataset === 'shapes')\r\n\r\n      this.boundaryFilters = new Float32Array(this.boundaries.length)\r\n\r\n      // show all elements if there are no shapefilters defined\r\n      if (!shapeFilters.length) return\r\n\r\n      // console.log({ shapeFilters, length: this.boundaries.length })\r\n\r\n      // loop on all boundaries and centroids\r\n      for (let i = 0; i < this.boundaries.length; i++) {\r\n        for (const filter of shapeFilters) {\r\n          const hideElement = !this.checkIsFiltered(i, filter)\r\n          if (hideElement) this.boundaryFilters[i] = -1\r\n        }\r\n      }\r\n    },\r\n\r\n    checkIsFiltered(i: number, filter: FilterDefinition) {\r\n      const dataset =\r\n        filter.dataset == 'shapes' ? this.boundaryDataTable : this.datasets[filter.dataset]\r\n      const actualValue = dataset[filter.column].values[i]\r\n\r\n      let includeElement = false\r\n\r\n      let filterValue = filter.value\r\n      if (typeof filterValue == 'string' && filterValue.indexOf(',') > -1) {\r\n        filterValue = filterValue\r\n          .split(',')\r\n          .map(v => v.trim())\r\n          .map(v => (isNaN(parseFloat(v)) ? v : parseFloat(v)))\r\n      }\r\n\r\n      if (Array.isArray(filterValue)) {\r\n        // 1. filter is an array of categories\r\n        includeElement = filterValue.indexOf(actualValue) > -1\r\n      } else {\r\n        // 2. filter is a string: exact value or CSV\r\n        includeElement = filterValue == actualValue\r\n      }\r\n\r\n      // Invert if inverted\r\n      if (filter.invert) includeElement = !includeElement\r\n\r\n      return includeElement\r\n    },\r\n\r\n    parseFilterDefinitions(filterDefs: any) {\r\n      // no filters? go away\r\n      if (!filterDefs) return []\r\n\r\n      const filters = [] as FilterDefinition[]\r\n\r\n      // User may have specified an array or an object:\r\n      let filterSpecs: any[]\r\n      if (Array.isArray(filterDefs)) {\r\n        filterSpecs = filterDefs.map(f => Object.entries(f)[0])\r\n      } else {\r\n        filterSpecs = Object.entries(filterDefs)\r\n      }\r\n\r\n      for (const filter of filterSpecs) {\r\n        const [id, value] = filter\r\n        const [dataset, column] = id.split('.')\r\n        const filterDefinition: FilterDefinition = {\r\n          dataset,\r\n          value,\r\n          column: column.endsWith('!') ? column.substring(0, column.length - 1) : column,\r\n          invert: column.endsWith('!'),\r\n        }\r\n        filters.push(filterDefinition)\r\n\r\n        // // categorical filters may already have UI settings that need merging\r\n        // if (column in this.filters) {\r\n        //   filterDefinition.....\r\n        // }\r\n      }\r\n\r\n      return filters\r\n    },\r\n\r\n    honorQueryParameters() {\r\n      const query = this.$route.query\r\n      if (query.show == 'dots') this.useCircles = true\r\n\r\n      // this.setupQueryFilters()\r\n    },\r\n\r\n    // perhaps we have some active filters in the URL query\r\n    setupQueryFilters() {\r\n      const datasetKeys = Object.keys(this.datasets)\r\n      // TODO - make this multi-dataset aware  // 2 means shapes + dataset #1.\r\n      if (datasetKeys.length !== 2) return\r\n\r\n      const firstDatasetKey = datasetKeys[1]\r\n      const firstDataset = this.datasets[firstDatasetKey]\r\n\r\n      const columnNames = Object.keys(firstDataset)\r\n\r\n      const queryFilters = Object.keys(this.$route.query).filter(f => columnNames.indexOf(f) > -1)\r\n\r\n      for (const column of queryFilters) {\r\n        if (!this.filters[column]) {\r\n          console.log('CREATING category filter:', column)\r\n          this.handleUserCreatedNewFilter(`${firstDatasetKey}:${column}`)\r\n        }\r\n\r\n        const text = '' + this.$route.query[column]\r\n        if (text) this.filters[column].active = text.split(',')\r\n\r\n        this.myDataManager.setFilter({\r\n          dataset: this.datasetKeyToFilename[firstDatasetKey],\r\n          column,\r\n          value: this.filters[column].active,\r\n        })\r\n        this.activateFiltersForDataset(firstDatasetKey)\r\n      }\r\n    },\r\n\r\n    convertCommasToArray(thing: any): any[] {\r\n      if (thing === undefined) return []\r\n      if (Array.isArray(thing)) return thing\r\n\r\n      if (thing.indexOf(',') > -1) {\r\n        thing = thing.split(',').map((f: any) => f.trim())\r\n      } else {\r\n        thing = [thing.trim()]\r\n      }\r\n      return thing\r\n    },\r\n\r\n    async getVizDetails() {\r\n      const emptyState = {\r\n        datasets: {} as any,\r\n        display: { fill: {} as any },\r\n      }\r\n\r\n      // are we in a dashboard?\r\n      if (this.configFromDashboard) {\r\n        this.config = JSON.parse(JSON.stringify(this.configFromDashboard))\r\n        this.vizDetails = Object.assign({}, emptyState, this.configFromDashboard)\r\n      } else {\r\n        // was a YAML file was passed in?\r\n        const filename = (this.yamlConfig ?? '').toLocaleLowerCase()\r\n\r\n        if (filename?.endsWith('yaml') || filename?.endsWith('yml')) {\r\n          const ycfg = await this.loadYamlConfig()\r\n          this.config = ycfg\r\n          this.vizDetails = Object.assign({}, emptyState, ycfg)\r\n        }\r\n\r\n        // OR is this a bare geojson/shapefile file? - build vizDetails manually\r\n        if (/(\\.geojson)(|\\.gz)$/.test(filename) || /\\.shp$/.test(filename)) {\r\n          const title = `${filename.endsWith('shp') ? 'Shapefile' : 'GeoJSON'}: ${this.yamlConfig}`\r\n\r\n          this.vizDetails = Object.assign({}, emptyState, this.vizDetails, {\r\n            title,\r\n            description: this.subfolder,\r\n            shapes: this.yamlConfig,\r\n          })\r\n\r\n          this.config = JSON.parse(JSON.stringify(this.vizDetails))\r\n        }\r\n      }\r\n\r\n      const t = this.vizDetails.title || 'Map'\r\n      this.$emit('title', t)\r\n    },\r\n\r\n    // figure out old-style joins\r\n    buildOldJoinLookups() {\r\n      const oldJoinFieldPerDataset = {} as any\r\n\r\n      for (const dataset of Object.keys(this.vizDetails.datasets || [])) {\r\n        const join = this.vizDetails.datasets[dataset].join\r\n        if (!join) continue\r\n\r\n        const colon = join.indexOf(':')\r\n        oldJoinFieldPerDataset[dataset] = join.substring(colon + 1)\r\n        if (typeof this.vizDetails.shapes == 'string') {\r\n          const shapeJoinField = colon > -1 ? join.substring(0, colon) : join\r\n          this.vizDetails.shapes = { file: this.vizDetails.shapes, join: shapeJoinField }\r\n        }\r\n      }\r\n\r\n      // apply old-style joins to elements\r\n      for (const section of Object.keys(this.vizDetails.display || [])) {\r\n        const display = this.vizDetails.display as any\r\n        const details = display[section]\r\n        if ((details.dataset || details.diff) && !details.join) {\r\n          details.join = oldJoinFieldPerDataset[details.dataset]\r\n        }\r\n      }\r\n    },\r\n\r\n    async buildThumbnail() {\r\n      if (this.thumbnail && this.vizDetails.thumbnail) {\r\n        try {\r\n          const blob = await this.fileApi.getFileBlob(\r\n            this.subfolder + '/' + this.vizDetails.thumbnail\r\n          )\r\n          const buffer = await readBlob.arraybuffer(blob)\r\n          const base64 = arrayBufferToBase64(buffer)\r\n          if (base64)\r\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n      }\r\n    },\r\n\r\n    getFileSystem(name: string) {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === name\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    async loadYamlConfig() {\r\n      const config = this.yamlConfig ?? ''\r\n      const filename = config.indexOf('/') > -1 ? config : this.subfolder + '/' + config\r\n\r\n      // 1. First try loading the file directly\r\n      try {\r\n        const text = await this.fileApi.getFileText(filename)\r\n        return YAML.parse(text)\r\n      } catch (err) {\r\n        const message = '' + err\r\n        if (message.startsWith('YAMLSemantic')) {\r\n          this.$store.commit('error', `${filename}: ${message}`)\r\n        }\r\n        console.log(`${filename} not found, trying config folders`)\r\n      }\r\n\r\n      // 2. Try loading from a config folder instead\r\n      const { vizes } = await this.fileApi.findAllYamlConfigs(this.subfolder)\r\n      if (vizes[config]) {\r\n        try {\r\n          const text = await this.fileApi.getFileText(vizes[config])\r\n          return YAML.parse(text)\r\n        } catch (err) {\r\n          console.error(`Also failed to load ${vizes[config]}`)\r\n        }\r\n      }\r\n      this.$store.commit('error', 'Could not load YAML: ' + filename)\r\n    },\r\n\r\n    /**\r\n     * changeConfiguration: is the main entry point for changing the viz model.\r\n     * anything that wants to change colors, widths, data, anthing like that\r\n     * should all pass through this function so the underlying data model\r\n     * is modified properly.\r\n     */\r\n    changeConfiguration(props: {\r\n      fill?: FillColorDefinition\r\n      dataset?: DatasetDefinition\r\n      lineColor?: LineColorDefinition\r\n      lineWidth?: LineWidthDefinition\r\n      radius?: CircleRadiusDefinition\r\n      fillHeight?: FillHeightDefinition\r\n      filters?: FilterDefinition\r\n    }) {\r\n      console.log('PROPS', props)\r\n\r\n      try {\r\n        if (props['fill']) {\r\n          this.vizDetails.display.fill = props.fill\r\n          this.handleNewFillColor(props.fill)\r\n        }\r\n\r\n        if (props['fillHeight']) {\r\n          this.vizDetails.display.fillHeight = props.fillHeight\r\n          this.handleNewFillHeight(props.fillHeight)\r\n        }\r\n\r\n        if (props['lineColor']) {\r\n          this.vizDetails.display.lineColor = props.lineColor\r\n          this.handleNewLineColor(props.lineColor)\r\n        }\r\n\r\n        if (props['lineWidth']) {\r\n          this.vizDetails.display.lineWidth = props.lineWidth\r\n          this.handleNewLineWidth(props.lineWidth)\r\n          // redo colors after widths to ensure categorical widths are set properly\r\n          if (this.currentUILineColorDefinitions)\r\n            this.handleNewLineColor(this.currentUILineColorDefinitions)\r\n        }\r\n\r\n        if (props['radius']) {\r\n          this.vizDetails.display.radius = props.radius\r\n          this.handleNewRadius(props.radius)\r\n        }\r\n\r\n        if (props['dataset']) {\r\n          // vizdetails just had the string name, whereas props.dataset contains\r\n          // a fully-build DatasetDefinition, so let's just handle that\r\n          this.handleNewDataset(props.dataset)\r\n        }\r\n\r\n        if (props['filters']) {\r\n          this.handleNewFilters(props.filters)\r\n        }\r\n\r\n        // console.log('DONE updating')\r\n      } catch (e) {\r\n        this.$store.commit('error', '' + e)\r\n      }\r\n    },\r\n\r\n    async handleNewDataset(props: DatasetDefinition) {\r\n      const { key, dataTable, filename } = props\r\n      const datasetId = key\r\n      const datasetFilename = filename || datasetId\r\n\r\n      console.log('HANDLE NEW DATSET:', datasetId, datasetFilename)\r\n\r\n      if (!this.boundaryDataTable[this.featureJoinColumn])\r\n        throw Error(`Geodata does not have property ${this.featureJoinColumn}`)\r\n\r\n      this.myDataManager.setPreloadedDataset({\r\n        key: this.datasetKeyToFilename[datasetId],\r\n        dataTable,\r\n      })\r\n\r\n      this.myDataManager.addFilterListener(\r\n        { dataset: this.datasetKeyToFilename[datasetId] },\r\n        this.processFiltersNow\r\n      )\r\n\r\n      this.vizDetails.datasets[datasetId] = {\r\n        file: datasetFilename,\r\n        // if join columns are not named identically, use \"this:that\" format\r\n        // join:\r\n        //   featureJoinColumn === dataJoinColumn\r\n        //     ? featureJoinColumn\r\n        //     : `${featureJoinColumn}:${dataJoinColumn}`,\r\n      } as any\r\n\r\n      this.vizDetails = Object.assign({}, this.vizDetails)\r\n      this.datasets[datasetId] = dataTable\r\n      this.datasets = Object.assign({}, this.datasets)\r\n    },\r\n\r\n    setupJoin(props: { dataTable: DataTable; datasetId: string; dataJoinColumn: string }) {\r\n      const { dataTable, datasetId, dataJoinColumn } = props\r\n      // console.log('> setupJoin', datasetId, dataJoinColumn)\r\n\r\n      // if no join at all, don't do anything\r\n      if (!dataJoinColumn) return\r\n\r\n      // if join already exists, don't do anything\r\n      if (`@@${dataJoinColumn}` in dataTable) return\r\n\r\n      // make sure columns exist!\r\n      if (!this.boundaryDataTable[this.featureJoinColumn])\r\n        throw Error(`Geodata does not have property ${this.featureJoinColumn}`)\r\n      if (!dataTable[dataJoinColumn])\r\n        throw Error(`Dataset ${datasetId} does not have column ${dataJoinColumn}`)\r\n\r\n      // create lookup column and write lookup offsets\r\n      const lookupColumn: DataTableColumn = {\r\n        type: DataType.LOOKUP,\r\n        values: [],\r\n        name: `@@${dataJoinColumn}`,\r\n      }\r\n\r\n      const lookupValues = dataTable[dataJoinColumn].values\r\n\r\n      const boundaryOffsets = this.getBoundaryOffsetLookup(this.featureJoinColumn)\r\n      // if user wants specific tooltips based on this dataset, save the values\r\n      // TODO - this is in the wrong place and probably causes problems with\r\n      // multi-line datasets\r\n\r\n      const tips = this.vizDetails.tooltip || []\r\n      const relevantTips = tips\r\n        .filter(tip => tip.substring(0, tip.indexOf('.')).startsWith(datasetId))\r\n        .map(tip => {\r\n          return { id: tip, column: tip.substring(1 + tip.indexOf('.')) }\r\n        })\r\n\r\n      for (const tip of relevantTips) {\r\n        // make sure tip column exists\r\n        if (!dataTable[tip.column]) {\r\n          this.globalStore.commit('setStatus', {\r\n            type: Status.WARNING,\r\n            msg: `Tooltip references \"${tip.id}\" but that column doesn't exist`,\r\n            desc: `Check the tooltip spec and column names`,\r\n          })\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < lookupValues.length; i++) {\r\n        // set lookup data\r\n        const featureOffset = boundaryOffsets[lookupValues[i]]\r\n        lookupColumn.values[i] = featureOffset\r\n        const feature = this.boundaries[featureOffset]\r\n        // also set tooltip data\r\n        for (const tip of relevantTips) {\r\n          if (!dataTable[tip.column]) continue\r\n          const value = dataTable[tip.column]?.values[i] && ''\r\n          if (feature && value) feature.properties[tip.id] = value\r\n        }\r\n      }\r\n\r\n      // Notify Deck.gl of the new tooltip data\r\n      if (REACT_VIEW_HANDLES[1000 + this.layerId]) {\r\n        REACT_VIEW_HANDLES[1000 + this.layerId](this.boundaries)\r\n      }\r\n\r\n      // add/replace this dataset in the datamanager, with the new lookup column\r\n      dataTable[`@@${dataJoinColumn}`] = lookupColumn\r\n      this.myDataManager.setPreloadedDataset({\r\n        key: this.datasetKeyToFilename[datasetId],\r\n        dataTable,\r\n      })\r\n\r\n      this.myDataManager.addFilterListener(\r\n        { dataset: this.datasetKeyToFilename[datasetId] },\r\n        this.processFiltersNow\r\n      )\r\n\r\n      this.vizDetails.datasets[datasetId] = {\r\n        file: this.datasetKeyToFilename[datasetId],\r\n        // if join columns are not named identically, use \"this:that\" format\r\n        join:\r\n          this.featureJoinColumn === dataJoinColumn\r\n            ? this.featureJoinColumn\r\n            : `${this.featureJoinColumn}:${dataJoinColumn}`,\r\n      } as any\r\n\r\n      // console.log('triggering updates')\r\n      this.datasets[datasetId] = dataTable\r\n    },\r\n\r\n    getBoundaryOffsetLookup(joinColumn: string) {\r\n      // return it if we already built it\r\n      if (this.boundaryJoinLookups[joinColumn]) return this.boundaryJoinLookups[joinColumn]\r\n\r\n      // build it\r\n      this.statusText = 'Joining datasets...'\r\n      this.boundaryJoinLookups[joinColumn] = {}\r\n      const lookupValues = this.boundaryJoinLookups[joinColumn]\r\n\r\n      const boundaryLookupColumnValues = this.boundaryDataTable[joinColumn].values\r\n\r\n      for (let i = 0; i < this.boundaries.length; i++) {\r\n        lookupValues[boundaryLookupColumnValues[i]] = i\r\n      }\r\n      this.statusText = ''\r\n      return lookupValues\r\n    },\r\n\r\n    removeAnyOldFilters(filters: any) {\r\n      const oldFilters = new Set(\r\n        Object.keys(this.currentUIFilterDefinitions).filter(f => !f.startsWith('shapes.'))\r\n      )\r\n      const newFilters = new Set(Object.keys(filters).filter(f => !f.startsWith('shapes.')))\r\n      newFilters.forEach(f => oldFilters.delete(f))\r\n\r\n      for (const deletedFilter of oldFilters) {\r\n        console.log('REMOVING', deletedFilter)\r\n        const dot = deletedFilter.indexOf('.')\r\n        const dataset = deletedFilter.slice(0, dot)\r\n        const column = deletedFilter.slice(dot + 1)\r\n        this.myDataManager.setFilter({\r\n          dataset: this.datasetKeyToFilename[dataset],\r\n          column,\r\n          value: [],\r\n        })\r\n\r\n        // also remove from category-UI and URL\r\n        if (column in this.filters) {\r\n          const query = Object.assign({}, this.$route.query)\r\n          delete query[column]\r\n          this.$router.replace({ query })\r\n\r\n          delete this.filters[column]\r\n        }\r\n      }\r\n    },\r\n\r\n    handleNewFilters(filters: any) {\r\n      // Remove removed filters first!\r\n      this.removeAnyOldFilters(filters)\r\n\r\n      this.currentUIFilterDefinitions = filters\r\n\r\n      const newDefinitions = this.parseFilterDefinitions(filters)\r\n      this.filterDefinitions = newDefinitions\r\n\r\n      // Filter the shapes/boundaries\r\n      this.filterShapesNow()\r\n\r\n      // Filter attached datasets\r\n      Object.keys(this.datasets).forEach((datasetKey, i) => {\r\n        if (i === 0) return // skip shapes, we just did them\r\n        this.activateFiltersForDataset(datasetKey)\r\n      })\r\n    },\r\n\r\n    handleColorDiffMode(section: string, color: FillColorDefinition | LineColorDefinition) {\r\n      if (!color.diffDatasets) return\r\n\r\n      const columnName = color.columnName\r\n      const lookupColumn = color.join || ''\r\n      const key1 = color.diffDatasets[0] || ''\r\n      const dataset1 = this.datasets[key1]\r\n      const key2 = color.diffDatasets[1] || ''\r\n      const dataset2 = this.datasets[key2]\r\n      const relative = !!color.relative\r\n\r\n      // console.log('999 DIFF', relative, key1, key2, dataset1, dataset2)\r\n\r\n      if (dataset1 && dataset2) {\r\n        // generate the lookup columns we need\r\n        this.setupJoin({ datasetId: key1, dataTable: dataset1, dataJoinColumn: lookupColumn })\r\n        this.setupJoin({ datasetId: key2, dataTable: dataset2, dataJoinColumn: lookupColumn })\r\n\r\n        const lookup1 = dataset1[`@@${lookupColumn}`]\r\n        const lookup2 = dataset2[`@@${lookupColumn}`]\r\n        const dataCol1 = dataset1[columnName]\r\n        const dataCol2 = dataset2[columnName]\r\n\r\n        if (!dataCol1) throw Error(`Dataset ${key1} does not contain column \"${columnName}\"`)\r\n        if (!dataCol2) throw Error(`Dataset ${key2} does not contain column \"${columnName}\"`)\r\n\r\n        // NORMALIZE if we need to\r\n        let normalColumn\r\n        let normalLookup\r\n        if (color.normalize) {\r\n          const [dataset, column] = color.normalize.split(':')\r\n          if (!this.datasets[dataset] || !this.datasets[dataset][column]) {\r\n            throw Error(`${dataset} does not contain column \"${column}\"`)\r\n          }\r\n          this.dataCalculatedValueLabel += `/ ${column}`\r\n          normalColumn = this.datasets[dataset][column]\r\n          // Create yet one more join for the normal column if it's not from the featureset itself\r\n          if (this.datasetChoices[0] !== dataset) {\r\n            this.setupJoin({\r\n              datasetId: dataset,\r\n              dataTable: this.datasets[dataset],\r\n              dataJoinColumn: lookupColumn,\r\n            })\r\n            normalLookup = this.datasets[dataset][`@@${column}`]\r\n          }\r\n        }\r\n\r\n        // Calculate colors for each feature\r\n        const { array, legend, calculatedValues } = ColorWidthSymbologizer.getColorsForDataColumn({\r\n          numFeatures: this.boundaries.length,\r\n          data: dataCol1,\r\n          data2: dataCol2,\r\n          lookup: lookup1,\r\n          lookup2: lookup2,\r\n          normalize: normalColumn,\r\n          normalLookup,\r\n          options: color,\r\n          filter: this.boundaryFilters,\r\n          relative,\r\n        })\r\n\r\n        if (!array) return\r\n\r\n        if (section === 'fill') {\r\n          this.dataFillColors = array\r\n        } else {\r\n          this.dataLineColors = array\r\n        }\r\n        this.dataCalculatedValues = calculatedValues\r\n        this.dataCalculatedValueLabel = `${relative ? '% ' : ''}Diff: ${columnName}` // : ${key1}-${key2}`\r\n\r\n        this.legendStore.setLegendSection({\r\n          section: section === 'fill' ? 'FillColor' : 'Line Color',\r\n          column: dataCol1.name,\r\n          values: legend,\r\n          diff: true,\r\n          relative,\r\n          normalColumn: normalColumn ? normalColumn.name : '',\r\n        })\r\n      }\r\n    },\r\n\r\n    paintColorsWithFilter(section: string, dataTable: DataTable) {\r\n      const currentDefinition =\r\n        section === 'fill' ? this.currentUIFillColorDefinitions : this.currentUILineColorDefinitions\r\n\r\n      const columnName = currentDefinition.columnName\r\n      const lookupColumn =\r\n        currentDefinition.join === '@count'\r\n          ? dataTable[`@@${columnName}`]\r\n          : dataTable[`@@${currentDefinition.join}`]\r\n\r\n      let normalColumn\r\n      if (currentDefinition.normalize) {\r\n        const keys = currentDefinition.normalize.split(':')\r\n        this.dataCalculatedValueLabel = columnName + '/' + keys[1]\r\n        const datasetKey = currentDefinition.dataset\r\n\r\n        if (!this.datasets[keys[0]] || !this.datasets[keys[0]][keys[1]]) {\r\n          throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n        }\r\n        normalColumn = dataTable[keys[1]]\r\n      }\r\n\r\n      const props = {\r\n        numFeatures: this.boundaries.length,\r\n        data: dataTable[columnName],\r\n        normalize: normalColumn,\r\n        lookup: lookupColumn,\r\n        filter: this.boundaryFilters,\r\n        options: currentDefinition,\r\n        join: currentDefinition.join,\r\n      }\r\n\r\n      const { array, legend, calculatedValues } =\r\n        ColorWidthSymbologizer.getColorsForDataColumn(props)\r\n\r\n      if (!array) return\r\n\r\n      if (section === 'fill') {\r\n        this.dataFillColors = array\r\n      } else {\r\n        this.dataLineColors = array\r\n      }\r\n\r\n      this.dataCalculatedValues = calculatedValues\r\n      this.legendStore.setLegendSection({\r\n        section: section === 'fill' ? 'FillColor' : 'Line Color',\r\n        column: columnName,\r\n        values: legend,\r\n      })\r\n    },\r\n\r\n    handleNewFillColor(fillOrFilteredDataTable: FillColorDefinition | DataTable) {\r\n      // *** FILTER: if prop has a columnName, then this is a FillColorDefinition\r\n      const isFillColorDefinition = 'columnName' in fillOrFilteredDataTable\r\n      const isFilterTable = !isFillColorDefinition\r\n\r\n      // If we received a new fill color definition AND the dataset is filtered,\r\n      // then bookmark that definition and process the filter first/instead.\r\n      // (note, processFiltersNow() will call this function again once the calcs are done)\r\n      if (isFillColorDefinition) {\r\n        const dataset = fillOrFilteredDataTable?.dataset as string\r\n        const { filteredRows } = this.myDataManager.getFilteredDataset({\r\n          dataset: `${dataset}` || '',\r\n        })\r\n        if (filteredRows && filteredRows.length) {\r\n          this.currentUIFillColorDefinitions = fillOrFilteredDataTable\r\n          this.processFiltersNow(dataset)\r\n          return\r\n        }\r\n      }\r\n\r\n      if (isFilterTable) {\r\n        this.paintColorsWithFilter('fill', fillOrFilteredDataTable)\r\n        return\r\n      }\r\n\r\n      const color = fillOrFilteredDataTable as FillColorDefinition\r\n      this.currentUIFillColorDefinitions = color\r\n\r\n      const columnName = color.columnName\r\n\r\n      if (color.diffDatasets) {\r\n        // *** diff mode *************************\r\n        this.handleColorDiffMode('fill', color)\r\n        return\r\n      } else if (!columnName) {\r\n        // *** simple color **********************\r\n        this.dataFillColors = color.fixedColors[0]\r\n        this.dataCalculatedValueLabel = ''\r\n        this.legendStore.clear('FillColor')\r\n        return\r\n      } else {\r\n        // *** Data column mode ******************\r\n        const datasetKey = color.dataset || ''\r\n        const selectedDataset = this.datasets[datasetKey]\r\n        this.dataCalculatedValueLabel = ''\r\n\r\n        // no selected dataset or datacol missing? Not sure what to do here, just give up...\r\n        if (!selectedDataset) {\r\n          console.warn('color: no selected dataset yet, maybe still loading')\r\n          return\r\n        }\r\n        const dataColumn = selectedDataset[columnName]\r\n        if (!dataColumn) {\r\n          throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n        }\r\n\r\n        this.dataCalculatedValueLabel = columnName ?? ''\r\n\r\n        // Do we need a join? Join it\r\n        let dataJoinColumn = ''\r\n        if (color.join && color.join !== '@count') {\r\n          // join column name set by user\r\n          dataJoinColumn = color.join\r\n        } else if (color.join === '@count') {\r\n          // rowcount specified: join on the column name itself\r\n          dataJoinColumn = columnName\r\n        } else {\r\n          // nothing specified: let's hope they didn't want to join\r\n          if (this.datasetChoices.length > 1) {\r\n            console.warn('No join; lets hope user just wants to display data in boundary file')\r\n          }\r\n        }\r\n\r\n        this.setupJoin({\r\n          datasetId: datasetKey,\r\n          dataTable: selectedDataset,\r\n          dataJoinColumn,\r\n        })\r\n\r\n        const lookupColumn = selectedDataset[`@@${dataJoinColumn}`]\r\n\r\n        // Figure out the normal\r\n        let normalColumn\r\n\r\n        // NORMALIZE if we need to\r\n        let normalLookup\r\n        if (color.normalize) {\r\n          const [dataset, column] = color.normalize.split(':')\r\n          if (!this.datasets[dataset] || !this.datasets[dataset][column]) {\r\n            throw Error(`${dataset} does not contain column \"${column}\"`)\r\n          }\r\n          this.dataCalculatedValueLabel += `/ ${column}`\r\n          normalColumn = this.datasets[dataset][column]\r\n          // Create yet one more join for the normal column if it's not from the featureset itself\r\n          if (this.datasetChoices[0] !== dataset) {\r\n            this.setupJoin({\r\n              datasetId: dataset,\r\n              dataTable: this.datasets[dataset],\r\n              dataJoinColumn,\r\n            })\r\n            normalLookup = this.datasets[dataset][`@@${column}`]\r\n          }\r\n        }\r\n\r\n        // Calculate colors for each feature\r\n        const { array, legend, calculatedValues, normalizedValues } =\r\n          ColorWidthSymbologizer.getColorsForDataColumn({\r\n            numFeatures: this.boundaries.length,\r\n            data: dataColumn,\r\n            normalize: normalColumn,\r\n            normalLookup,\r\n            lookup: lookupColumn,\r\n            filter: this.boundaryFilters,\r\n            options: color,\r\n            join: color.join,\r\n          })\r\n\r\n        if (array) {\r\n          this.dataFillColors = array\r\n          this.dataCalculatedValues = calculatedValues\r\n          this.dataNormalizedValues = normalizedValues || null\r\n\r\n          this.legendStore.setLegendSection({\r\n            section: 'FillColor',\r\n            column: dataColumn.name,\r\n            values: legend,\r\n            normalColumn: normalColumn ? normalColumn.name : '',\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    handleNewLineColor(colorOrFilteredDataTable: LineColorDefinition | DataTable | false) {\r\n      if (colorOrFilteredDataTable === false) {\r\n        this.dataLineColors = ''\r\n        this.legendStore.clear('Line Color')\r\n        return\r\n      }\r\n\r\n      // *** FILTER: if prop has a columnName, then this is a LineColorDefinition\r\n      const isColorDefinition = 'columnName' in colorOrFilteredDataTable\r\n      const isFilterTable = !isColorDefinition\r\n\r\n      // If we received a new color definition AND the dataset is filtered,\r\n      // then bookmark that definition and process the filter first/instead.\r\n      // (note, processFiltersNow() will call this function again once the calcs are done)\r\n      if (isColorDefinition) {\r\n        const dataset = colorOrFilteredDataTable?.dataset as string\r\n        const { filteredRows } = this.myDataManager.getFilteredDataset({\r\n          dataset: `${dataset}` || '',\r\n        })\r\n        if (filteredRows && filteredRows.length) {\r\n          this.currentUILineColorDefinitions = colorOrFilteredDataTable\r\n          this.processFiltersNow(dataset)\r\n          return\r\n        }\r\n      }\r\n\r\n      if (isFilterTable) {\r\n        this.paintColorsWithFilter('lineColor', colorOrFilteredDataTable)\r\n        return\r\n      }\r\n\r\n      const color = colorOrFilteredDataTable as LineColorDefinition\r\n      this.currentUILineColorDefinitions = color\r\n\r\n      const columnName = color.columnName\r\n\r\n      if (color.diffDatasets) {\r\n        // *** diff mode *************************\r\n        this.handleColorDiffMode('lineColor', color)\r\n        return\r\n      } else if (!columnName) {\r\n        // *** simple color **********************\r\n        this.dataLineColors = color.fixedColors[0]\r\n        this.dataCalculatedValueLabel = ''\r\n        this.legendStore.clear('Line Color')\r\n        return\r\n      } else {\r\n        // *** Data column mode ******************\r\n        const datasetKey = color.dataset || ''\r\n        const selectedDataset = this.datasets[datasetKey]\r\n        this.dataCalculatedValueLabel = ''\r\n\r\n        // no selected dataset or datacol missing? Not sure what to do here, just give up...\r\n        if (!selectedDataset) {\r\n          console.warn('color: no selected dataset yet, maybe still loading')\r\n          return\r\n        }\r\n        const dataColumn = selectedDataset[columnName]\r\n        if (!dataColumn) {\r\n          throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n        }\r\n\r\n        this.dataCalculatedValueLabel = columnName ?? ''\r\n\r\n        // Do we need a join? Join it\r\n        let dataJoinColumn = ''\r\n        if (color.join && color.join !== '@count') {\r\n          // join column name set by user\r\n          dataJoinColumn = color.join\r\n        } else if (color.join === '@count') {\r\n          // rowcount specified: join on the column name itself\r\n          dataJoinColumn = columnName\r\n        } else {\r\n          // nothing specified: let's hope they didn't want to join\r\n          if (this.datasetChoices.length > 1) {\r\n            console.warn('No join; lets hope user just wants to display data in boundary file')\r\n          }\r\n        }\r\n\r\n        this.setupJoin({\r\n          datasetId: datasetKey,\r\n          dataTable: selectedDataset,\r\n          dataJoinColumn,\r\n        })\r\n\r\n        const lookupColumn = selectedDataset[`@@${dataJoinColumn}`]\r\n\r\n        // Figure out the normal\r\n        let normalColumn\r\n\r\n        // NORMALIZE if we need to\r\n        let normalLookup\r\n        if (color.normalize) {\r\n          const [dataset, column] = color.normalize.split(':')\r\n          if (!this.datasets[dataset] || !this.datasets[dataset][column]) {\r\n            throw Error(`${dataset} does not contain column \"${column}\"`)\r\n          }\r\n          this.dataCalculatedValueLabel += `/ ${column}`\r\n          normalColumn = this.datasets[dataset][column]\r\n          // Create yet one more join for the normal column if it's not from the featureset itself\r\n          if (this.datasetChoices[0] !== dataset) {\r\n            this.setupJoin({\r\n              datasetId: dataset,\r\n              dataTable: this.datasets[dataset],\r\n              dataJoinColumn,\r\n            })\r\n            normalLookup = this.datasets[dataset][`@@${column}`]\r\n          }\r\n        }\r\n\r\n        // Calculate colors for each feature\r\n        const colors = ColorWidthSymbologizer.getColorsForDataColumn({\r\n          numFeatures: this.boundaries.length,\r\n          data: dataColumn,\r\n          normalize: normalColumn,\r\n          normalLookup,\r\n          lookup: lookupColumn,\r\n          filter: this.boundaryFilters,\r\n          options: color,\r\n          join: color.join,\r\n        })\r\n\r\n        const { array, legend, calculatedValues, normalizedValues, hasCategory } = colors as any\r\n\r\n        if (!array) return\r\n\r\n        this.dataLineColors = array\r\n        this.dataCalculatedValues = calculatedValues\r\n        this.dataNormalizedValues = normalizedValues || null\r\n\r\n        // If colors are based on category and line widths are constant, then use a\r\n        // 1-pixel line width when the category is undefined.\r\n        if (hasCategory && this.constantLineWidth !== null) {\r\n          const lineWidth = this.constantLineWidth as number\r\n          const variableConstantWidth = new Float32Array(this.boundaries.length).fill(1)\r\n          Object.keys(hasCategory).forEach((i: any) => {\r\n            variableConstantWidth[i] = lineWidth\r\n          })\r\n          this.dataLineWidths = variableConstantWidth\r\n        }\r\n        this.legendStore.setLegendSection({\r\n          section: 'Line Color',\r\n          column: dataColumn.name,\r\n          values: legend,\r\n          normalColumn: normalColumn ? normalColumn.name : '',\r\n        })\r\n      }\r\n    },\r\n\r\n    handleNewLineWidth(width: LineWidthDefinition) {\r\n      const columnName = width.columnName || ''\r\n\r\n      // constant line width?  @0, @1, @2\r\n      if (width.dataset && /^@\\d$/.test(width.dataset)) {\r\n        this.dataLineWidths = Number.parseInt(width.dataset.substring(1))\r\n        this.constantLineWidth = this.dataLineWidths\r\n        this.legendStore.clear('Line Width')\r\n        return\r\n      } else {\r\n        this.constantLineWidth = null\r\n      }\r\n\r\n      // No scale factor?\r\n      if (width.scaleFactor && isNaN(width.scaleFactor)) {\r\n        this.dataLineWidths = 1\r\n        this.legendStore.clear('Line Width')\r\n        return\r\n      }\r\n\r\n      if (width.diffDatasets) {\r\n        const lookupColumn = width.join || ''\r\n        const key1 = width.diffDatasets[0] || ''\r\n        const dataset1 = this.datasets[key1]\r\n        const key2 = width.diffDatasets[1] || ''\r\n        const dataset2 = this.datasets[key2]\r\n        // const relative = !!width.relative\r\n\r\n        if (dataset1 && dataset2) {\r\n          // generate the lookup columns we need\r\n          this.setupJoin({ datasetId: key1, dataTable: dataset1, dataJoinColumn: lookupColumn })\r\n          this.setupJoin({ datasetId: key2, dataTable: dataset2, dataJoinColumn: lookupColumn })\r\n\r\n          const lookup1 = dataset1[`@@${lookupColumn}`]\r\n          const lookup2 = dataset2[`@@${lookupColumn}`]\r\n          const dataCol1 = dataset1[columnName]\r\n          const dataCol2 = dataset2[columnName]\r\n\r\n          if (!dataCol1) throw Error(`Dataset ${key1} does not contain column \"${columnName}\"`)\r\n          if (!dataCol2) throw Error(`Dataset ${key2} does not contain column \"${columnName}\"`)\r\n\r\n          // Calculate widths for each feature\r\n          const { array, legend, calculatedValues } = ColorWidthSymbologizer.getWidthsForDataColumn(\r\n            {\r\n              numFeatures: this.boundaries.length,\r\n              data: dataCol1,\r\n              data2: dataCol2,\r\n              lookup: lookup1,\r\n              lookup2: lookup2,\r\n              options: width,\r\n            }\r\n          )\r\n\r\n          this.dataLineWidths = array || 0\r\n          this.dataCalculatedValues = calculatedValues\r\n          this.dataCalculatedValueLabel = 'Diff: ' + columnName\r\n\r\n          this.legendStore.setLegendSection({\r\n            section: 'Line Width',\r\n            column: `${dataCol1.name} (Diff)`,\r\n            values: legend,\r\n          })\r\n        }\r\n      } else if (columnName) {\r\n        // Get the data column\r\n        const datasetKey = width.dataset || ''\r\n        const selectedDataset = this.datasets[datasetKey]\r\n        if (selectedDataset) {\r\n          const dataColumn = selectedDataset[columnName]\r\n          if (!dataColumn)\r\n            throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n\r\n          // Do we need a join? Join it\r\n          let dataJoinColumn = ''\r\n          if (width.join && width.join !== '@count') {\r\n            // join column name set by user\r\n            dataJoinColumn = width.join\r\n          } else if (width.join === '@count') {\r\n            // rowcount specified: join on the column name itself\r\n            dataJoinColumn = columnName\r\n          } else {\r\n            // nothing specified: let's hope they didn't want to join\r\n            if (this.datasetChoices.length > 1) {\r\n              console.warn('No join; lets hope user just wants to display data in boundary file')\r\n            }\r\n          }\r\n\r\n          this.setupJoin({\r\n            datasetId: datasetKey,\r\n            dataTable: selectedDataset,\r\n            dataJoinColumn,\r\n          })\r\n\r\n          const lookupColumn = selectedDataset[`@@${dataJoinColumn}`]\r\n\r\n          // Calculate widths for each feature\r\n          const { array, legend, calculatedValues } = ColorWidthSymbologizer.getWidthsForDataColumn(\r\n            {\r\n              numFeatures: this.boundaries.length,\r\n              data: dataColumn,\r\n              lookup: lookupColumn,\r\n              join: width.join,\r\n              options: width,\r\n            }\r\n          )\r\n\r\n          this.dataLineWidths = array || 0\r\n          this.dataCalculatedValues = calculatedValues\r\n          this.dataCalculatedValueLabel = columnName\r\n\r\n          if (legend.length) {\r\n            this.legendStore.setLegendSection({\r\n              section: 'Line Width',\r\n              column: dataColumn.name,\r\n              values: legend,\r\n            })\r\n          } else {\r\n            this.legendStore.clear('Line Width')\r\n          }\r\n        }\r\n      } else {\r\n        // simple width\r\n\r\n        this.dataLineWidths = 1\r\n        this.dataCalculatedValueLabel = ''\r\n        this.legendStore.clear('Line Width')\r\n      }\r\n      // this.filterListener()\r\n    },\r\n\r\n    handleNewFillHeight(height: FillHeightDefinition) {\r\n      const columnName = height.columnName\r\n      if (columnName) {\r\n        // Get the data column\r\n        const datasetKey = height.dataset || ''\r\n        const selectedDataset = this.datasets[datasetKey]\r\n        if (selectedDataset) {\r\n          const dataColumn = selectedDataset[columnName]\r\n          if (!dataColumn)\r\n            throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n\r\n          // Do we need a join? Join it\r\n          let dataJoinColumn = ''\r\n          if (height.join && height.join !== '@count') {\r\n            // join column name set by user\r\n            dataJoinColumn = height.join\r\n          } else if (height.join === '@count') {\r\n            // rowcount specified: join on the column name itself\r\n            dataJoinColumn = columnName\r\n          } else {\r\n            // nothing specified: let's hope they didn't want to join\r\n            if (this.datasetChoices.length > 1) {\r\n              console.warn('No join; lets hope user just wants to display data in boundary file')\r\n            }\r\n          }\r\n\r\n          this.setupJoin({\r\n            datasetId: datasetKey,\r\n            dataTable: selectedDataset,\r\n            dataJoinColumn,\r\n          })\r\n\r\n          const lookupColumn = selectedDataset[`@@${dataJoinColumn}`]\r\n\r\n          // Figure out the normal\r\n          let normalColumn\r\n          if (height.normalize) {\r\n            const keys = height.normalize.split(':')\r\n            // console.log({ keys, datasets: this.datasets })\r\n            if (!this.datasets[keys[0]] || !this.datasets[keys[0]][keys[1]])\r\n              throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n            normalColumn = this.datasets[keys[0]][keys[1]]\r\n            // console.log({ normalColumn })\r\n            this.dataCalculatedValueLabel = columnName + '/' + keys[1]\r\n          }\r\n\r\n          // Calculate for each feature\r\n          const { heights, calculatedValues, normalizedValues } =\r\n            ColorWidthSymbologizer.getHeightsBasedOnNumericValues({\r\n              length: this.boundaries.length,\r\n              data: dataColumn,\r\n              lookup: lookupColumn,\r\n              options: height,\r\n              normalize: normalColumn,\r\n              join: height.join,\r\n            })\r\n\r\n          this.dataFillHeights = heights\r\n          this.dataCalculatedValues = calculatedValues\r\n          this.dataNormalizedValues = normalizedValues || null\r\n          // this.dataCalculatedValueLabel = ''\r\n\r\n          if (this.$store.state.viewState.pitch == 0) {\r\n            const angledView = Object.assign({}, this.$store.state.viewState, {\r\n              pitch: 30,\r\n            })\r\n            this.$store.commit('setMapCamera', angledView)\r\n          }\r\n        }\r\n      } else {\r\n        // simple\r\n        this.dataFillHeights = 0\r\n        this.dataCalculatedValues = null\r\n        this.dataCalculatedValueLabel = ''\r\n      }\r\n    },\r\n\r\n    handleNewRadius(radiusOptions: CircleRadiusDefinition) {\r\n      const columnName = radiusOptions.columnName\r\n      if (columnName) {\r\n        // Get the data column\r\n        const datasetKey = radiusOptions.dataset || ''\r\n        const selectedDataset = this.datasets[datasetKey]\r\n\r\n        // no selected dataset or datacol missing? Not sure what to do here, just give up...\r\n        if (!selectedDataset) {\r\n          console.warn('radius: no selected dataset yet, maybe still loading')\r\n          return\r\n        }\r\n\r\n        if (selectedDataset) {\r\n          const dataColumn = selectedDataset[columnName]\r\n          if (!dataColumn)\r\n            throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n\r\n          // Do we need a join? Join it\r\n          let dataJoinColumn = ''\r\n          if (radiusOptions.join && radiusOptions.join !== '@count') {\r\n            // join column name set by user\r\n            dataJoinColumn = radiusOptions.join\r\n          } else if (radiusOptions.join === '@count') {\r\n            // rowcount specified: join on the column name itself\r\n            dataJoinColumn = columnName\r\n          } else {\r\n            // nothing specified: let's hope they didn't want to join\r\n            if (this.datasetChoices.length > 1) {\r\n              console.warn('No join; lets hope user just wants to display data in boundary file')\r\n            }\r\n          }\r\n\r\n          this.setupJoin({\r\n            datasetId: datasetKey,\r\n            dataTable: selectedDataset,\r\n            dataJoinColumn,\r\n          })\r\n\r\n          const lookupColumn = selectedDataset[`@@${dataJoinColumn}`]\r\n\r\n          // Calculate radius for each feature\r\n          const { radius, calculatedValues } = ColorWidthSymbologizer.getRadiusForDataColumn({\r\n            length: this.boundaries.length,\r\n            data: dataColumn,\r\n            lookup: lookupColumn,\r\n            join: dataJoinColumn,\r\n            options: radiusOptions,\r\n          })\r\n          this.dataPointRadii = radius\r\n          this.dataCalculatedValues = calculatedValues\r\n          this.dataCalculatedValueLabel = dataColumn.name\r\n        }\r\n      } else {\r\n        // simple width\r\n        this.dataPointRadii = 5\r\n      }\r\n\r\n      // this.filterListener()\r\n\r\n      // set features INSIDE react component\r\n      if (REACT_VIEW_HANDLES[1000 + this.layerId]) {\r\n        REACT_VIEW_HANDLES[1000 + this.layerId](\r\n          typeof this.dataPointRadii == 'number' ? this.boundaries : this.centroids\r\n        )\r\n      }\r\n    },\r\n\r\n    async handleMapClick(click: any) {\r\n      try {\r\n        const { x, y, data } = click.points[0]\r\n        const filter = this.config.groupBy\r\n        const value = x\r\n\r\n        // this.datamanager.setFilter(this.config.dataset, filter, value)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    },\r\n\r\n    async figureOutFeatureIdColumn() {\r\n      // if user specified it in a data join in the YAML, we're done\r\n      if (this.featureJoinColumn) return this.featureJoinColumn\r\n\r\n      // if user specified it in the shapefile yaml, we're done\r\n      if ('string' !== typeof this.vizDetails.shapes && this.vizDetails.shapes.join) {\r\n        return this.vizDetails.shapes.join\r\n      }\r\n\r\n      // if there's only one column, we're done\r\n      const featureDataset = this.datasets[Object.keys(this.datasets)[0]]\r\n      const availableColumns = Object.keys(featureDataset)\r\n      if (availableColumns.length === 1) return availableColumns[0]\r\n\r\n      // ask the user\r\n      const join: string = await new Promise((resolve, reject) => {\r\n        const boundaryProperties = new Set()\r\n        // Some geojsons have an 'id' separate from their property table\r\n        if (this.boundaries[0].id) boundaryProperties.add('id')\r\n        // Add list of boundary properties from feature dataset\r\n        Object.keys(featureDataset).forEach(key => boundaryProperties.add(key))\r\n\r\n        this.datasetJoinSelector = {\r\n          data1: { title: 'Properties', columns: Array.from(boundaryProperties) as string[] },\r\n        }\r\n        this.showJoiner = true\r\n\r\n        this.cbDatasetJoined = (join: string) => {\r\n          this.datasetJoinSelector = {}\r\n          this.showJoiner = false\r\n          resolve(join)\r\n        }\r\n      })\r\n\r\n      return join.length ? join : 'id'\r\n    },\r\n\r\n    async processFiltersNow(datasetName?: string) {\r\n      // This callback occurs when there is a newly filtered dataset.\r\n\r\n      console.log('> processFiltersNow', datasetName)\r\n\r\n      const { filteredRows } = this.myDataManager.getFilteredDataset({ dataset: datasetName || '' })\r\n      const filteredDataTable: { [id: string]: DataTableColumn } = {}\r\n\r\n      // if we got NULL, remove this filter totally\r\n      if (filteredRows) {\r\n        // turn array of objects into data columns for consumption by fill/line/height doodads\r\n        // (do this here... or should this be somewhere else?)\r\n\r\n        // CONVERT array of objects to column-based DataTableColumns\r\n        const allColumns = filteredRows.length > 0 ? Object.keys(filteredRows[0]) : []\r\n        allColumns.forEach(columnId => {\r\n          const column = { name: columnId, values: [], type: DataType.UNKNOWN } as any\r\n          for (const row of filteredRows) column.values.push(row[columnId])\r\n          filteredDataTable[columnId] = column\r\n        })\r\n      }\r\n\r\n      // now redraw colors for fills and liness\r\n      if (this.currentUIFillColorDefinitions?.dataset) {\r\n        this.handleNewFillColor(\r\n          filteredRows ? filteredDataTable : this.currentUIFillColorDefinitions\r\n        )\r\n      }\r\n\r\n      if (this.currentUILineColorDefinitions?.dataset) {\r\n        this.handleNewLineColor(\r\n          filteredRows ? filteredDataTable : this.currentUILineColorDefinitions\r\n        )\r\n      }\r\n    },\r\n\r\n    // ------------------------------------\r\n    // TODO do shapes later\r\n\r\n    // // hide shapes that don't match filter.\r\n    // const hideFeature = new Uint8Array(this.boundaries.length).fill(1) // hide by default\r\n    // filteredRows.forEach(row => {\r\n    //   const rowNumber = row['@']\r\n    //   hideFeature[rowNumber] = 0\r\n    // })\r\n    // const newFilter = new Float32Array(this.boundaries.length)\r\n    // for (let i = 0; i < this.boundaries.length; i++) {\r\n    //   if (this.boundaryFilters[i] == -1 || hideFeature[i]) newFilter[i] = -1\r\n    // }\r\n\r\n    // this.boundaryFilters = newFilter\r\n    // return\r\n\r\n    // ------------------------------------\r\n\r\n    // let groupLookup: any // this will be the map of boundary IDs to rows\r\n    // let groupIndex: any = 1 // unfiltered values will always be element 1 of [key, values[]]\r\n\r\n    // if (!filteredRows) {\r\n    //   // is filter UN-selected? Rebuild full dataset\r\n    //   // TODO: FIXME this is old ------:\r\n    //   // const joinCol = this.boundaryDataTable[this.datasetJoinColumn].values\r\n    //   // const dataValues = this.boundaryDataTable[this.datasetValuesColumn].values\r\n    //   // groupLookup = group(zip(joinCol, dataValues), d => d[0]) // group by join key\r\n    //   filteredRows = [] // get rid of this\r\n    // } else {\r\n    //   // group filtered values by lookup key\r\n    //   groupLookup = group(filteredRows, d => d[join[0]])\r\n    //   groupIndex = this.datasetValuesColumn // index is values column name\r\n    // }\r\n\r\n    // console.log({ groupLookup })\r\n\r\n    // // Build the filtered dataset columns\r\n    // const filteredDataset: DataTable = {}\r\n    // const columns = Object.keys(filteredRows[0])\r\n    // for (const column of columns) {\r\n    //   filteredDataset[column] = { name: column, values: [], type: DataType.NUMBER }\r\n    // }\r\n    // for (let i = 0; i < filteredRows.length; i++) {\r\n    //   for (const column of columns) {\r\n    //     filteredDataset[column].values[i] = filteredRows[i][column]\r\n    //   }\r\n    // }\r\n\r\n    // console.log({ filteredDataset })\r\n    // // ok we have a filter, let's update the geojson values\r\n    // this.setupJoin(filteredDataset, '_filter', join[0], join[1])\r\n\r\n    // // const filteredBoundaries = [] as any[]\r\n\r\n    //       this.boundaries.forEach(boundary => {\r\n    //         // id can be in root of feature, or in properties\r\n    //         let lookupKey = boundary.properties[joinShapesBy] || boundary[joinShapesBy]\r\n    //         if (!lookupKey) this.$store.commit('error', `Shape is missing property \"${joinShapesBy}\"`)\r\n\r\n    //         // the groupy thing doesn't auto-convert between strings and numbers\r\n    //         let row = groupLookup.get(lookupKey)\r\n    //         if (row == undefined) row = groupLookup.get('' + lookupKey)\r\n\r\n    //         // do we have an answer\r\n    //         boundary.properties.value = row ? sum(row.map((v: any) => v[groupIndex])) : 'N/A'\r\n    //         filteredBoundaries.push(boundary)\r\n    //       })\r\n\r\n    // // centroids\r\n    // const filteredCentroids = [] as any[]\r\n    // this.centroids.forEach(centroid => {\r\n    //   const centroidId = centroid.properties!.id\r\n    //   if (!centroidId) return\r\n\r\n    //   let row = groupLookup.get(centroidId)\r\n    //   if (row == undefined) row = groupLookup.get('' + centroidId)\r\n    //   centroid.properties!.value = row ? sum(row.map((v: any) => v[groupIndex])) : 'N/A'\r\n    //   filteredCentroids.push(centroid)\r\n    // })\r\n\r\n    // this.boundaries = filteredBoundaries\r\n    // this.centroids = filteredCentroids\r\n    // } catch (e) {\r\n    //   console.error('' + e)\r\n    // }\r\n\r\n    async loadBoundaries() {\r\n      let now = Date.now()\r\n\r\n      const shapeConfig =\r\n        this.config.boundaries || this.config.shapes || this.config.geojson || this.config.network\r\n\r\n      if (!shapeConfig) return\r\n\r\n      // shapes could be a string or an object: shape.file=blah\r\n      let filename: string = shapeConfig.file || shapeConfig\r\n\r\n      let featureProperties = [] as any[]\r\n      let boundaries: any[]\r\n\r\n      try {\r\n        this.statusText = 'Loading features...'\r\n\r\n        if (filename.startsWith('http')) {\r\n          // geojson from url!\r\n          boundaries = (await fetch(filename).then(async r => await r.json())).features\r\n          // this.boundaries = boundaries.features\r\n        } else if (filename.toLocaleLowerCase().endsWith('.shp')) {\r\n          // shapefile!\r\n          boundaries = await this.loadShapefileFeatures(filename)\r\n          // this.boundaries = boundaries\r\n        } else {\r\n          // geojson!\r\n          boundaries = (await this.fileApi.getFileJson(`${this.subfolder}/${filename}`)).features\r\n          // this.boundaries = boundaries.features\r\n        }\r\n\r\n        // for a big speedup, move properties to its own nabob\r\n        let hasNoLines = true\r\n        let hasNoPolygons = true\r\n        let hasPoints = false\r\n\r\n        boundaries.forEach(b => {\r\n          // create a new properties object for each row\r\n          const properties = b.properties ?? {}\r\n          // geojson sometimes has \"id\" outside of properties:\r\n          if ('id' in b) properties.id = b.id\r\n          // push this new property object to the featureProperties array\r\n          featureProperties.push(properties)\r\n          // clear out actual feature properties; they are now in featureProperties instead\r\n          b.properties = {}\r\n\r\n          // points?\r\n          if (b.geometry.type == 'Point' || b.geometry.type == 'MultiPoint') {\r\n            hasPoints = true\r\n          }\r\n\r\n          // check if we have linestrings: network mode !\r\n          if (\r\n            hasNoLines &&\r\n            (b.geometry.type == 'LineString' || b.geometry.type == 'MultiLineString')\r\n          ) {\r\n            hasNoLines = false\r\n          }\r\n\r\n          // check if we have polygons: area-map mode !\r\n          if (\r\n            hasNoPolygons &&\r\n            (b.geometry.type == 'Polygon' || b.geometry.type == 'MultiPolygon')\r\n          ) {\r\n            hasNoPolygons = false\r\n          }\r\n        })\r\n\r\n        this.moveLogo()\r\n\r\n        // set feature properties as a data source\r\n        await this.setFeaturePropertiesAsDataSource(filename, [...featureProperties], shapeConfig)\r\n\r\n        // turn ON line borders if it's a SMALL dataset (user can re-enable)\r\n        if (!hasNoLines || boundaries.length < 5000) {\r\n          this.dataLineColors = '#4e79a7'\r\n        }\r\n\r\n        // hide polygon/point buttons and opacity if we have no polygons or we do have points\r\n        if (hasNoPolygons) this.isAreaMode = false\r\n        if (hasPoints) this.isAreaMode = true\r\n\r\n        this.boundaries = boundaries\r\n\r\n        // generate centroids if we have polygons\r\n        if (!hasNoPolygons || hasPoints) {\r\n          await this.generateCentroidsAndMapCenter()\r\n        } else if (this.needsInitialMapExtent) {\r\n          this.calculateAndMoveToCenter()\r\n        }\r\n\r\n        // set features INSIDE react component\r\n        if (REACT_VIEW_HANDLES[1000 + this.layerId]) {\r\n          REACT_VIEW_HANDLES[1000 + this.layerId](this.boundaries)\r\n        }\r\n      } catch (e) {\r\n        console.error(e)\r\n        this.$store.commit('error', '' + e)\r\n        throw Error(`Could not load \"${filename}\"`)\r\n      }\r\n\r\n      if (!this.boundaries) throw Error(`No \"features\" found in shapes file`)\r\n    },\r\n\r\n    async setFeaturePropertiesAsDataSource(\r\n      filename: string,\r\n      featureProperties: any[],\r\n      config: any\r\n    ) {\r\n      const dataTable = await this.myDataManager.setFeatureProperties(\r\n        filename,\r\n        featureProperties,\r\n        config\r\n      )\r\n      this.boundaryDataTable = dataTable\r\n\r\n      const datasetId = filename.substring(1 + filename.lastIndexOf('/'))\r\n      this.datasets[datasetId] = dataTable\r\n\r\n      this.vizDetails.datasets[datasetId] = {\r\n        file: datasetId,\r\n        join: this.datasetJoinColumn,\r\n      } as any\r\n\r\n      this.config.datasets = Object.assign({}, this.vizDetails.datasets)\r\n      // console.log(333, this.vizDetails)\r\n\r\n      // this.myDataManager.addFilterListener({ dataset: datasetId }, this.filterListener)\r\n      // this.figureOutRemainingFilteringOptions()\r\n    },\r\n\r\n    async calculateAndMoveToCenter() {\r\n      let centerLong = 0\r\n      let centerLat = 0\r\n      let numCoords = 0\r\n      const numFeatures = this.boundaries.length\r\n\r\n      for (let idx = 0; idx < numFeatures; idx += 256) {\r\n        const centroid = turf.centerOfMass(this.boundaries[idx])\r\n        if (centroid?.geometry?.coordinates) {\r\n          centerLong += centroid.geometry.coordinates[0]\r\n          centerLat += centroid.geometry.coordinates[1]\r\n          numCoords += 1\r\n        }\r\n      }\r\n\r\n      centerLong /= numCoords\r\n      centerLat /= numCoords\r\n\r\n      console.log('CENTER', centerLong, centerLat)\r\n      if (this.needsInitialMapExtent && !this.vizDetails.center) {\r\n        this.$store.commit('setMapCamera', {\r\n          longitude: centerLong,\r\n          latitude: centerLat,\r\n          center: [centerLong, centerLat],\r\n          bearing: 0,\r\n          pitch: 0,\r\n          zoom: 9,\r\n          initial: true,\r\n        })\r\n        this.needsInitialMapExtent = false\r\n      }\r\n    },\r\n\r\n    async generateCentroidsAndMapCenter() {\r\n      this.statusText = 'Calculating centroids...'\r\n      await this.$nextTick()\r\n      const idField = this.config.shapes.join || 'id'\r\n\r\n      // Find the map center while we're here\r\n      let centerLong = 0\r\n      let centerLat = 0\r\n\r\n      for (const feature of this.boundaries) {\r\n        const centroid = turf.centerOfMass(feature as any)\r\n\r\n        if (!centroid.properties) centroid.properties = {}\r\n\r\n        if (feature.properties[this.config.boundariesLabel]) {\r\n          centroid.properties.label = feature.properties[this.config.boundariesLabel]\r\n        }\r\n\r\n        centroid.properties.id = feature.properties[idField]\r\n        if (centroid.properties.id === undefined) centroid.properties.id = feature[idField]\r\n\r\n        this.centroids.push(centroid)\r\n\r\n        if (centroid.geometry) {\r\n          centerLong += centroid.geometry.coordinates[0]\r\n          centerLat += centroid.geometry.coordinates[1]\r\n        }\r\n      }\r\n\r\n      centerLong /= this.centroids.length\r\n      centerLat /= this.centroids.length\r\n\r\n      console.log('CENTER', centerLong, centerLat)\r\n      if (this.needsInitialMapExtent && !this.vizDetails.center) {\r\n        this.$store.commit('setMapCamera', {\r\n          longitude: centerLong,\r\n          latitude: centerLat,\r\n          center: [centerLong, centerLat],\r\n          bearing: 0,\r\n          pitch: 0,\r\n          zoom: 9,\r\n          initial: true,\r\n        })\r\n        this.needsInitialMapExtent = false\r\n      }\r\n    },\r\n\r\n    async loadShapefileFeatures(filename: string) {\r\n      this.statusText = 'Loading shapefile...'\r\n      console.log('loading', filename)\r\n\r\n      const url = `${this.subfolder}/${filename}`\r\n\r\n      // first, get shp/dbf files\r\n      let geojson: any = {}\r\n      try {\r\n        const shpPromise = this.fileApi.getFileBlob(url)\r\n        const dbfFilename = url\r\n          .replace('.shp', '.dbf')\r\n          .replace('.SHP', '.DBF')\r\n          .replace('.Shp', '.Dbf')\r\n        const dbfPromise = this.fileApi.getFileBlob(dbfFilename)\r\n        await Promise.all([shpPromise, dbfPromise])\r\n\r\n        const shpBlob = await (await shpPromise)?.arrayBuffer()\r\n        const dbfBlob = await (await dbfPromise)?.arrayBuffer()\r\n        if (!shpBlob || !dbfBlob) return []\r\n\r\n        this.statusText = 'Generating shapes...'\r\n\r\n        geojson = await shapefile.read(shpBlob, dbfBlob)\r\n      } catch (e) {\r\n        console.error(e)\r\n        this.$store.commit('error', '' + e)\r\n        return []\r\n      }\r\n\r\n      // geojson.features = geojson.features.slice(0, 10000)\r\n\r\n      // See if there is a .prj file with projection information\r\n      let projection = DEFAULT_PROJECTION\r\n      const prjFilename = url\r\n        .replace('.shp', '.prj')\r\n        .replace('.SHP', '.PRJ')\r\n        .replace('.Shp', '.Prj')\r\n      try {\r\n        projection = await this.fileApi.getFileText(prjFilename)\r\n      } catch (e) {\r\n        // lol we can live without a projection right? ;-O\r\n      }\r\n\r\n      // Allow user to override .PRJ projection with YAML config\r\n      const guessCRS = this.vizDetails.projection || Coords.guessProjection(projection)\r\n\r\n      console.log({ guessCRS })\r\n      // then, reproject if we have a .prj file\r\n      if (guessCRS) {\r\n        this.statusText = 'Projecting coordinates...'\r\n        await this.$nextTick()\r\n        geojson = reproject.toWgs84(geojson, guessCRS, Coords.allEPSGs)\r\n        this.statusText = ''\r\n      }\r\n\r\n      function getFirstPoint(thing: any): any[] {\r\n        if (Array.isArray(thing[0])) return getFirstPoint(thing[0])\r\n        else return [thing[0], thing[1]]\r\n      }\r\n\r\n      // check if we have lon/lat\r\n      const firstPoint = getFirstPoint(geojson.features[0].geometry.coordinates)\r\n      if (Math.abs(firstPoint[0]) > 180 || Math.abs(firstPoint[1]) > 90) {\r\n        // this ain't lon/lat\r\n        const msg = `Coordinates not lon/lat. Try providing ${prjFilename.substring(\r\n          1 + prjFilename.lastIndexOf('/')\r\n        )}`\r\n        this.$store.commit('error', msg)\r\n        this.statusText = msg\r\n        return []\r\n      }\r\n\r\n      // if (this.needsInitialMapExtent && !this.$store.state.viewState.latitude) {\r\n      if (true) {\r\n        // if we don't have a user-specified map center/zoom, focus on the shapefile itself\r\n\r\n        const long = []\r\n        const lat = []\r\n        for (let i = 0; i < geojson.features.length; i += 128) {\r\n          const firstPoint = getFirstPoint(geojson.features[i].geometry.coordinates)\r\n          long.push(firstPoint[0])\r\n          lat.push(firstPoint[1])\r\n        }\r\n        const longitude = long.reduce((x, y) => x + y) / long.length\r\n        const latitude = lat.reduce((x, y) => x + y) / lat.length\r\n\r\n        this.$store.commit('setMapCamera', {\r\n          longitude,\r\n          latitude,\r\n          bearing: 0,\r\n          pitch: 0,\r\n          zoom: 9,\r\n          center: [longitude, latitude],\r\n          initial: true,\r\n        })\r\n      }\r\n\r\n      this.needsInitialMapExtent = false\r\n      return geojson.features as any[]\r\n    },\r\n\r\n    async loadDatasets() {\r\n      const keys = Object.keys(this.vizDetails.datasets)\r\n      for (const key of keys) {\r\n        // don't reload datasets we already loaded\r\n        if (key in this.datasets) continue\r\n\r\n        await this.loadDataset(key)\r\n      }\r\n    },\r\n\r\n    async loadDataset(datasetKey: string) {\r\n      try {\r\n        if (!datasetKey) return\r\n\r\n        // dataset could be  { dataset: myfile.csv }\r\n        //               or  { dataset: { file: myfile.csv, join: TAZ }}\r\n        const datasetFilename =\r\n          'string' === typeof this.config.datasets[datasetKey]\r\n            ? this.config.datasets[datasetKey]\r\n            : this.config.datasets[datasetKey].file\r\n\r\n        this.statusText = `Loading dataset ${datasetFilename} ...`\r\n\r\n        await this.$nextTick()\r\n\r\n        let loaderConfig = { dataset: datasetFilename }\r\n        if ('string' !== typeof this.config.datasets[datasetKey]) {\r\n          loaderConfig = Object.assign(loaderConfig, this.config.datasets[datasetKey])\r\n        }\r\n\r\n        // save the filename and key for later lookups\r\n        this.datasetKeyToFilename[datasetKey] = datasetFilename\r\n\r\n        const dataset = await this.myDataManager.getDataset(loaderConfig)\r\n\r\n        // figure out join - use \".join\" or first column key\r\n        const joiner =\r\n          'string' === typeof this.config.datasets[datasetKey]\r\n            ? Object.keys(dataset.allRows)[0]\r\n            : this.config.datasets[datasetKey].join\r\n\r\n        const joinColumns = joiner?.split(':') || []\r\n\r\n        // if join is oldstyle \"dataCol:FeatureID\" the set the featureCol\r\n        if (joinColumns.length == 2) this.featureJoinColumn = joinColumns[0]\r\n        // TODO if join is one column then really we should just ignore it but for now...\r\n        if (joinColumns.length == 1) joinColumns.push(joinColumns[0])\r\n\r\n        // save it!\r\n        this.datasets[datasetKey] = dataset.allRows\r\n\r\n        await this.$nextTick()\r\n\r\n        // Set up filters -- there could be some in YAML already\r\n        this.myDataManager.addFilterListener({ dataset: datasetFilename }, this.processFiltersNow)\r\n        this.activateFiltersForDataset(datasetKey)\r\n      } catch (e) {\r\n        const msg = '' + e\r\n        console.error(msg)\r\n        this.$store.commit('error', msg)\r\n      }\r\n      return []\r\n    },\r\n\r\n    activateFiltersForDataset(datasetKey: string) {\r\n      const filters = this.filterDefinitions.filter(f => f.dataset === datasetKey)\r\n\r\n      for (const filter of filters) {\r\n        console.log(3, JSON.stringify(filter))\r\n        // if user selected a @categorical, just add it to the thingy\r\n        if (filter.value == '@categorical') {\r\n          if (this.filters[filter.column]) {\r\n            filter.value = this.filters[filter.column].active\r\n          } else {\r\n            this.handleUserCreatedNewFilter(`${datasetKey}:${filter.column}`)\r\n          }\r\n        } else {\r\n          // actually filter the data\r\n          this.myDataManager.setFilter(\r\n            Object.assign(filter, { dataset: this.datasetKeyToFilename[datasetKey] })\r\n          )\r\n        }\r\n      }\r\n    },\r\n\r\n    filterLabel(filter: string) {\r\n      let label = this.filters[filter].active.join(',').substring(0, 50) || 'Select...'\r\n      if (label.length === 50) label += '...'\r\n      return label\r\n    },\r\n\r\n    async handleUserSelectedNewMetric() {\r\n      // console.log('> handleUserSelectedNewMetric')\r\n      await this.$nextTick()\r\n      console.log('METRIC', this.datasetValuesColumn)\r\n\r\n      const query = Object.assign({}, this.$route.query)\r\n      query.display = this.datasetValuesColumn\r\n      this.$router.replace({ query })\r\n\r\n      this.maxValue = this.boundaryDataTable[this.datasetValuesColumn].max || 0\r\n      console.log('MAXVALUE', this.maxValue)\r\n\r\n      this.vizDetails.display.fill.columnName = this.datasetValuesColumn\r\n      this.vizDetails = Object.assign({}, this.vizDetails)\r\n      this.processFiltersNow()\r\n    },\r\n\r\n    handleUserSelectedNewFilters(column: string) {\r\n      const filter = this.filters[column]\r\n      const active = filter.active\r\n\r\n      this.myDataManager.setFilter({\r\n        dataset: this.datasetKeyToFilename[filter.dataset], // || datasetFilename,\r\n        column,\r\n        invert: false,\r\n        value: active, // '', // <-- what should this be?\r\n      })\r\n\r\n      // update URL too\r\n      const queryFilters = Object.assign({}, this.$route.query)\r\n      for (const filter of Object.entries(this.filters)) {\r\n        if (filter[1].active.length) {\r\n          queryFilters[filter[0]] = filter[1].active.join(',')\r\n        } else {\r\n          delete queryFilters[filter[0]]\r\n        }\r\n      }\r\n      // only update if query actually changed\r\n      if (JSON.stringify(this.$route.query) !== JSON.stringify(queryFilters)) {\r\n        this.$router.replace({ query: queryFilters })\r\n      }\r\n    },\r\n\r\n    showCircles(show: boolean) {\r\n      this.useCircles = show\r\n\r\n      const query = Object.assign({}, this.$route.query)\r\n      if (show) query.show = 'dots'\r\n      else delete query.show\r\n      this.$router.replace({ query })\r\n    },\r\n\r\n    handleUserCreatedNewFilter(selectedColumn?: string) {\r\n      const selection = selectedColumn || this.chosenNewFilterColumn\r\n      const [dataset, column] = selection.split(':')\r\n\r\n      let options = [...new Set(this.datasets[dataset][column].values)]\r\n      this.chosenNewFilterColumn = ''\r\n\r\n      if (options.length > 48) {\r\n        alert(`Column ${column} has too many values to be used as a filter.`)\r\n        return\r\n      }\r\n      this.filters[column] = { column, label: column, options, active: [], dataset }\r\n    },\r\n\r\n    updateChart() {\r\n      // boundaryDataTable come back as an object of columnName: values[].\r\n      // We need to make a lookup of the values by ID, and then\r\n      // insert those values into the boundaries geojson.\r\n\r\n      // console.log(this.config)\r\n      // console.log(this.datasets)\r\n      if (!this.config.display || !this.config.datasets) return\r\n\r\n      let joinShapesBy = 'id'\r\n\r\n      if (this.config.shapes?.join) joinShapesBy = this.config.shapes.join\r\n      // throw Error('Need \"join\" property to link shapes to datasets')\r\n\r\n      const datasetJoinCol = this.datasetJoinColumn // used to be this.config.display.fill.join\r\n      if (!datasetJoinCol) {\r\n        console.error(`No join column ${datasetJoinCol}`)\r\n        return\r\n      }\r\n\r\n      // value columns should be an array but might not be there yet\r\n      let valueColumns = this.config.display.fill.values\r\n      if (!valueColumns) {\r\n        this.statusText = ''\r\n        throw Error(`Need to specify column for data values`)\r\n      }\r\n\r\n      // Display values from query param if available, or config, or first option.\r\n      if (this.$route.query.display) this.config.display.fill.columnName = this.$route.query.display\r\n      let datasetValuesCol = this.config.display.fill.columnName || valueColumns[0]\r\n\r\n      this.datasetValuesColumn = datasetValuesCol\r\n      // this.datasetValuesColumnOptions = valueColumns\r\n\r\n      // this.setupFilters()\r\n\r\n      // 1. build the data lookup for each key in the dataset.\r\n      //    There is often more than one row per key, so we will\r\n      //    create an array for the group now, and (sum) them in step 2 below\r\n      const joinCol = this.boundaryDataTable[datasetJoinCol].values\r\n      const dataValues = this.boundaryDataTable[datasetValuesCol].values\r\n      const groupLookup = group(zip(joinCol, dataValues), d => d[0]) // group by join key\r\n\r\n      let max = 0\r\n\r\n      // 2. insert values into geojson\r\n      for (let idx = 0; idx < this.boundaries.length; idx++) {\r\n        const boundary = this.boundaries[idx]\r\n        const centroid = this.centroids[idx]\r\n\r\n        // id can be in root of feature, or in properties\r\n        let lookupValue = boundary[joinShapesBy]\r\n        if (lookupValue == undefined) lookupValue = boundary.properties[joinShapesBy]\r\n\r\n        if (lookupValue === undefined) {\r\n          this.$store.commit('error', `Shape is missing property \"${joinShapesBy}\"`)\r\n        }\r\n\r\n        // SUM the values of the second elements of the zips from (1) above\r\n        const row = groupLookup.get(lookupValue)\r\n        if (row) {\r\n          boundary.properties.value = sum(row.map(v => v[1]))\r\n          max = Math.max(max, boundary.properties.value)\r\n        } else {\r\n          boundary.properties.value = 'N/A'\r\n        }\r\n\r\n        // update the centroid too\r\n        if (centroid) centroid.properties!.value = boundary.properties.value\r\n      }\r\n\r\n      // this.maxValue = max // this.boundaryDataTable[datasetValuesCol].max || 0\r\n      this.maxValue = this.boundaryDataTable[datasetValuesCol].max || 0\r\n\r\n      // // 3. insert values into centroids\r\n      // this.centroids.forEach(centroid => {\r\n      //   const centroidId = centroid.properties!.id\r\n      //   if (!centroidId) return\r\n\r\n      //   let row = groupLookup.get(centroidId)\r\n      //   if (row === undefined) row = groupLookup.get(parseInt(centroidId))\r\n      //   centroid.properties!.value = row ? sum(row.map(v => v[1])) : 'N/A'\r\n      // })\r\n\r\n      // sort them so big bubbles are below small bubbles\r\n      this.centroids = this.centroids.sort((a: any, b: any) =>\r\n        a.properties.value > b.properties.value ? -1 : 1\r\n      )\r\n      this.activeColumn = 'value'\r\n    },\r\n\r\n    clearData() {\r\n      // these lines change the properties of these objects\r\n      // WITHOUT reassigning them to new objects; this is\r\n      // essential for the garbage-collection to work properly.\r\n      // Otherwise we get a 500Mb memory leak on every view :-D\r\n      this.boundaries = []\r\n      this.centroids = []\r\n      this.boundaryDataTable = {}\r\n      this.boundaryFilters = new Float32Array(0)\r\n      this.datasets = {}\r\n      this.dataFillColors = '#888'\r\n      this.dataLineColors = ''\r\n      this.dataLineWidths = 1\r\n      this.dataPointRadii = 5\r\n      this.dataFillHeights = 0\r\n      this.dataCalculatedValues = null\r\n      this.dataCalculatedValueLabel = ''\r\n    },\r\n  },\r\n\r\n  async mounted() {\r\n    try {\r\n      // EMBED MODE?\r\n      this.setEmbeddedMode()\r\n\r\n      this.clearData()\r\n      await this.getVizDetails()\r\n      if (this.vizDetails.center && typeof this.vizDetails.center === 'string') {\r\n        this.vizDetails.center = this.vizDetails.center\r\n          //@ts-ignore\r\n          .split(',')\r\n          .map((coord: any) => parseFloat(coord))\r\n        this.config.center = this.config.center.split(',').map((coord: any) => parseFloat(coord))\r\n      }\r\n\r\n      this.buildThumbnail()\r\n      if (this.thumbnail) return\r\n\r\n      this.buildOldJoinLookups()\r\n\r\n      this.filterDefinitions = this.parseFilterDefinitions(this.vizDetails.filters)\r\n\r\n      this.setupLogoMover()\r\n\r\n      if (this.needsInitialMapExtent && this.vizDetails.center) {\r\n        this.$store.commit('setMapCamera', {\r\n          center: this.vizDetails.center,\r\n          zoom: this.vizDetails.zoom || 9,\r\n          bearing: this.vizDetails.bearing || 0,\r\n          pitch: this.vizDetails.pitch || 0,\r\n          longitude: this.vizDetails.center ? this.vizDetails.center[0] : 0,\r\n          latitude: this.vizDetails.center ? this.vizDetails.center[1] : 0,\r\n          initial: true,\r\n        })\r\n        this.needsInitialMapExtent = false\r\n      }\r\n\r\n      this.expColors = this.config.display?.fill?.exponentColors\r\n      this.dataFillColors = globalStore.state.isDarkMode ? '#44445580' : '#dddddd80'\r\n\r\n      // convert values to arrays as needed\r\n      if (!this.config.display.fill) this.config.display.fill = {}\r\n\r\n      if (this.config.display?.fill?.values) {\r\n        this.config.display.fill.values = this.convertCommasToArray(this.config.display.fill.values)\r\n      }\r\n\r\n      // load the boundaries first, then the dataset.\r\n      // Need boundaries first so we can build the lookups!\r\n      await this.loadBoundaries()\r\n      this.filterShapesNow()\r\n\r\n      this.isLoaded = true\r\n      this.$emit('isLoaded')\r\n\r\n      await this.loadDatasets()\r\n\r\n      // Check URL query parameters\r\n\r\n      this.datasets = Object.assign({}, this.datasets)\r\n      this.config.datasets = JSON.parse(JSON.stringify(this.datasets))\r\n      this.vizDetails = Object.assign({}, this.vizDetails)\r\n\r\n      this.honorQueryParameters()\r\n\r\n      this.statusText = ''\r\n\r\n      // Ask for shapes feature ID if it's not obvious/specified already\r\n      this.featureJoinColumn = await this.figureOutFeatureIdColumn()\r\n    } catch (e) {\r\n      this.$store.commit('error', 'Mapview ' + e)\r\n    }\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // MUST delete the React view handles to prevent gigantic memory leaks!\r\n    delete REACT_VIEW_HANDLES[this.layerId]\r\n\r\n    if (REACT_VIEW_HANDLES[1000 + this.layerId]) {\r\n      REACT_VIEW_HANDLES[1000 + this.layerId]([])\r\n      delete REACT_VIEW_HANDLES[1000 + this.layerId]\r\n    }\r\n\r\n    this.clearData()\r\n    this.legendStore.clear()\r\n    this.resizer?.disconnect()\r\n\r\n    this.myDataManager.removeFilterListener(this.config, this.processFiltersNow)\r\n    // this.myDataManager.clearCache()\r\n    this.$store.commit('setFullScreen', false)\r\n  },\r\n})\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.map-layout {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: $thumbnailHeight;\r\n  background: url('assets/thumbnail.jpg') no-repeat;\r\n  background-size: cover;\r\n  z-index: -1;\r\n}\r\n\r\n.map-layout.hide-thumbnail {\r\n  background: unset;\r\n  z-index: 0;\r\n}\r\n\r\n.area-map {\r\n  position: relative;\r\n  flex: 1;\r\n  background-color: var(--bgBold);\r\n}\r\n\r\n.config-bar {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: 0.5rem;\r\n  padding: 0.25rem 0rem 0.5rem 0.5rem;\r\n  background-color: var(--bgPanel);\r\n  z-index: 9;\r\n  opacity: 0.93;\r\n  input.slider {\r\n    margin: auto 0 0.5rem auto;\r\n    width: 8rem;\r\n  }\r\n\r\n  .map-type-buttons {\r\n    margin: auto 0 0 0.5rem;\r\n  }\r\n\r\n  .img-button {\r\n    margin: 0 0rem -5px 0.5rem;\r\n    height: 2.3rem;\r\n    width: 2.3rem;\r\n    border: var(--borderThin);\r\n    border-radius: 4px;\r\n  }\r\n  .img-button:hover {\r\n    border: 2px solid var(--linkHover);\r\n  }\r\n}\r\n\r\n.config-bar.is-disabled {\r\n  pointer-events: none;\r\n  opacity: 0.5;\r\n}\r\n\r\n.filter {\r\n  margin-right: 0.5rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n.filter p {\r\n  margin: -0.25rem 0 0 0;\r\n  font-weight: bold;\r\n}\r\n\r\n.title-panel {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  padding: 0 1rem 0.25rem 2rem;\r\n  background-color: var(--bgPanel);\r\n  filter: $filterShadow;\r\n  z-index: 2;\r\n}\r\n\r\n.status-bar {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 200;\r\n  background-color: var(--bgPanel2);\r\n  padding: 1rem 1rem;\r\n  font-size: 1.1rem;\r\n  margin-bottom: 6px;\r\n  border: 1px solid var(--);\r\n}\r\n\r\n.right {\r\n  margin-left: auto;\r\n}\r\n\r\n.details-panel {\r\n  text-align: left;\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  background-color: var(--bgPanel);\r\n  display: flex;\r\n  filter: $filterShadow;\r\n  flex-direction: row;\r\n  margin: 0.5rem;\r\n  padding: 0.25rem 0.5rem;\r\n  // width: 15rem;\r\n  font-size: 0.8rem;\r\n  color: var(--bold);\r\n  opacity: 0.95;\r\n  max-height: 75%;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  white-space: nowrap;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n}\r\n</style>\r\n","\r\n.map-layout(:class=\"{'hide-thumbnail': !thumbnail}\"\r\n            :style='{\"background\": urlThumbnail}'\r\n            oncontextmenu=\"return false\")\r\n\r\n  .status-bar(v-show=\"statusText\") {{ statusText }}\r\n\r\n  modal-id-column-picker(v-if=\"showJoiner\"\r\n    v-bind=\"datasetJoinSelector\"\r\n    @join=\"cbDatasetJoined\"\r\n  )\r\n\r\n  .area-map(v-if=\"!thumbnail\" :id=\"`container-${layerId}`\")\r\n    //- drawing-tool.draw-tool(v-if=\"isLoaded && !thumbnail\")\r\n\r\n    geojson-layer(v-if=\"!needsInitialMapExtent\"\r\n      :viewId=\"layerId\"\r\n      :fillColors=\"dataFillColors\"\r\n      :featureDataTable=\"boundaryDataTable\"\r\n      :lineColors=\"dataLineColors\"\r\n      :lineWidths=\"dataLineWidths\"\r\n      :fillHeights=\"dataFillHeights\"\r\n      :screenshot=\"triggerScreenshot\"\r\n      :calculatedValues=\"dataCalculatedValues\"\r\n      :calculatedValueLabel=\"dataCalculatedValueLabel\"\r\n      :normalizedValues=\"dataNormalizedValues\"\r\n      :featureFilter=\"boundaryFilters\"\r\n      :opacity=\"sliderOpacity\"\r\n      :pointRadii=\"dataPointRadii\"\r\n      :tooltip=\"vizDetails.tooltip\"\r\n      :cbTooltip=\"cbTooltip\"\r\n    )\r\n    //- :features=\"useCircles ? centroids: boundaries\"\r\n\r\n    //- background-map-on-top(v-if=\"isLoaded\")\r\n\r\n    viz-configurator(v-if=\"isLoaded\"\r\n      :embedded=\"isEmbedded\"\r\n      :sections=\"configuratorSections\"\r\n      :fileSystem=\"fileSystem\"\r\n      :subfolder=\"subfolder\"\r\n      :yamlConfig=\"generatedExportFilename\"\r\n      :vizDetails=\"vizDetails\"\r\n      :datasets=\"datasets\"\r\n      :legendStore=\"legendStore\"\r\n      :filterDefinitions=\"currentUIFilterDefinitions\"\r\n      @update=\"changeConfiguration\"\r\n      @screenshot=\"takeScreenshot\"\r\n    )\r\n\r\n    .details-panel(v-if=\"tooltipHtml && !statusText\" v-html=\"tooltipHtml\")\r\n\r\n  zoom-buttons(v-if=\"isLoaded && !thumbnail\")\r\n\r\n  .config-bar(v-if=\"!thumbnail && !isEmbedded && isLoaded && Object.keys(filters).length\"\r\n    :class=\"{'is-standalone': !configFromDashboard, 'is-disabled': !isLoaded}\")\r\n\r\n    //- Filter pickers\r\n    .filter(v-for=\"filter in Object.keys(filters)\")\r\n      p {{ filter }}\r\n      b-dropdown(\r\n        v-model=\"filters[filter].active\"\r\n        :scrollable=\"filters[filter].active.length > 10\"\r\n        max-height=\"250\"\r\n        multiple\r\n        @change=\"handleUserSelectedNewFilters(filter)\"\r\n        aria-role=\"list\" :mobile-modal=\"false\" :close-on-click=\"true\"\r\n      )\r\n        template(#trigger=\"{ active }\")\r\n          b-button.is-primary(\r\n            :type=\"filters[filter].active.length ? '' : 'is-outlined'\"\r\n            :label=\"filterLabel(filter)\"\r\n          )\r\n\r\n        b-dropdown-item(v-for=\"option in filters[filter].options\"\r\n          :key=\"option\" :value=\"option\" aria-role=\"listitem\") {{ option }}\r\n\r\n    //- .map-type-buttons(v-if=\"isAreaMode\")\r\n    //-   img.img-button(@click=\"showCircles(false)\" src=\"../../assets/btn-polygons.jpg\" title=\"Shapes\")\r\n    //-   img.img-button(@click=\"showCircles(true)\" src=\"../../assets/btn-circles.jpg\" title=\"Circles\")\r\n\r\n"],"names":["transpose","matrix","n","i","m","min","length","j","row","d","zip","proj4","require$$0","isXY","list","traverseCoords","coordinates","callback","coord","clone","obj","copy","attr","traverseGeoJson","geometryCb","nodeCb","geojson","r","self","detectCrs","projs","crsInfo","crs","determineCrs","calcBbox","max","_gj","xy","reproject","from","to","transformFunc","transform","coords","transformed","transformGeometryCoords","gj","transformBbox","reproject_1","isHighSurrogate","codePoint","isLowSurrogate","truncate","getLength","string","byteLength","charLength","curByteLength","segment","browser","prevCodePoint","require$$1","illegalRe","controlRe","reservedRe","windowsReservedRe","windowsTrailingRe","sanitize","input","replacement","sanitized","sanitizeFilename","options","output","forwardProps","layer","mapping","transitions","updateTriggers","result","sourceKey","targetKey","value","OFFSET_TYPE","LINE_LAYER","PathOffsetLayer","GeojsonOffsetLayer","GeoJsonLayer","props","extruded","stroked","layerProps","polygonStrokeLayerId","lineStringsLayerId","PolygonStrokeLayer","LineStringsLayer","forwardedProps","savePNG","backgroundCanvas","deckLayerImage","backgroundImage","layerData","mergedImage","mergeImageURIs","element","resolve","reject","canvas","dataURL","add2canvas","ctx","boxLeft","boxTop","image","screenshots","Component","viewId","fillColors","lineColors","lineWidths","fillHeights","calculatedValues","calculatedValueLabel","normalizedValues","opacity","pointRadii","screenshot","featureDataTable","featureFilter","Float32Array","tooltip","cbTooltip","features","setFeatures","useState","viewState","setViewState","globalStore","state","screenshotCount","setScreenshot","_mapRef","useRef","REACT_VIEW_HANDLES","fullCopy","map","feature","f","type","geometry","JSON","parse","stringify","properties","id","isTakingScreenshot","cbFillColor","color","rgb","g","b","o","index","isStroked","cbLineColor","push","_","_hide","cbLineWidth","cbPointRadius","cbFillHeight","handleViewState","view","latitude","center","longitude","commit","handleClick","console","log","truncateFractionalPart","precision","printValue","includes","indexOf","lastIndexOf","test","substring","PRECISION","getTooltip","object","propList","label","cLabel","startsWith","datasetProps","featureTips","Object","entries","tipKey","tipValue","columns","keys","tip","featureProps","forEach","column","values","html","join","data","getLineWidth","getLineColor","getFillColor","getPointRadius","getElevation","autoHighlight","highlightColor","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","getOffset","OFFSET_DIRECTION","RIGHT","pickable","pointRadiusUnits","pointRadiusMinPixels","useDevicePixels","fp64","getFilterValue","parameters","depthTest","glOptions","preserveDrawingBuffer","extensions","DataFilterExtension","filterSize","filterRange","deckInstance","React","createElement","DeckGL","layers","controller","pickingRadius","onClick","onViewStateChange","e","getCursor","isDragging","isHovering","onAfterRender","current","getMap","_canvas","StaticMap","mapStyle","getters","mapboxApiAccessToken","MAPBOX_TOKEN","defineComponent","viz","mapCamera","styles","maplibregl","baubles","elem","bearing","zoom","pitch","ColorScheme","render","_vm","_h","_c","staticRenderFns","i18n","ID_GUESSES","__vue2_script","guess","found","$event","MyComponent","BackgroundMapOnTop","GeojsonLayer","ModalIdColumnPicker","VizConfigurator","ZoomButtons","DrawingTool","LegendStore","DashboardDataManager","HTTPFileSystem","svnProject","a","filename","Sanitize","_a","deckmap","logo","right","datasetId","shapeFilters","isLTGT","filter","spec","conditional","v","numericString","fullSpecification","dataColumnValues","checkFilterValue","actualValue","includeElement","filterValue","filterDefs","filters","filterSpecs","dataset","filterDefinition","datasetKeys","firstDatasetKey","firstDataset","columnNames","queryFilters","text","thing","emptyState","ycfg","title","t","oldJoinFieldPerDataset","colon","shapeJoinField","section","details","blob","buffer","readBlob","base64","arrayBufferToBase64","name","config","YAML","err","message","vizes","key","dataTable","datasetFilename","dataJoinColumn","lookupColumn","DataType","lookupValues","boundaryOffsets","relevantTips","Status","featureOffset","joinColumn","boundaryLookupColumnValues","oldFilters","deletedFilter","dot","query","newDefinitions","datasetKey","columnName","key1","dataset1","key2","dataset2","relative","lookup1","lookup2","dataCol1","dataCol2","normalColumn","normalLookup","array","legend","ColorWidthSymbologizer","currentDefinition","fillOrFilteredDataTable","isFillColorDefinition","isFilterTable","filteredRows","selectedDataset","dataColumn","colorOrFilteredDataTable","isColorDefinition","colors","hasCategory","lineWidth","variableConstantWidth","width","height","heights","angledView","radiusOptions","radius","click","x","y","featureDataset","availableColumns","boundaryProperties","datasetName","filteredDataTable","columnId","_b","shapeConfig","featureProperties","boundaries","hasNoLines","hasNoPolygons","hasPoints","centerLong","centerLat","numCoords","numFeatures","idx","centroid","turf.centerOfMass","idField","url","shpPromise","dbfFilename","dbfPromise","shpBlob","dbfBlob","shapefile.read","projection","DEFAULT_PROJECTION","prjFilename","guessCRS","Coords","getFirstPoint","firstPoint","msg","long","lat","loaderConfig","joiner","joinColumns","active","show","selectedColumn","selection","joinShapesBy","datasetJoinCol","valueColumns","datasetValuesCol","joinCol","dataValues","groupLookup","group","boundary","lookupValue","sum","_d","_ref","$$v","option"],"mappings":"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"}