import{g as v,S as g}from"./index.1d7144b8.js";import{H as p}from"./HTTPFileSystem.33aea9ff.js";import{f as k}from"./util.5fe75924.js";import{W as R}from"./RoadNetworkLoader.worker.655695af.js";import{I as S}from"./index.5877f313.js";function y(d){return d}function C(d,...t){return b(d,y,y,t)}function D(d,t,...e){return b(d,y,t,e)}function b(d,t,e,s){return function i(a,o){if(o>=s.length)return e(a);const l=new S,n=s[o++];let u=-1;for(const r of a){const c=n(r,++u,a),f=l.get(c);f?f.push(r):l.set(c,[r])}for(const[r,c]of l)l.set(r,i(c,o));return t(l)}(d,0)}function F(){return new Worker("/assets/DataFetcher.worker.385ae5d4.js",{type:"module"})}const O=!!window.showDirectoryPicker,L=!O;class M{constructor(...t){this.files=[],this.threads=[],this.subfolder="",this.root="",this.networks={},this.datasets={},this.root=t.length?t[0]:"",this.subfolder=t.length?t[1]:"",this.fileApi=this._getFileSystem(this.root)}kill(){for(const t of this.threads)t.terminate()}getFilteredDataset(t){return t.dataset in this.datasets?{filteredRows:this.datasets[t.dataset].filteredRows}:{filteredRows:null}}async OLDgetFiltered(t){const e=this.datasets[t.dataset].filteredRows;if(!e)return{filteredRows:null};let s={};if(t.value&&t.groupBy){const o=t.value,l=t.groupBy;s=D(e,n=>n.reduce((u,r)=>u+r[o],0),n=>n[l])}const i=Array.from(s.keys()),a=Array.from(s.values());return{filteredRows:{x:i,y:a}}}async getDataset(t,e){try{this.datasets[t.dataset]||(console.log("load:",t.dataset),this.datasets[t.dataset]={dataset:this._fetchDataset(t,e),activeFilters:{},filteredRows:null,filterListeners:new Set});let s=await this.datasets[t.dataset].dataset,i={...s};return t.ignoreColumns&&t.ignoreColumns.forEach(a=>{delete i[a]}),t.useLastRow&&Object.keys(i).forEach(a=>{const o=s[a].values;i[a]=o[o.length-1]}),{allRows:i}}catch{return{allRows:{}}}}setFeatureProperties(t,e,s){const i=t.substring(t.lastIndexOf("/")+1);let a={dataset:i};return typeof s!="string"&&(a=Object.assign(a,s)),this.datasets[i]={activeFilters:{},filteredRows:null,filterListeners:new Set,dataset:new Promise((o,l)=>{const n=new F;this.threads.push(n);try{n.postMessage({config:a,featureProperties:e}),n.onmessage=u=>{n.terminate(),u.data.error&&(console.log(u.data.error),v.commit("setStatus",{type:g.ERROR,msg:`Problem loading properties in ${t}`,desc:"File loaded from storage, but properties table could not be parsed"}),l()),o(u.data)}}catch(u){n.terminate(),console.error(u),l(u)}})},this.datasets[i].dataset}setPreloadedDataset(t){this.datasets[t.key]={dataset:new Promise((e,s)=>{e(t.dataTable)}),activeFilters:{},filteredRows:null,filterListeners:new Set}}async getRoadNetwork(t,e,s,i){const a=`/${e}/${t}`;return this.networks[a]||(this.networks[a]=this._fetchNetwork({subfolder:e,filename:t,vizDetails:s,cbStatus:i})),await this.networks[a]}setFilter(t){const{dataset:e,column:s,value:i,invert:a,range:o}=t;if(!this.datasets[e]){console.warn(`${e} doesn't exist yet`),console.warn(Object.keys(this.datasets));return}console.log("> setFilter",e,s,i);const l=Array.isArray(i)?i:[i];this.datasets[e].activeFilters==null&&(this.datasets[e].activeFilters={});const n=this.datasets[e].activeFilters;l.length?n[s]={values:l,invert:a,range:o}:delete n[s],this._updateFilters(e)}addFilterListener(t,e){if(!this.datasets[t.dataset])throw Error("No dataset named: "+t.dataset);this.datasets[t.dataset].filterListeners.add(e)}removeFilterListener(t,e){try{this.datasets[t.dataset].filterListeners&&this.datasets[t.dataset].filterListeners.delete(e)}catch{}}clearCache(){this.kill(),this.datasets={},this.networks={}}async _updateFilters(t){console.log("> updateFilters ",t);const e=this.datasets[t];if(console.log({metaData:e}),!Object.keys(e.activeFilters).length){console.log("no keys"),e.filteredRows=null,this._notifyListeners(t);return}const s=await e.dataset,i=Object.keys(s);let a=[];const o=s[i[0]].values.length;console.log("FILTERS:",e.activeFilters),console.log("TOTLROWS",o);const l=new Array(o).fill(!0),n=/^(<|>)/;for(const[u,r]of Object.entries(e.activeFilters)){const c=s[u];if((r.values[0]===void 0||r.values[0]==="")&&v.commit("error",t+": filter error"),n.test(r.values[0]))r.values[0].startsWith("<=")?(r.conditional="<=",r.values[0]=r.values[0].substring(2).trim()):r.values[0].startsWith(">=")?(r.conditional=">=",r.values[0]=r.values[0].substring(2).trim()):r.values[0].startsWith("<")?(r.conditional="<",r.values[0]=r.values[0].substring(1).trim()):r.values[0].startsWith(">")&&(r.conditional=">",r.values[0]=r.values[0].substring(1).trim());else if(r.values.length===1&&typeof r.values[0]=="string"){const f=parseFloat(r.values[0]);Number.isFinite(f)&&r.values.push(f)}for(let f=0;f<o;f++)P(r,c.values[f])||(l[f]=!1)}for(let u=0;u<o;u++)if(l[u]){const r={};i.forEach(c=>r[c]=s[c].values[u]),a.push(r)}e.filteredRows=a,this._notifyListeners(t)}_notifyListeners(t){const e=this.datasets[t];for(const s of e.filterListeners)s(t)}async _fetchDataset(t,e){if(!this.files.length){const{files:s}=await new p(this.fileApi).getDirectory(this.subfolder);this.files=s}return new Promise((s,i)=>{const a=new F;this.threads.push(a);try{a.postMessage({fileSystemConfig:this.fileApi,subfolder:this.subfolder,files:this.files,config:t,options:e}),a.onmessage=o=>{if(a.terminate(),o.data.error){let l=""+o.data.error;l=l.replace("[object Response]","Error loading file"),(t==null?void 0:t.dataset)&&l.indexOf(t.dataset)===-1&&(l+=`: ${t.dataset}`),v.commit("setStatus",{type:g.ERROR,msg:l,desc:JSON.stringify(t)}),i()}s(o.data)}}catch(o){a.terminate(),console.error(o),i(o)}})}async _fetchNetwork(t){return new Promise(async(e,s)=>{const{subfolder:i,filename:a,vizDetails:o,cbStatus:l}=t,n=`/${i}/${a}`;console.log("load network:",n);let u=n.indexOf("/")>-1?n.substring(0,n.lastIndexOf("/")):this.subfolder;const{files:r}=await new p(this.fileApi).getDirectory(u);let c=n.indexOf("/")===-1?n:n.substring(n.lastIndexOf("/")+1);k(r,c).length!==1&&s("File not found: "+n);const m=new R;try{m.onmessage=h=>{if(h.data.promptUserForCRS){let w=prompt("Enter the coordinate reference system, e.g. EPSG:25832")||"EPSG:31468";Number.isInteger(parseInt(w))&&(w=`EPSG:${w}`),m.postMessage({crs:w});return}if(h.data.status){l&&l(h.data.status);return}m.terminate(),h.data.error&&(console.error(h.data.error),s(h.data.error)),e(h.data.links)},m.postMessage({filePath:n,fileSystem:this.fileApi,vizDetails:o,isFirefox:L})}catch(h){m.terminate(),console.error(h),s(h)}})}_getFileSystem(t){const e=v.state.svnProjects.filter(s=>s.slug===t);if(e.length===0)throw console.error("DDM: no such project"),Error;return e[0]}}function P(d,t){const e={"<":()=>t<d.values[0],"<=":()=>t<=d.values[0],">":()=>t>d.values[0],">=":()=>t>=d.values[0]};let s;return d.range?s=t>=d.values[0]&&t<=d.values[1]:d.conditional?s=e[d.conditional]():s=d.values.includes(t),d.invert?!s:s}export{M as D,F as W,P as c,C as g,D as r};
//# sourceMappingURL=DashboardDataManager.6cb84912.js.map
