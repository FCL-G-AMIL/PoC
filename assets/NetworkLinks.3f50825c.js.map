{"version":3,"file":"NetworkLinks.3f50825c.js","sources":["../../node_modules/shallow-equal/dist/index.esm.js","../../src/plugins/links-gl/TimeSlider.vue","../../src/plugins/links-gl/TimeSlider.vue?vue&type=template&lang.js","../../src/plugins/links-gl/SelectorPanel.vue","../../src/plugins/links-gl/SelectorPanel.vue?vue&type=template&lang.js","../../src/plugins/links-gl/LinkLayer.tsx","../../src/plugins/links-gl/NetworkLinks.vue","../../src/plugins/links-gl/NetworkLinks.vue?vue&type=template&lang.js"],"sourcesContent":["function shallowEqualObjects(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (!objA || !objB) {\n    return false;\n  }\n\n  var aKeys = Object.keys(objA);\n  var bKeys = Object.keys(objB);\n  var len = aKeys.length;\n\n  if (bKeys.length !== len) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    var key = aKeys[i];\n\n    if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction shallowEqualArrays(arrA, arrB) {\n  if (arrA === arrB) {\n    return true;\n  }\n\n  if (!arrA || !arrB) {\n    return false;\n  }\n\n  var len = arrA.length;\n\n  if (arrB.length !== len) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    if (arrA[i] !== arrB[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport { shallowEqualArrays, shallowEqualObjects };\n","<template lang=\"pug\">\r\n.time-slider-main-content\r\n  vue-slider.time-slider(v-bind=\"timeSlider\" v-model=\"sliderValue\")\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\n\r\nimport VueSlider from 'vue-slider-component'\r\n\r\nexport default defineComponent({\r\n  name: 'TimeSliderLinksGl',\r\n  components: { VueSlider },\r\n  props: {\r\n    useRange: Boolean,\r\n    stops: { type: Array, required: true },\r\n    dropdownValue: String,\r\n  },\r\n  data() {\r\n    return {\r\n      sliderValue: '' as any,\r\n      timeSlider: {\r\n        adsorb: true,\r\n        contained: true,\r\n        data: [] as any[],\r\n        'enable-cross': false,\r\n        height: 8,\r\n        piecewise: true,\r\n        show: false,\r\n        marks: [] as any[],\r\n        minRange: 1,\r\n        processStyle: { backgroundColor: '#00bb5588', borderColor: '#f05b72' },\r\n        sliderStyle: [{ backgroundColor: '#f05b72' }, { backgroundColor: '#3498db' }],\r\n        'tooltip-placement': 'bottom',\r\n      },\r\n    }\r\n  },\r\n  watch: {\r\n    dropdownValue(value) {\r\n      this.sliderValue = value\r\n    },\r\n\r\n    useRange(useIt: boolean) {\r\n      if (useIt) {\r\n        this.sliderValue = [this.stops[0], this.stops[this.stops.length - 1]]\r\n      } else {\r\n        this.sliderValue = [this.stops[0]]\r\n      }\r\n      console.log('changed to: ' + this.sliderValue)\r\n    },\r\n    sliderValue(result: any) {\r\n      this.$emit('change', result)\r\n    },\r\n  },\r\n  mounted() {\r\n    this.sliderValue = this.stops[0] || '...'\r\n    this.timeSlider.data = this.stops\r\n    this.timeSlider.marks = [\r\n      this.stops[0],\r\n      this.stops[Math.floor(this.stops.length / 2)],\r\n      this.stops[this.stops.length - 1],\r\n    ] // this.stops.filter((stop, i) => i % 3 === 0)\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n@import '../../../node_modules/vue-slider-component/theme/default.css';\r\n\r\n.time-slider-main-content {\r\n  padding: 0.5rem 0.25rem 2rem 0.25rem;\r\n  margin: 0 0.2rem;\r\n}\r\n</style>\r\n","\r\n.time-slider-main-content\r\n  vue-slider.time-slider(v-bind=\"timeSlider\" v-model=\"sliderValue\")\r\n","<template lang=\"pug\">\r\n.config-panel\r\n\r\n  //- time-of-day slider\r\n  .panel-item.expand(v-if=\"vizDetails.useSlider && activeColumn\")\r\n    p: b {{ activeColumn }}\r\n\r\n    time-slider.time-slider(\r\n      :useRange='false'\r\n      :stops=\"getColumns()\"\r\n      :dropdownValue=\"activeColumn\"\r\n      @change='handleTimeSliderChanged')\r\n\r\n\r\n  //- Column picker  -- if no slider\r\n  .panel-item(v-if=\"!vizDetails.useSlider\")\r\n    p: b {{ $t('selectColumn') }}\r\n\r\n    .dropdown.is-up.full-width(:class=\"{'is-active': isButtonActive}\")\r\n      .dropdown-trigger\r\n        button.full-width.is-warning.button(:class=\"{'is-loading': !activeColumn}\"\r\n          aria-haspopup=\"true\" aria-controls=\"dropdown-menu-column-selector\"\r\n          @click=\"handleClickDropdown\"\r\n        )\r\n          b {{ buttonTitle }}\r\n          span.icon.is-small: i.fas.fa-angle-down(aria-hidden=\"true\")\r\n\r\n      #dropdown-menu-column-selector.dropdown-menu(role=\"menu\" :style=\"{'max-height':'24rem', 'overflow-y': 'auto', 'border': '1px solid #ccc'}\")\r\n        .dropdown-content\r\n          a.dropdown-item(v-for=\"column in getColumns()\"\r\n            @click=\"handleSelectColumn(column)\") {{ column }}\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {\r\n      selectColumn: 'Data:',\r\n      loading: 'Loading...',\r\n      bandwidths: 'Widths: 1 pixel =:',\r\n      timeOfDay: '',\r\n      colors: 'Colors',\r\n    },\r\n    de: {\r\n      selectColumn: 'Datenmengen:',\r\n      loading: 'Laden...',\r\n      bandwidths: 'Linienbreiten: 1 pixel =:',\r\n      timeOfDay: '',\r\n      colors: 'Farben',\r\n    },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport { debounce } from 'debounce'\r\n\r\nimport globalStore from '@/store'\r\nimport TimeSlider from './TimeSlider.vue'\r\nimport { ColorScheme, DataTable, DataType, LookupDataset } from '@/Globals'\r\n\r\nexport default defineComponent({\r\n  name: 'SelectorPanel',\r\n  i18n,\r\n  components: { TimeSlider },\r\n  props: {\r\n    csvData: { type: Object as PropType<LookupDataset>, required: true },\r\n    scaleWidth: { type: Number, required: true },\r\n    showDiffs: { type: Boolean, required: true },\r\n    vizDetails: { type: Object as PropType<{ useSlider: boolean }>, required: true },\r\n  },\r\n  data() {\r\n    return {\r\n      isButtonActive: false,\r\n      isColorButtonActive: false,\r\n      scaleWidthValue: '',\r\n      debounceScale: {} as any, // (vm: any) => debounce(vm.gotNewScale, 500),\r\n      handleTimeSliderChanged: {} as any,\r\n    }\r\n  },\r\n  computed: {\r\n    activeColumn(): string {\r\n      return this.csvData.activeColumn\r\n    },\r\n    buttonTitle(): string {\r\n      if (!this.activeColumn) return '' + this.$i18n.t('loading')\r\n      return this.activeColumn\r\n    },\r\n  },\r\n  watch: {\r\n    scaleWidth() {\r\n      this.scaleWidthValue = '' + this.scaleWidth\r\n    },\r\n    scaleWidthValue() {\r\n      // if (this.scaleWidth === parseFloat(this.scaleWidthValue)) return\r\n\r\n      if (isNaN(parseFloat(this.scaleWidthValue))) {\r\n        return\r\n      }\r\n      this.debounceScale()\r\n    },\r\n  },\r\n  methods: {\r\n    getColumns() {\r\n      // TODO: drop first column always: it's the link-id...\r\n      const columns = Object.values(this.csvData.dataTable)\r\n        .slice(1)\r\n        .filter(f => f.name && f.type !== DataType.LOOKUP)\r\n        .map(f => f.name)\r\n      return columns\r\n    },\r\n    gotNewScale() {\r\n      // if (this.scaleWidth !== parseFloat(this.scaleWidthValue)) {\r\n      //   this.scaleWidthValue = '' + this.scaleWidth\r\n      // }\r\n      this.$emit('scale', parseFloat(this.scaleWidthValue))\r\n    },\r\n\r\n    changeTimeSlider(value: any) {\r\n      console.log('new slider!', value)\r\n      if (value.length && value.length === 1) value = value[0]\r\n\r\n      this.$emit('slider', { dataset: this.csvData, column: value })\r\n    },\r\n\r\n    handleClickDropdown() {\r\n      this.isButtonActive = !this.isButtonActive\r\n    },\r\n\r\n    handleColorRamp(colors: string) {\r\n      console.log(colors)\r\n      this.isColorButtonActive = false\r\n      this.$emit('colors', colors)\r\n    },\r\n\r\n    clearDropdown() {\r\n      console.log('boop')\r\n      this.isButtonActive = false\r\n    },\r\n\r\n    async handleSelectColumn(column: string) {\r\n      console.log('panel: selected', column)\r\n      this.isButtonActive = false\r\n      this.$emit('column', { dataset: this.csvData, column: column })\r\n    },\r\n  },\r\n  mounted() {\r\n    this.debounceScale = debounce(this.gotNewScale, 500)\r\n    this.handleTimeSliderChanged = debounce(this.changeTimeSlider, 250)\r\n    this.scaleWidthValue = '' + this.scaleWidth\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.config-panel {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.full-width {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.panel-item {\r\n  padding-right: 1rem;\r\n}\r\n\r\n.last-item {\r\n  padding-right: 0;\r\n}\r\n\r\np {\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.color-button,\r\n.swap-color {\r\n  width: 8rem;\r\n  height: 32px;\r\n}\r\n\r\n.color-button:hover {\r\n  cursor: pointer;\r\n  box-shadow: 0px 0px 3px 3px rgba(128, 128, 128, 0.3);\r\n}\r\n\r\nbutton:hover {\r\n  box-shadow: 0px 0px 3px 3px rgba(128, 128, 128, 0.3);\r\n}\r\n\r\ninput {\r\n  border: none;\r\n  background-color: var(--bgCream2);\r\n  color: var(--bgDark);\r\n}\r\n\r\n.dropdown {\r\n  overflow: visible;\r\n  // width: 175px;\r\n}\r\n\r\n#dropdown-menu-color-selector {\r\n  background-color: var(--bgBold);\r\n\r\n  p {\r\n    color: #888;\r\n  }\r\n}\r\n\r\n.expand {\r\n  flex: 1;\r\n}\r\n\r\n.time-slider {\r\n  padding-bottom: 1.25rem;\r\n  width: 100%;\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .config-panel {\r\n    flex-direction: column;\r\n  }\r\n}\r\n</style>\r\n","\r\n.config-panel\r\n\r\n  //- time-of-day slider\r\n  .panel-item.expand(v-if=\"vizDetails.useSlider && activeColumn\")\r\n    p: b {{ activeColumn }}\r\n\r\n    time-slider.time-slider(\r\n      :useRange='false'\r\n      :stops=\"getColumns()\"\r\n      :dropdownValue=\"activeColumn\"\r\n      @change='handleTimeSliderChanged')\r\n\r\n\r\n  //- Column picker  -- if no slider\r\n  .panel-item(v-if=\"!vizDetails.useSlider\")\r\n    p: b {{ $t('selectColumn') }}\r\n\r\n    .dropdown.is-up.full-width(:class=\"{'is-active': isButtonActive}\")\r\n      .dropdown-trigger\r\n        button.full-width.is-warning.button(:class=\"{'is-loading': !activeColumn}\"\r\n          aria-haspopup=\"true\" aria-controls=\"dropdown-menu-column-selector\"\r\n          @click=\"handleClickDropdown\"\r\n        )\r\n          b {{ buttonTitle }}\r\n          span.icon.is-small: i.fas.fa-angle-down(aria-hidden=\"true\")\r\n\r\n      #dropdown-menu-column-selector.dropdown-menu(role=\"menu\" :style=\"{'max-height':'24rem', 'overflow-y': 'auto', 'border': '1px solid #ccc'}\")\r\n        .dropdown-content\r\n          a.dropdown-item(v-for=\"column in getColumns()\"\r\n            @click=\"handleSelectColumn(column)\") {{ column }}\r\n\r\n","import React, { useState, useMemo, useEffect } from 'react'\r\nimport DeckGL from '@deck.gl/react'\r\nimport { COORDINATE_SYSTEM } from '@deck.gl/core'\r\n\r\nimport { LineOffsetLayer, OFFSET_DIRECTION } from '@/layers/LineOffsetLayer'\r\n\r\nimport { scaleThreshold, scaleOrdinal } from 'd3-scale'\r\nimport { StaticMap } from 'react-map-gl'\r\nimport { rgb } from 'd3-color'\r\nimport { format } from 'mathjs'\r\n\r\nimport {\r\n  MAPBOX_TOKEN,\r\n  REACT_VIEW_HANDLES,\r\n  DataTableColumn,\r\n  LookupDataset,\r\n  DataType,\r\n} from '@/Globals'\r\nimport globalStore from '@/store'\r\n\r\nexport default function Component({\r\n  viewId = 0,\r\n  links = { source: new Float32Array(), dest: new Float32Array() },\r\n  colorRampType = -1, // -1 undefined, 0 categorical, 1 diffs, 2 sequential\r\n  build = {} as LookupDataset,\r\n  base = {} as LookupDataset,\r\n  widths = {} as LookupDataset,\r\n  widthsBase = {} as LookupDataset,\r\n  newColors = new Uint8Array(),\r\n  newWidths = new Float32Array(),\r\n  dark = false,\r\n  projection = '',\r\n  scaleWidth = 1,\r\n  mapIsIndependent = false,\r\n}) {\r\n  // ------- draw frame begins here -----------------------------\r\n\r\n  const widthDivisor = scaleWidth ? 1 / scaleWidth : 0\r\n\r\n  const [viewState, setViewState] = useState(globalStore.state.viewState)\r\n\r\n  const buildColumn = build.dataTable[build.activeColumn]\r\n  const baseColumn = base.dataTable[base.activeColumn]\r\n  const widthColumn = widths.dataTable[widths.activeColumn]\r\n\r\n  const isCategorical = colorRampType === 0 || buildColumn?.type == DataType.STRING\r\n\r\n  // register setViewState in global view updater so we can respond to external map motion\r\n  REACT_VIEW_HANDLES[viewId] = (view: any) => {\r\n    if (view) {\r\n      setViewState(view)\r\n    } else {\r\n      setViewState(globalStore.state.viewState)\r\n    }\r\n  }\r\n\r\n  function handleClick() {\r\n    console.log('click!')\r\n  }\r\n\r\n  function handleViewState(view: any) {\r\n    setViewState(view)\r\n    view.center = [view.longitude, view.latitude]\r\n\r\n    if (!mapIsIndependent) globalStore.commit('setMapCamera', view)\r\n  }\r\n\r\n  function precise(x: number) {\r\n    return format(x, { lowerExp: -6, upperExp: 6, precision: 5 })\r\n  }\r\n\r\n  function buildTooltipHtml(\r\n    columnBuild: DataTableColumn,\r\n    columnBase: DataTableColumn,\r\n    geoOffset: number\r\n  ) {\r\n    try {\r\n      if (!columnBuild) return null\r\n\r\n      const index = build.csvRowFromLinkRow[geoOffset]\r\n      let value = columnBuild.values[index]\r\n\r\n      if (isCategorical) {\r\n        if (!Number.isFinite(value)) return null\r\n        return `<b>${columnBuild.name}</b><p>${precise(value)}</p>`\r\n      }\r\n\r\n      let html = null\r\n\r\n      if (Number.isFinite(value)) html = `<b>${columnBuild.name}</b><p>Value: ${precise(value)}</p>`\r\n\r\n      const baseIndex = base?.csvRowFromLinkRow[geoOffset]\r\n      if (baseIndex) {\r\n        let baseValue = base ? base.dataTable[columnBase.name].values[baseIndex] : null\r\n        let diff = value - baseValue\r\n        if (Number.isFinite(baseValue)) {\r\n          html += `<p>Base: ${precise(baseValue)}</p>`\r\n          html += `<p>+/- Base: ${precise(diff)}</p>`\r\n        }\r\n      }\r\n\r\n      return html\r\n    } catch (e) {\r\n      return null\r\n    }\r\n  }\r\n\r\n  function getTooltip({ object, index }: { object: any; index: number }) {\r\n    // tooltip will show values for color settings and for width settings.\r\n    // if there is base data, it will also show values and diff vs. base for both color and width.\r\n\r\n    try {\r\n      // tooltip color values ------------\r\n      let tooltip = buildTooltipHtml(buildColumn, baseColumn, index)\r\n\r\n      // tooltip widths------------\r\n      if (widthColumn && widthColumn.name !== buildColumn.name) {\r\n        const widthTip = buildTooltipHtml(\r\n          widthColumn,\r\n          widthsBase.dataTable[widthsBase.activeColumn],\r\n          index\r\n        )\r\n        if (widthTip) tooltip = tooltip ? tooltip + widthTip : widthTip\r\n      }\r\n\r\n      if (!tooltip) return null\r\n\r\n      return {\r\n        html: tooltip,\r\n        style: { color: dark ? '#ccc' : '#223', backgroundColor: dark ? '#2a3c4f' : 'white' },\r\n      }\r\n    } catch (e) {\r\n      console.warn(e)\r\n      return null\r\n    }\r\n  }\r\n\r\n  const coordinateSystem =\r\n    projection == 'Atlantis' ? COORDINATE_SYSTEM.METER_OFFSETS : COORDINATE_SYSTEM.DEFAULT\r\n\r\n  //@ts-ignore\r\n  const layer = new LineOffsetLayer({\r\n    id: 'linkLayer',\r\n    data: {\r\n      length: links.source.length / 2,\r\n      attributes: {\r\n        getSourcePosition: { value: links.source, size: 2 },\r\n        getTargetPosition: { value: links.dest, size: 2 },\r\n        getColor: { value: newColors, size: 4 },\r\n        getWidth: { value: newWidths, size: 1 },\r\n      },\r\n    },\r\n    widthUnits: 'pixels',\r\n    widthScale: widthDivisor,\r\n    widthMinPixels: 0.5,\r\n    widthMaxPixels: 50,\r\n    pickable: true,\r\n    coordinateSystem,\r\n    opacity: 1,\r\n    autoHighlight: true,\r\n    highlightColor: [255, 0, 224],\r\n    offsetDirection: OFFSET_DIRECTION.RIGHT,\r\n    updateTriggers: {\r\n      getSourcePosition: [links.source],\r\n      getTargetPosition: [links.dest],\r\n      getColor: [newColors, dark],\r\n      getWidth: [newWidths],\r\n    },\r\n    transitions: {\r\n      getColor: 250,\r\n      getWidth: 250,\r\n      widthScale: 250,\r\n    },\r\n    parameters: {\r\n      depthTest: false,\r\n    },\r\n  })\r\n\r\n  return (\r\n    /*\r\n    //@ts-ignore */\r\n    <DeckGL\r\n      layers={[layer]}\r\n      viewState={viewState}\r\n      controller={true}\r\n      pickingRadius={5}\r\n      getTooltip={getTooltip}\r\n      getCursor={({ isDragging, isHovering }: any) =>\r\n        isDragging ? 'grabbing' : isHovering ? 'pointer' : 'grab'\r\n      }\r\n      onClick={handleClick}\r\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\r\n    >\r\n      {\r\n        /*\r\n        // @ts-ignore */\r\n        <StaticMap mapStyle={globalStore.getters.mapStyle} mapboxApiAccessToken={MAPBOX_TOKEN} />\r\n      }\r\n    </DeckGL>\r\n  )\r\n}\r\n","<template lang=\"pug\">\r\n.link-volume-plot(:class=\"{'hide-thumbnail': !thumbnail}\"\r\n        :style='{\"background\": urlThumbnail}'\r\n        oncontextmenu=\"return false\")\r\n\r\n  .plot-container(v-if=\"!thumbnail\" :id=\"`container-${linkLayerId}`\")\r\n    link-gl-layer.map-area(\r\n        :viewId=\"linkLayerId\"\r\n        :links=\"geojsonData\"\r\n        :colorRampType=\"colorRampType\"\r\n        :build=\"csvData\"\r\n        :base=\"csvBase\"\r\n        :widths=\"csvWidth\"\r\n        :widthsBase=\"csvWidthBase\"\r\n        :dark=\"isDarkMode\"\r\n        :newColors=\"colorArray\"\r\n        :newWidths=\"widthArray\"\r\n        :scaleWidth=\"scaleWidth\"\r\n        :projection=\"vizDetails.projection\"\r\n        :mapIsIndependent=\"vizDetails.mapIsIndependent\"\r\n    )\r\n\r\n    zoom-buttons(v-if=\"!thumbnail\")\r\n    //- drawing-tool(v-if=\"!thumbnail\")\r\n\r\n    //- color/width/etc panel\r\n    viz-configurator(v-if=\"!thumbnail && isDataLoaded\"\r\n      :vizDetails=\"vizDetails\"\r\n      :datasets=\"datasets\"\r\n      :fileSystem=\"fileSystem\"\r\n      :subfolder=\"myState.subfolder\"\r\n      :yamlConfig=\"yamlConfig\"\r\n      :legendStore=\"legendStore\"\r\n      :filterDefinitions=\"currentUIFilterDefinitions\"\r\n      @update=\"changeConfiguration\")\r\n\r\n    //- .top-panel(v-if=\"vizDetails.title\")\r\n    //-   .panel-item\r\n    //-     h3 {{ vizDetails.title }}\r\n    //-     p {{ vizDetails.description }}\r\n\r\n    .bottom-panel(v-if=\"!thumbnail\")\r\n      .status-message(v-if=\"myState.statusMessage\")\r\n        p {{ myState.statusMessage }}\r\n\r\n      .panel-items(v-show=\"csvWidth.activeColumn\")\r\n\r\n        //- slider/dropdown for selecting column\r\n        .panel-item.config-section\r\n          selector-panel(\r\n            :vizDetails=\"vizDetails\"\r\n            :csvData=\"csvWidth\"\r\n            :scaleWidth=\"scaleWidth\"\r\n            :showDiffs=\"vizDetails.showDifferences\"\r\n            @column=\"handleNewDataColumn\"\r\n            @slider=\"handleNewDataColumn\"\r\n          )\r\n\r\n        //- DIFF checkbox\r\n        .panel-item.diff-section(v-if=\"vizDetails.datasets.csvBase\")\r\n          toggle-button.toggle(:width=\"40\" :value=\"vizDetails.showDifferences\" :sync=\"true\" :labels=\"false\"\r\n            :color=\"{checked: '#4b7cc4', unchecked: '#222'}\"\r\n            @change=\"toggleShowDiffs\")\r\n          p: b {{ $t('showDiffs') }}\r\n\r\n        //- FilterPanel.filter-panel(v-if=\"vizDetails.useSlider\"\r\n        //-   :props=\"csvWidth\"\r\n        //-   @activeColumns=\"handleNewFilter\"\r\n        //- )\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {\r\n      all: 'All',\r\n      colors: 'Colors',\r\n      loading: 'Loading',\r\n      selectColumn: 'Select data column',\r\n      timeOfDay: 'Time of day',\r\n      bandwidths: 'Widths: 1 pixel =',\r\n      showDiffs: 'Show Differences',\r\n    },\r\n    de: {\r\n      all: 'Alle',\r\n      colors: 'Farben',\r\n      loading: 'Wird geladen',\r\n      selectColumn: 'Datenspalte wählen',\r\n      timeOfDay: 'Uhrzeit',\r\n      bandwidths: 'Linienbreiten: 1 pixel =',\r\n      showDiffs: 'Differenzen',\r\n    },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\nimport { ToggleButton } from 'vue-js-toggle-button'\r\nimport { rgb } from 'd3-color'\r\nimport { scaleThreshold, scaleOrdinal } from 'd3-scale'\r\nimport { shallowEqualObjects } from 'shallow-equal'\r\nimport readBlob from 'read-blob'\r\nimport YAML from 'yaml'\r\n\r\nimport globalStore from '@/store'\r\nimport { MAP_STYLES_OFFLINE, DataTableColumn, DataTable, DataType, LookupDataset } from '@/Globals'\r\n// import FilterPanel from './BadFilterPanel.vue'\r\nimport SelectorPanel from './SelectorPanel.vue'\r\nimport LinkGlLayer from './LinkLayer'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\r\nimport VizConfigurator from '@/components/viz-configurator/VizConfigurator.vue'\r\nimport ZoomButtons from '@/components/ZoomButtons.vue'\r\nimport LegendStore from '@/js/LegendStore'\r\nimport Coords from '@/js/Coords'\r\nimport { arrayBufferToBase64 } from '@/js/util'\r\n\r\nimport {\r\n  ColorScheme,\r\n  FileSystem,\r\n  FileSystemConfig,\r\n  VisualizationPlugin,\r\n  Status,\r\n  REACT_VIEW_HANDLES,\r\n} from '@/Globals'\r\n\r\nimport { LineColorDefinition } from '@/components/viz-configurator/LineColors.vue'\r\nimport { LineWidthDefinition } from '@/components/viz-configurator/LineWidths.vue'\r\nimport { DatasetDefinition } from '@/components/viz-configurator/AddDatasets.vue'\r\nimport DashboardDataManager from '@/js/DashboardDataManager'\r\n\r\nconst LOOKUP_COLUMN = '_LINK_OFFSET_'\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'NetworkLinksPlugin',\r\n  i18n,\r\n  components: {\r\n    SelectorPanel,\r\n    DrawingTool,\r\n    LinkGlLayer,\r\n    ToggleButton,\r\n    VizConfigurator,\r\n    ZoomButtons,\r\n  },\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    yamlConfig: String,\r\n    config: Object as any,\r\n    thumbnail: Boolean,\r\n    datamanager: { type: Object as PropType<DashboardDataManager> },\r\n  },\r\n  data() {\r\n    return {\r\n      standaloneYAMLconfig: {\r\n        title: '',\r\n        description: '',\r\n        csvFile: '',\r\n        csvBase: '',\r\n        datasets: {} as { [id: string]: string },\r\n        useSlider: false,\r\n        showDifferences: false,\r\n        shpFile: '',\r\n        dbfFile: '',\r\n        network: '',\r\n        geojsonFile: '',\r\n        projection: '',\r\n        center: null as any,\r\n        zoom: 0,\r\n        widthFactor: null as any,\r\n        thumbnail: '',\r\n        sum: false,\r\n        nodes: '', // SFCTA nodes shapefile\r\n        links: [] as string[], // SFCTA links DBF files\r\n        mapIsIndependent: false,\r\n        display: {\r\n          color: {} as any,\r\n          width: {} as any,\r\n        },\r\n      },\r\n\r\n      YAMLrequirementsLinks: {\r\n        // csvFile: '',\r\n        // network: '',\r\n        // projection: '',\r\n      },\r\n\r\n      // this contains the display settings for this view; it is the View Model.\r\n      // use changeConfiguration to modify this for now (todo: move to state model)\r\n      vizDetails: {\r\n        title: '',\r\n        description: '',\r\n        csvFile: '',\r\n        csvBase: '',\r\n        datasets: {} as { [id: string]: string },\r\n        useSlider: false,\r\n        showDifferences: false,\r\n        shpFile: '',\r\n        dbfFile: '',\r\n        network: '',\r\n        geojsonFile: '',\r\n        projection: '',\r\n        center: null as any,\r\n        zoom: 0,\r\n        widthFactor: null as any,\r\n        thumbnail: '',\r\n        sum: false,\r\n        nodes: '', // SFCTA nodes shapefile\r\n        links: [] as string[], // SFCTA links DBF files\r\n        mapIsIndependent: false,\r\n        display: {\r\n          color: {} as any,\r\n          width: {} as any,\r\n        },\r\n      },\r\n\r\n      currentUIFilterDefinitions: {} as any,\r\n      datasets: {} as { [id: string]: DataTable },\r\n      isButtonActiveColumn: false,\r\n      linkLayerId: `linklayer-${Math.floor(1e12 * Math.random())}` as any,\r\n      scaleWidth: 0,\r\n      numLinks: 0,\r\n      showTimeRange: false,\r\n      legendStore: new LegendStore(),\r\n      geojsonData: {\r\n        source: new Float32Array(),\r\n        dest: new Float32Array(),\r\n        linkIds: [] as any[],\r\n        projection: '',\r\n      },\r\n      fixedColors: ['#4e79a7'],\r\n      myState: {\r\n        statusMessage: '',\r\n        subfolder: '',\r\n        yamlConfig: '',\r\n        thumbnail: false,\r\n      },\r\n\r\n      csvData: {\r\n        datasetKey: '',\r\n        activeColumn: '',\r\n        dataTable: {},\r\n        csvRowFromLinkRow: [],\r\n      } as LookupDataset,\r\n\r\n      csvBase: {\r\n        datasetKey: '',\r\n        activeColumn: '',\r\n        dataTable: {},\r\n        csvRowFromLinkRow: [],\r\n      } as LookupDataset,\r\n\r\n      csvWidth: {\r\n        datasetKey: '',\r\n        activeColumn: '',\r\n        dataTable: {},\r\n        csvRowFromLinkRow: [],\r\n      } as LookupDataset,\r\n\r\n      csvWidthBase: {\r\n        datasetKey: '',\r\n        activeColumn: '',\r\n        dataTable: {},\r\n        csvRowFromLinkRow: [],\r\n      } as LookupDataset,\r\n\r\n      // private linkOffsetLookup: { [id: string]: number } = {}\r\n      isDarkMode: this.$store.state.colorScheme === ColorScheme.DarkMode,\r\n      isDataLoaded: false,\r\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\r\n\r\n      currentWidthDefinition: { columnName: '' } as LineWidthDefinition,\r\n\r\n      // DataManager might be passed in from the dashboard; or we might be\r\n      // in single-view mode, in which case we need to create one for ourselves\r\n      myDataManager: this.datamanager || new DashboardDataManager(this.root, this.subfolder),\r\n\r\n      resizer: undefined as ResizeObserver | undefined,\r\n      dataLoaderWorkers: [] as Worker[],\r\n      csvRowLookupFromLinkRow: {} as { [datasetId: string]: number[] },\r\n\r\n      colorArray: new Uint8Array(),\r\n      widthArray: new Float32Array(),\r\n    }\r\n  },\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    urlThumbnail(): string {\r\n      return this.thumbnailUrl\r\n    },\r\n\r\n    colorRampType(): any {\r\n      const rampType = this.vizDetails.display.color?.colorRamp?.style\r\n      if (rampType === undefined) return -1\r\n      return rampType\r\n    },\r\n\r\n    buttonTitle(): string {\r\n      return this.csvData.activeColumn || 'Loading...'\r\n    },\r\n  },\r\n  watch: {\r\n    '$store.state.viewState'() {\r\n      if (this.vizDetails.mapIsIndependent) return\r\n\r\n      if (!REACT_VIEW_HANDLES[this.linkLayerId]) return\r\n      REACT_VIEW_HANDLES[this.linkLayerId]()\r\n    },\r\n\r\n    '$store.state.colorScheme'() {\r\n      setTimeout(\r\n        () => (this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode),\r\n        100\r\n      )\r\n    },\r\n\r\n    'vizDetails.showDifferences'() {\r\n      this.generateWidthArray()\r\n      this.generateColorArray()\r\n    },\r\n  },\r\n  methods: {\r\n    setDataIsLoaded() {\r\n      this.isDataLoaded = true\r\n    },\r\n    async getVizDetails() {\r\n      const filename = this.myState.yamlConfig\r\n\r\n      const emptyState = {\r\n        showDifferences: false,\r\n        datasets: {} as any,\r\n        display: { color: {} as any, width: {} as any },\r\n      }\r\n\r\n      // are we in a dashboard?\r\n      if (this.config) {\r\n        this.validateYAML()\r\n        this.vizDetails = Object.assign({}, emptyState, this.config)\r\n        return\r\n      }\r\n\r\n      // was a YAML file was passed in?\r\n      if (filename?.endsWith('yaml') || filename?.endsWith('yml')) {\r\n        await this.loadStandaloneYamlConfig()\r\n      }\r\n\r\n      // is this a bare network file? - build vizDetails manually\r\n      if (/(shp|xml|geojson|geo\\.json)(|\\.gz)$/.test(filename)) {\r\n        const title = 'Network: ' + this.myState.yamlConfig // .substring(0, 7 + this.myState.yamlConfig.indexOf('network'))\r\n\r\n        this.vizDetails = Object.assign({}, this.vizDetails, {\r\n          network: this.myState.yamlConfig,\r\n          title,\r\n          description: this.myState.subfolder,\r\n        })\r\n      }\r\n\r\n      const t = this.vizDetails.title ? this.vizDetails.title : filename || 'Network Links'\r\n      this.$emit('title', t)\r\n    },\r\n\r\n    async loadStandaloneYamlConfig() {\r\n      try {\r\n        const filename =\r\n          this.myState.yamlConfig.indexOf('/') > -1\r\n            ? this.myState.yamlConfig\r\n            : this.myState.subfolder + '/' + this.myState.yamlConfig\r\n\r\n        const text = await this.fileApi.getFileText(filename)\r\n        this.standaloneYAMLconfig = Object.assign({}, YAML.parse(text))\r\n        this.validateYAML()\r\n        this.setVizDetails()\r\n      } catch (err) {\r\n        console.error('failed')\r\n        const e = err as any\r\n        // maybe it failed because password?\r\n        if (this.fileSystem.needPassword && e.status === 401) {\r\n          this.$store.commit('requestLogin', this.fileSystem.slug)\r\n        }\r\n      }\r\n    },\r\n\r\n    async validateYAML() {\r\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\r\n\r\n      let configuration: any\r\n\r\n      if (hasYaml) {\r\n        console.log('has yaml')\r\n        configuration = this.standaloneYAMLconfig\r\n      } else {\r\n        console.log('no yaml')\r\n        configuration = this.config\r\n      }\r\n\r\n      for (const key in this.YAMLrequirementsLinks) {\r\n        if (key in configuration === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `YAML file missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsLinks for required keys',\r\n          })\r\n        }\r\n      }\r\n\r\n      if (configuration.zoom < 5 || configuration.zoom > 20) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `Zoom is out of the recommended range `,\r\n          desc: 'Zoom levels should be between 5 and 20. ',\r\n        })\r\n      }\r\n\r\n      const hasGeoJson = !configuration.network && configuration.geojsonFile\r\n      if (hasGeoJson) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `YAML field geojsonFile deprecated`,\r\n          desc: 'Use YAML field network instad. ',\r\n        })\r\n      }\r\n\r\n      if (!configuration.display) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `Display properties not set`,\r\n          desc: 'Standard values are used',\r\n        })\r\n      }\r\n    },\r\n\r\n    setVizDetails() {\r\n      this.vizDetails = Object.assign({}, this.vizDetails, this.standaloneYAMLconfig)\r\n    },\r\n\r\n    async buildThumbnail() {\r\n      if (this.thumbnail && this.vizDetails.thumbnail) {\r\n        try {\r\n          const blob = await this.fileApi.getFileBlob(\r\n            this.myState.subfolder + '/' + this.vizDetails.thumbnail\r\n          )\r\n          const buffer = await readBlob.arraybuffer(blob)\r\n          const base64 = arrayBufferToBase64(buffer)\r\n          if (base64)\r\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n      }\r\n    },\r\n\r\n    toggleShowDiffs() {\r\n      this.vizDetails.showDifferences = !this.vizDetails.showDifferences\r\n    },\r\n\r\n    /**\r\n     * changeConfiguration: is the main entry point for changing the viz model.\r\n     * anything that wants to change colors, widths, data, anthing like that\r\n     * should all pass through this function so the underlying data model\r\n     * is modified properly.\r\n     */\r\n    changeConfiguration(props: {\r\n      color?: LineColorDefinition\r\n      width?: LineWidthDefinition\r\n      dataset?: DatasetDefinition\r\n    }) {\r\n      // console.log(props)\r\n\r\n      if (props['color']) {\r\n        // if (JSON.stringify(props.color) === JSON.stringify(this.vizDetails.display.color)) return\r\n        this.vizDetails = Object.assign({}, this.vizDetails)\r\n        this.vizDetails.display.color = props.color\r\n        this.handleNewColor(props.color)\r\n      }\r\n      if (props['width']) {\r\n        // if (JSON.stringify(props.width) === JSON.stringify(this.vizDetails.display.width)) return\r\n        this.vizDetails = Object.assign({}, this.vizDetails)\r\n        this.vizDetails.display.width = props.width\r\n        this.handleNewWidth(props.width)\r\n      }\r\n      if (props['dataset']) {\r\n        // vizdetails just had the string name, whereas props.dataset contains\r\n        // a fully-build DatasetDefinition, so let's just handle that\r\n        this.handleNewDataset(props.dataset)\r\n      }\r\n    },\r\n\r\n    handleNewFilter(columns: number[]) {\r\n      this.csvData = Object.assign({}, this.csvData, { activeColumn: columns[0] })\r\n      this.csvWidth = Object.assign({}, this.csvWidth, { activeColumn: columns[0] })\r\n\r\n      // // this.timeFilterColumns = columns\r\n      // // give animation 150ms to run\r\n      // setTimeout(() => {\r\n      //   if (columns.length) {\r\n      //     this.csvData = Object.assign({}, this.csvData, { activeColumn: columns[0] })\r\n      //     this.csvWidth = Object.assign({}, this.csvWidth, { activeColumn: columns[0] })\r\n      //   }\r\n      // }, 150)\r\n    },\r\n\r\n    handleNewWidth(width: LineWidthDefinition) {\r\n      // if definition hasn't changed, do nothing\r\n      if (shallowEqualObjects(width, this.currentWidthDefinition)) {\r\n        return\r\n      }\r\n\r\n      const { columnName, dataset, scaleFactor } = width\r\n\r\n      // if dataset is set to None, just set scale to 0 and we're done\r\n      if (!dataset) {\r\n        this.scaleWidth = 0\r\n        return\r\n      }\r\n\r\n      // change scaling factor without recalculating anything:\r\n      if (scaleFactor !== undefined) this.scaleWidth = scaleFactor\r\n\r\n      // if everything else is the same, don't recalculate anything\r\n      let recalculate = true\r\n\r\n      if (!columnName) recalculate = false\r\n\r\n      if (\r\n        width.columnName === this.currentWidthDefinition.columnName &&\r\n        width.dataset === this.currentWidthDefinition.dataset\r\n      ) {\r\n        recalculate = false\r\n      }\r\n\r\n      // save settings\r\n      this.currentWidthDefinition = width\r\n\r\n      // this part takes longer to calculate. only do it if we have to\r\n      if (!recalculate) return\r\n\r\n      const selectedDataset = dataset ? this.datasets[dataset] : this.csvWidth.dataTable\r\n      if (!selectedDataset) return\r\n\r\n      if (this.csvWidth.dataTable !== selectedDataset) {\r\n        this.csvWidth.dataTable = selectedDataset\r\n        this.csvWidth.activeColumn = columnName || ''\r\n        // this.csvWidthBase.dataTable = selectedDataset\r\n        this.csvWidthBase.activeColumn = columnName || ''\r\n      }\r\n\r\n      const dataColumn = selectedDataset[columnName || '']\r\n      if (!dataColumn) {\r\n        const msg = `Width: column \"${columnName}\" not found in dataset \"${this.csvData.datasetKey}\"`\r\n        console.error(msg)\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg,\r\n        })\r\n        return\r\n      }\r\n\r\n      // Tell Vue we have new data\r\n      this.csvWidth = {\r\n        datasetKey: dataset || this.csvWidth.datasetKey,\r\n        dataTable: selectedDataset,\r\n        activeColumn: columnName || '',\r\n        csvRowFromLinkRow: dataset ? this.csvRowLookupFromLinkRow[dataset] : [],\r\n      }\r\n      this.generateWidthArray()\r\n    },\r\n\r\n    handleNewColor(color: LineColorDefinition) {\r\n      this.fixedColors = color.fixedColors\r\n\r\n      const columnName = color.columnName\r\n      if (!columnName) {\r\n        this.generateColorArray()\r\n        return\r\n      }\r\n\r\n      const datasetKey = color.dataset\r\n      const selectedDataset = this.datasets[datasetKey]\r\n      if (!selectedDataset) return\r\n\r\n      if (this.csvData.dataTable !== selectedDataset) {\r\n        this.csvData = {\r\n          datasetKey,\r\n          dataTable: selectedDataset,\r\n          activeColumn: '',\r\n          csvRowFromLinkRow: this.csvRowLookupFromLinkRow[datasetKey],\r\n        }\r\n      }\r\n\r\n      const column = this.csvData.dataTable[columnName]\r\n      if (!column) {\r\n        const msg = `Color: Column \"${columnName}\" not found in dataset \"${this.csvData.datasetKey}\"`\r\n        console.error(msg)\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg,\r\n        })\r\n        return\r\n      }\r\n\r\n      this.csvData.activeColumn = column.name\r\n      this.csvBase.activeColumn = column.name\r\n\r\n      this.isButtonActiveColumn = false\r\n      this.generateColorArray()\r\n    },\r\n\r\n    setMapCenterFromVizDetails() {\r\n      if (typeof this.vizDetails.center == 'string') {\r\n        this.vizDetails.center = this.vizDetails.center.split(',').map(Number)\r\n      }\r\n\r\n      if (!this.vizDetails.zoom) {\r\n        this.vizDetails.zoom = 9\r\n      }\r\n\r\n      this.$store.commit('setMapCamera', {\r\n        longitude: this.vizDetails.center[0],\r\n        latitude: this.vizDetails.center[1],\r\n        bearing: 0,\r\n        pitch: 0,\r\n        zoom: this.vizDetails.zoom,\r\n        jump: false,\r\n      })\r\n\r\n      const view = {\r\n        longitude: this.vizDetails.center[0],\r\n        latitude: this.vizDetails.center[1],\r\n        bearing: 0,\r\n        pitch: 0,\r\n        zoom: this.vizDetails.zoom || 10, // use 10 default if we don't have a zoom\r\n        jump: false, // move the map no matter what\r\n      }\r\n\r\n      // bounce our map\r\n      if (REACT_VIEW_HANDLES[this.linkLayerId]) {\r\n        REACT_VIEW_HANDLES[this.linkLayerId](view)\r\n      }\r\n    },\r\n\r\n    async setMapCenter() {\r\n      if (this.vizDetails.center) return this.setMapCenterFromVizDetails()\r\n\r\n      const data = this.geojsonData\r\n\r\n      if (!data.source.length) return\r\n\r\n      let samples = 0\r\n      let longitude = 0\r\n      let latitude = 0\r\n\r\n      console.log({ projection: this.geojsonData.projection })\r\n\r\n      // figure out the center\r\n      if (this.geojsonData.projection === 'Atlantis') {\r\n        const webMercator =\r\n          '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs'\r\n        const firstPoint = Coords.toLngLat(webMercator, [data.source[0], data.source[1]])\r\n        longitude = firstPoint[0]\r\n        latitude = firstPoint[1]\r\n      } else {\r\n        const numLinks = data.source.length / 2\r\n        const gap = numLinks < 4096 ? 2 : 1024\r\n        for (let i = 0; i < numLinks; i += gap) {\r\n          longitude += data.source[i * 2]\r\n          latitude += data.source[i * 2 + 1]\r\n          samples++\r\n        }\r\n\r\n        longitude = longitude / samples\r\n        latitude = latitude / samples\r\n      }\r\n      console.log('center', longitude, latitude)\r\n\r\n      this.$store.commit('setMapCamera', {\r\n        longitude,\r\n        latitude,\r\n        bearing: 0,\r\n        pitch: 0,\r\n        zoom: 8,\r\n        jump: false,\r\n      })\r\n    },\r\n\r\n    setupLogoMover() {\r\n      this.resizer = new ResizeObserver(this.moveLogo)\r\n      const deckmap = document.getElementById(`container-${this.linkLayerId}`) as HTMLElement\r\n      this.resizer.observe(deckmap)\r\n    },\r\n\r\n    moveLogo() {\r\n      const deckmap = document.getElementById(`container-${this.linkLayerId}`) as HTMLElement\r\n      const logo = deckmap?.querySelector('.mapboxgl-ctrl-bottom-left') as HTMLElement\r\n      if (logo) {\r\n        const right = deckmap.clientWidth > 640 ? '280px' : '36px'\r\n        logo.style.right = right\r\n      }\r\n    },\r\n\r\n    async updateStatus(message: string) {\r\n      this.myState.statusMessage = message\r\n    },\r\n\r\n    async loadNetwork(): Promise<any> {\r\n      if (!this.myDataManager) throw Error('links: no datamanager')\r\n\r\n      this.myState.statusMessage = 'Loading network...'\r\n\r\n      const filename = this.vizDetails.network || this.vizDetails.geojsonFile\r\n      try {\r\n        const network = await this.myDataManager.getRoadNetwork(\r\n          filename,\r\n          this.myState.subfolder,\r\n          this.vizDetails,\r\n          this.updateStatus\r\n        )\r\n\r\n        this.numLinks = network.linkIds.length\r\n        this.geojsonData = network as any\r\n\r\n        // Handle Atlantis: no long/lat coordinates\r\n        if (network.projection == 'Atlantis') {\r\n          this.vizDetails.projection = 'Atlantis'\r\n          this.$store.commit('setMapStyles', MAP_STYLES_OFFLINE)\r\n        }\r\n\r\n        this.setMapCenter() // this could be off main thread\r\n\r\n        this.myState.statusMessage = ''\r\n\r\n        this.moveLogo()\r\n\r\n        this.$emit('isLoaded', true)\r\n\r\n        // then load CSVs in background\r\n        this.loadCSVFiles()\r\n      } catch (e) {\r\n        this.$store.commit('error', '' + e)\r\n        this.$emit('isLoaded')\r\n      }\r\n    },\r\n\r\n    handleNewDataset(props: DatasetDefinition) {\r\n      console.log('NEW dataset', props)\r\n      const { key, dataTable, filename } = props\r\n\r\n      // We need a lookup so we can find the CSV row that matches each link row.\r\n      // A normal hashmap lookup is too slow, so we'll create an array containing\r\n      // the lookup on load (now); then it should be O(1) fast from that point forward.\r\n\r\n      // For now we assume the 1st CSV column always has the link ID\r\n      const columnNames = Object.keys(dataTable)\r\n      const assumedLinkIdIsFirstColumn = columnNames[0]\r\n      const linkIdColumn = dataTable[assumedLinkIdIsFirstColumn]\r\n\r\n      let tempMapLinkIdToCsvRow = {} as any\r\n      for (let csvRow = 0; csvRow < linkIdColumn.values.length; csvRow++) {\r\n        tempMapLinkIdToCsvRow[linkIdColumn.values[csvRow]] = csvRow\r\n      }\r\n\r\n      // Create a LOOKUP array which links this CSV data to the network links\r\n      // loop through all network links, we need the CSV row for each link.\r\n      const getCsvRowNumberFromLinkRowNumber: number[] = []\r\n      for (let linkRow = 0; linkRow < this.geojsonData.linkIds.length; linkRow++) {\r\n        const linkId = this.geojsonData.linkIds[linkRow]\r\n        const csvRow = tempMapLinkIdToCsvRow[linkId]\r\n        if (csvRow !== undefined) getCsvRowNumberFromLinkRowNumber[linkRow] = csvRow\r\n      }\r\n\r\n      // Save the lookup with the dataset.\r\n      this.csvRowLookupFromLinkRow[key] = getCsvRowNumberFromLinkRowNumber\r\n      tempMapLinkIdToCsvRow = {} // probably unnecessary but we def want this to be GC'ed\r\n\r\n      // all done!\r\n      if (filename) this.vizDetails.datasets[key] = filename\r\n      this.datasets = Object.assign({ ...this.datasets }, { [key]: dataTable })\r\n      this.handleDatasetisLoaded(key)\r\n    },\r\n\r\n    generateWidthArray() {\r\n      const numLinks = this.geojsonData.linkIds.length\r\n      const widths = new Float32Array(numLinks)\r\n\r\n      const widthValues = this.csvWidth?.dataTable[this.csvWidth.activeColumn]?.values\r\n      const baseValues = this.csvBase?.dataTable[this.csvBase.activeColumn]?.values\r\n\r\n      const width = (i: number) => {\r\n        const csvRow = this.csvWidth.csvRowFromLinkRow[i]\r\n        const value = widthValues[csvRow]\r\n\r\n        if (this.vizDetails.showDifferences) {\r\n          const baseRow = this.csvBase.csvRowFromLinkRow[i]\r\n          const baseValue = baseValues[baseRow]\r\n          const diff = Math.abs(value - baseValue)\r\n          return diff\r\n        } else {\r\n          return value\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < numLinks; i++) {\r\n        widths[i] = width(i)\r\n      }\r\n      this.widthArray = widths\r\n    },\r\n\r\n    generateColorArray() {\r\n      // deck.gl colors must be in rgb[] or rgba[] format\r\n      const colorsAsRGB: any = this.fixedColors.map(hexcolor => {\r\n        const c = rgb(hexcolor)\r\n        return [c.r, c.g, c.b, 255]\r\n      })\r\n\r\n      // Build breakpoints between 0.0 - 1.0 to match the number of color swatches\r\n      // e.g. If there are five colors, then we need 4 breakpoints: 0.2, 0.4, 0.6, 0.8.\r\n      // An exponent reduces visual dominance of very large values at the high end of the scale\r\n      const exponent = 4.0\r\n      const domain = new Array(this.fixedColors.length - 1)\r\n        .fill(0)\r\n        .map((v, i) => Math.pow((1 / this.fixedColors.length) * (i + 1), exponent))\r\n\r\n      // *scaleOrdinal* is the d3 function that maps categorical variables to colors.\r\n      // *scaleThreshold* is the d3 function that maps numerical values from [0.0,1.0) to the color buckets\r\n      // *range* is the list of colors;\r\n      // *domain* is the list of breakpoints in the 0-1.0 continuum; it is auto-created from data for categorical.\r\n      // *colorRampType* is 0 if a categorical color ramp is chosen\r\n      const buildData = this.csvData.dataTable\r\n      const baseData = this.csvBase.dataTable\r\n      const activeColumn = this.csvData.activeColumn\r\n\r\n      const buildColumn: DataTableColumn = buildData[activeColumn] || { values: [] }\r\n      const baseColumn: DataTableColumn = baseData[activeColumn] || { values: [] }\r\n\r\n      const isCategorical = this.colorRampType === 0 || buildColumn.type == DataType.STRING\r\n      const setColorBasedOnValue: any = isCategorical\r\n        ? scaleOrdinal().range(colorsAsRGB)\r\n        : scaleThreshold().range(colorsAsRGB).domain(domain)\r\n\r\n      const numLinks = this.geojsonData.linkIds.length\r\n      const colors = new Uint8Array(4 * numLinks)\r\n\r\n      const colorPaleGrey = globalStore.state.isDarkMode ? [80, 80, 80, 96] : [212, 212, 212, 40]\r\n      const colorInvisible = [0, 0, 0, 0]\r\n\r\n      const color = (i: number) => {\r\n        // if (!buildData[this.csvData.activeColumn]) return colorPaleGrey\r\n\r\n        const csvRow = this.csvData.csvRowFromLinkRow[i]\r\n        let value = buildData[this.csvData.activeColumn]?.values[csvRow]\r\n\r\n        if (this.fixedColors.length === 1) return colorsAsRGB[0]\r\n        if (!value && !this.vizDetails.showDifferences) return colorInvisible\r\n        if (isCategorical) return setColorBasedOnValue(value)\r\n\r\n        if (this.vizDetails.showDifferences) {\r\n          const baseRow = this.csvBase.csvRowFromLinkRow[i]\r\n          const baseValue = baseData[activeColumn].values[baseRow]\r\n          const diff = value - baseValue\r\n\r\n          if (diff === 0) return colorPaleGrey // setColorBasedOnValue(0.5)\r\n\r\n          // red vs. blue\r\n          if (this.isDarkMode) {\r\n            return diff > 0 ? [255, 64, 64, 255] : [64, 96, 255, 255] // red vs. blue\r\n          } else {\r\n            return diff > 0 ? [255, 0, 0, 255] : [32, 64, 255, 255] // red vs. blue\r\n          }\r\n        } else {\r\n          // don't use log scale if numbers are below 1.0\r\n          let ratio = value / (buildColumn.max || 1.0)\r\n          // if (ratio < 0.0001) return colorPaleGrey\r\n          return setColorBasedOnValue(ratio)\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < numLinks; i++) {\r\n        colors.set(color(i), i * 4)\r\n      }\r\n\r\n      this.colorArray = colors\r\n    },\r\n\r\n    loadCSVFiles() {\r\n      this.myState.statusMessage = 'Loading datasets...'\r\n\r\n      // Old yaml format listed csvFile and csvBase explicitly.\r\n      // Merge those into vizDetails.datasets if they exist.\r\n      if (!this.vizDetails.datasets) this.vizDetails.datasets = {}\r\n      if (this.vizDetails.csvFile) this.vizDetails.datasets.csvFile = this.vizDetails.csvFile\r\n      if (this.vizDetails.csvBase) this.vizDetails.datasets.csvBase = this.vizDetails.csvBase\r\n\r\n      // Load files on workers, in parallel and off the main thread\r\n      // this will call finishedLoadingCSV() for each when it's done loading & parsing\r\n      const datasetsToLoad = Object.entries(this.vizDetails.datasets)\r\n\r\n      if (datasetsToLoad.length) {\r\n        for (const [key, filename] of datasetsToLoad) {\r\n          this.loadOneCSVFile(key, filename)\r\n        }\r\n      } else {\r\n        this.showSimpleNetworkWithNoDatasets()\r\n      }\r\n    },\r\n\r\n    showSimpleNetworkWithNoDatasets() {\r\n      // no datasets; we are just showing the bare network\r\n      this.csvData = {\r\n        datasetKey: '',\r\n        dataTable: {\r\n          [LOOKUP_COLUMN]: {\r\n            name: LOOKUP_COLUMN,\r\n            type: DataType.LOOKUP,\r\n            values: [],\r\n          },\r\n        },\r\n        activeColumn: LOOKUP_COLUMN,\r\n        csvRowFromLinkRow: [],\r\n      }\r\n\r\n      // there is no range(maxValue) in Javascript! :-(\r\n      const length = this.geojsonData.source.length / 2 // half because this contains x/y coordinates\r\n      const lookup = [...Array(length).keys()]\r\n      this.csvData.dataTable[LOOKUP_COLUMN].values = lookup\r\n\r\n      this.myState.statusMessage = ''\r\n      this.setDataIsLoaded()\r\n\r\n      const color: LineColorDefinition = {\r\n        fixedColors: this.fixedColors,\r\n        dataset: '',\r\n        columnName: '',\r\n        normalize: '',\r\n      }\r\n      this.changeConfiguration({ color })\r\n    },\r\n\r\n    handleDatasetisLoaded(datasetId: string) {\r\n      const datasetKeys = Object.keys(this.datasets)\r\n\r\n      if (datasetId === 'csvBase' || datasetId === 'base') {\r\n        // is base dataset:\r\n        this.csvBase = {\r\n          datasetKey: datasetId,\r\n          dataTable: this.datasets[datasetId],\r\n          csvRowFromLinkRow: this.csvRowLookupFromLinkRow[datasetId],\r\n          activeColumn: '',\r\n        }\r\n        this.csvWidthBase = {\r\n          datasetKey: datasetId,\r\n          dataTable: this.datasets[datasetId],\r\n          csvRowFromLinkRow: this.csvRowLookupFromLinkRow[datasetId],\r\n          activeColumn: '',\r\n        }\r\n      } else if (this.csvData.activeColumn === '') {\r\n        // is first non-base dataset:\r\n        // set a default view, if user didn't pass anything in\r\n        if (!this.vizDetails.display.color && !this.vizDetails.display.width) {\r\n          const firstColumnName = Object.values(this.datasets[datasetId])[0].name\r\n          this.csvData = {\r\n            datasetKey: datasetId,\r\n            dataTable: this.datasets[datasetId],\r\n            csvRowFromLinkRow: this.csvRowLookupFromLinkRow[datasetId],\r\n            activeColumn: firstColumnName,\r\n          }\r\n        }\r\n      }\r\n\r\n      // last dataset\r\n      if (datasetKeys.length === Object.keys(this.vizDetails.datasets).length) {\r\n        this.setDataIsLoaded()\r\n        this.myState.statusMessage = ''\r\n        console.log({ DATASETS: this.datasets })\r\n      }\r\n    },\r\n\r\n    async loadOneCSVFile(key: string, filename: string) {\r\n      try {\r\n        const dataset = await this.myDataManager.getDataset({ dataset: filename })\r\n        const dataTable = dataset.allRows\r\n\r\n        console.log('loaded', key)\r\n        this.myState.statusMessage = 'Analyzing...'\r\n\r\n        // remove columns without names; we can't use them\r\n        const cleanTable: DataTable = {}\r\n        for (const key of Object.keys(dataTable)) {\r\n          if (key) cleanTable[key] = dataTable[key]\r\n        }\r\n\r\n        this.datasets = Object.assign({ ...this.datasets }, { [key]: cleanTable })\r\n        this.handleNewDataset({ key, dataTable: cleanTable })\r\n      } catch (e) {\r\n        this.$store.commit('error', 'Could not load ' + filename)\r\n        this.$emit('isLoaded')\r\n      }\r\n    },\r\n\r\n    handleNewDataColumn(value: { dataset: LookupDataset; column: string }) {\r\n      const { dataset, column } = value\r\n\r\n      // selector is attached to a dataset. Both color and width could be\r\n      // impacted, if they are attached to that dataset.\r\n\r\n      const config: any = {}\r\n\r\n      // WIDTHS\r\n      if (dataset.datasetKey === this.csvWidth.datasetKey) {\r\n        const width: LineWidthDefinition = { ...this.vizDetails.display.width }\r\n        width.columnName = column\r\n        config.width = width\r\n      }\r\n\r\n      // COLORS\r\n      if (dataset.datasetKey === this.csvData.datasetKey) {\r\n        const color: LineColorDefinition = { ...this.vizDetails.display.color }\r\n        color.columnName = column\r\n        config.color = color\r\n      }\r\n\r\n      this.changeConfiguration(config)\r\n    },\r\n  },\r\n  async mounted() {\r\n    this.$store.commit('setFullScreen', !this.thumbnail)\r\n\r\n    this.myState.thumbnail = this.thumbnail\r\n    this.myState.yamlConfig = this.yamlConfig ?? ''\r\n    this.myState.subfolder = this.subfolder\r\n\r\n    await this.getVizDetails()\r\n\r\n    // default width is 250, why not\r\n    this.scaleWidth = this.vizDetails.display?.width?.widthFactor || 250\r\n\r\n    if (this.thumbnail) {\r\n      this.buildThumbnail()\r\n      return\r\n    }\r\n\r\n    this.setupLogoMover()\r\n\r\n    // load network; when it is done it will call the loadCSVs afterwards.\r\n    this.loadNetwork()\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // MUST delete the React view handle to prevent gigantic memory leak!\r\n    delete REACT_VIEW_HANDLES[this.linkLayerId]\r\n\r\n    try {\r\n      for (const worker of this.dataLoaderWorkers) worker.terminate()\r\n    } catch (e) {}\r\n\r\n    this.$store.commit('setFullScreen', false)\r\n  },\r\n})\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.link-volume-plot {\r\n  background: url('assets/thumbnail.jpg') no-repeat;\r\n  background-size: cover;\r\n  min-height: $thumbnailHeight;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n}\r\n\r\n.link-volume-plot.hide-thumbnail {\r\n  background: var(--bgMapPanel);\r\n}\r\n\r\n.plot-container {\r\n  display: grid;\r\n  grid-template-columns: auto 1fr;\r\n  grid-template-rows: 1fr auto auto;\r\n  pointer-events: none;\r\n  flex: 1;\r\n  position: relative;\r\n}\r\n\r\n.map-area {\r\n  pointer-events: auto;\r\n}\r\n\r\n.top-panel {\r\n  pointer-events: auto;\r\n  grid-column: 1 / 2;\r\n  grid-row: 1 / 2;\r\n  background-color: var(--bgPanel);\r\n  margin: 0 auto auto 0;\r\n  padding: 0.5rem 1.5rem 1rem 1.5rem;\r\n  z-index: 5;\r\n  box-shadow: 0px 2px 10px #22222244;\r\n}\r\n\r\n.bottom-panel {\r\n  grid-column: 1 / 3;\r\n  grid-row: 2 / 3;\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 0.8rem;\r\n  pointer-events: auto;\r\n  margin: auto 0.5rem 2px 7px;\r\n  filter: drop-shadow(0px 2px 4px #22222233);\r\n}\r\n\r\n.status-message {\r\n  margin: 0 0;\r\n  padding: 0.5rem 0.5rem;\r\n  color: var(--textFancy);\r\n  background-color: var(--bgPanel);\r\n  font-size: 1.2rem;\r\n  line-height: 1.5rem;\r\n}\r\n\r\n.right-side {\r\n  z-index: 1;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: 0 0 auto 0;\r\n}\r\n\r\n.panel-items {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 0.5rem 0.5rem;\r\n  margin-bottom: 5px;\r\n  width: 16rem;\r\n  background-color: var(--bgPanel);\r\n  border-radius: 3px;\r\n  overflow: visible;\r\n  // overflow-x: hidden;\r\n}\r\n\r\n.panel-item {\r\n  h3 {\r\n    line-height: 1.7rem;\r\n  }\r\n\r\n  p {\r\n    font-size: 0.9rem;\r\n  }\r\n}\r\n\r\ninput {\r\n  border: none;\r\n  background-color: var(--bgCream2);\r\n  color: var(--bgDark);\r\n}\r\n\r\n.toggle {\r\n  margin: 0.25rem 0.5rem 0.25rem 0;\r\n}\r\n\r\n#dropdown-menu-color-selector {\r\n  background-color: var(--bgBold);\r\n\r\n  p {\r\n    color: #888;\r\n  }\r\n}\r\n\r\n.panel-item {\r\n  margin-top: 0rem;\r\n}\r\n\r\n.config-section {\r\n  flex: 1;\r\n}\r\n\r\n.diff-section {\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin-top: 0.7rem;\r\n\r\n  p {\r\n    margin: auto 0;\r\n  }\r\n}\r\n\r\n.filter-panel {\r\n  height: 6rem;\r\n  background-color: var(--bgPanel);\r\n  margin: 0rem auto 5px 0px;\r\n  border-radius: 3px;\r\n  // width: 100%;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n  .message-pane {\r\n    padding: 0.5rem 0.5rem;\r\n  }\r\n}\r\n</style>\r\n","\r\n.link-volume-plot(:class=\"{'hide-thumbnail': !thumbnail}\"\r\n        :style='{\"background\": urlThumbnail}'\r\n        oncontextmenu=\"return false\")\r\n\r\n  .plot-container(v-if=\"!thumbnail\" :id=\"`container-${linkLayerId}`\")\r\n    link-gl-layer.map-area(\r\n        :viewId=\"linkLayerId\"\r\n        :links=\"geojsonData\"\r\n        :colorRampType=\"colorRampType\"\r\n        :build=\"csvData\"\r\n        :base=\"csvBase\"\r\n        :widths=\"csvWidth\"\r\n        :widthsBase=\"csvWidthBase\"\r\n        :dark=\"isDarkMode\"\r\n        :newColors=\"colorArray\"\r\n        :newWidths=\"widthArray\"\r\n        :scaleWidth=\"scaleWidth\"\r\n        :projection=\"vizDetails.projection\"\r\n        :mapIsIndependent=\"vizDetails.mapIsIndependent\"\r\n    )\r\n\r\n    zoom-buttons(v-if=\"!thumbnail\")\r\n    //- drawing-tool(v-if=\"!thumbnail\")\r\n\r\n    //- color/width/etc panel\r\n    viz-configurator(v-if=\"!thumbnail && isDataLoaded\"\r\n      :vizDetails=\"vizDetails\"\r\n      :datasets=\"datasets\"\r\n      :fileSystem=\"fileSystem\"\r\n      :subfolder=\"myState.subfolder\"\r\n      :yamlConfig=\"yamlConfig\"\r\n      :legendStore=\"legendStore\"\r\n      :filterDefinitions=\"currentUIFilterDefinitions\"\r\n      @update=\"changeConfiguration\")\r\n\r\n    //- .top-panel(v-if=\"vizDetails.title\")\r\n    //-   .panel-item\r\n    //-     h3 {{ vizDetails.title }}\r\n    //-     p {{ vizDetails.description }}\r\n\r\n    .bottom-panel(v-if=\"!thumbnail\")\r\n      .status-message(v-if=\"myState.statusMessage\")\r\n        p {{ myState.statusMessage }}\r\n\r\n      .panel-items(v-show=\"csvWidth.activeColumn\")\r\n\r\n        //- slider/dropdown for selecting column\r\n        .panel-item.config-section\r\n          selector-panel(\r\n            :vizDetails=\"vizDetails\"\r\n            :csvData=\"csvWidth\"\r\n            :scaleWidth=\"scaleWidth\"\r\n            :showDiffs=\"vizDetails.showDifferences\"\r\n            @column=\"handleNewDataColumn\"\r\n            @slider=\"handleNewDataColumn\"\r\n          )\r\n\r\n        //- DIFF checkbox\r\n        .panel-item.diff-section(v-if=\"vizDetails.datasets.csvBase\")\r\n          toggle-button.toggle(:width=\"40\" :value=\"vizDetails.showDifferences\" :sync=\"true\" :labels=\"false\"\r\n            :color=\"{checked: '#4b7cc4', unchecked: '#222'}\"\r\n            @change=\"toggleShowDiffs\")\r\n          p: b {{ $t('showDiffs') }}\r\n\r\n        //- FilterPanel.filter-panel(v-if=\"vizDetails.useSlider\"\r\n        //-   :props=\"csvWidth\"\r\n        //-   @activeColumns=\"handleNewFilter\"\r\n        //- )\r\n\r\n"],"names":["shallowEqualObjects","objA","objB","aKeys","bKeys","len","i","key","__vue2_script$1","defineComponent","VueSlider","value","useIt","result","render","_vm","_h","_c","$$v","staticRenderFns","i18n","__vue2_script","TimeSlider","f","DataType","colors","column","debounce","$event","Component","viewId","links","source","Float32Array","dest","colorRampType","build","base","widths","widthsBase","newColors","Uint8Array","newWidths","dark","projection","scaleWidth","mapIsIndependent","widthDivisor","viewState","setViewState","useState","globalStore","state","buildColumn","dataTable","activeColumn","baseColumn","widthColumn","isCategorical","type","STRING","REACT_VIEW_HANDLES","view","handleClick","console","log","handleViewState","center","longitude","latitude","commit","precise","x","format","lowerExp","upperExp","precision","buildTooltipHtml","columnBuild","columnBase","geoOffset","index","csvRowFromLinkRow","values","Number","isFinite","name","html","baseIndex","baseValue","diff","getTooltip","object","tooltip","widthTip","style","color","backgroundColor","e","warn","coordinateSystem","COORDINATE_SYSTEM","METER_OFFSETS","DEFAULT","layer","LineOffsetLayer","id","data","length","attributes","getSourcePosition","size","getTargetPosition","getColor","getWidth","widthUnits","widthScale","widthMinPixels","widthMaxPixels","pickable","opacity","autoHighlight","highlightColor","offsetDirection","OFFSET_DIRECTION","RIGHT","updateTriggers","transitions","parameters","depthTest","React","createElement","DeckGL","layers","controller","pickingRadius","getCursor","isDragging","isHovering","onClick","onViewStateChange","StaticMap","mapStyle","getters","mapboxApiAccessToken","MAPBOX_TOKEN","LOOKUP_COLUMN","MyComponent","SelectorPanel","DrawingTool","LinkGlLayer","ToggleButton","VizConfigurator","ZoomButtons","LegendStore","ColorScheme","DashboardDataManager","HTTPFileSystem","svnProject","a","rampType","_b","_a","filename","emptyState","title","t","text","YAML","err","hasYaml","configuration","Status","blob","buffer","readBlob","base64","arrayBufferToBase64","props","columns","width","columnName","dataset","scaleFactor","recalculate","selectedDataset","msg","datasetKey","samples","webMercator","firstPoint","Coords","numLinks","gap","deckmap","logo","right","message","network","MAP_STYLES_OFFLINE","assumedLinkIdIsFirstColumn","linkIdColumn","tempMapLinkIdToCsvRow","csvRow","getCsvRowNumberFromLinkRowNumber","linkRow","linkId","widthValues","baseValues","_d","baseRow","colorsAsRGB","hexcolor","c","rgb","exponent","domain","v","buildData","baseData","setColorBasedOnValue","scaleOrdinal","scaleThreshold","colorPaleGrey","colorInvisible","ratio","datasetsToLoad","lookup","datasetId","datasetKeys","firstColumnName","cleanTable","config","worker"],"mappings":"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"}