{"version":3,"file":"TransitDemand.12b53baa.js","sources":["../../src/components/LeftDataPanel.vue","../../src/components/LeftDataPanel.vue?vue&type=template&lang.js","../../src/plugins/transit-demand/LegendBox.vue","../../src/plugins/transit-demand/LegendBox.vue?vue&type=template&lang.js","../../src/plugins/transit-demand/TransitDemand.vue","../../src/plugins/transit-demand/TransitDemand.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\n#datapanel\r\n  .content-area(:class=\"{'is-hidden': isHidden, 'bye': isLeaving}\")\r\n    .info-header(v-if=\"title\")\r\n      h3(style=\"padding: 0.5rem 3rem; font-size: 1rem; font-weight: normal; color: white;\") {{ title }}\r\n\r\n    .top-area\r\n      slot\r\n\r\n  .restore-button(:class=\"{'add-margin': !isHidden}\")\r\n    button.button.is-small.hide-button(@click=\"toggleHidePanel\")\r\n      i.fa.fa-arrow-left(v-if=\"!isHidden\")\r\n      i.fa.fa-arrow-right(v-if=\"isHidden\")\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n  name: 'LeftDataPanel',\r\n  props: {\r\n    title: String,\r\n  },\r\n  data: () => {\r\n    return {\r\n      isHidden: false,\r\n      isLeaving: false,\r\n    }\r\n  },\r\n  methods: {\r\n    toggleHidePanel() {\r\n      if (this.isHidden) this.isHidden = !this.isHidden\r\n      else {\r\n        this.isLeaving = true\r\n        setTimeout(() => {\r\n          this.isHidden = true\r\n          this.isLeaving = false\r\n        }, 300)\r\n      }\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n#datapanel {\r\n  display: flex;\r\n  flex-direction: row;\r\n  z-index: 7;\r\n  // margin: 0.5rem 0rem 0.5rem 0.5rem;\r\n  pointer-events: none;\r\n}\r\n\r\n.content-area {\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.1);\r\n  animation: 0.3s ease 0s 1 slideInFromLeft;\r\n  pointer-events: auto;\r\n}\r\n\r\n.is-hidden {\r\n  display: none;\r\n}\r\n\r\n.bye {\r\n  animation: 0.3s ease 0s 1 slideOutToLeft;\r\n}\r\n\r\n.top-area {\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  // background-color: #eeeefff4;\r\n  background-color: #d9ddec;\r\n  border-bottom-left-radius: 0.25rem;\r\n  border-bottom-right-radius: 0.25rem;\r\n  opacity: 0.97;\r\n}\r\n\r\n.lower-area {\r\n  padding: 0.5rem 0.5rem;\r\n}\r\n\r\n.bottom-nav-bar {\r\n  padding: 0.2rem 0rem;\r\n  background-color: white;\r\n  text-align: center;\r\n  border-bottom-left-radius: 0.25rem;\r\n  border-bottom-right-radius: 0.25rem;\r\n}\r\n\r\n.restore-button {\r\n  margin: auto 0rem 0.25rem 0.25rem;\r\n  pointer-events: auto;\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.info-header {\r\n  text-align: center;\r\n  background-color: #09357c;\r\n  padding: 0.5rem 0rem;\r\n  // border-top-left-radius: 0.25rem;\r\n  // border-top-right-radius: 0.25rem;\r\n  border-top: solid 1px #888;\r\n  border-bottom: solid 1px #888;\r\n}\r\n\r\n.add-margin {\r\n  margin-left: 0.4rem;\r\n}\r\n\r\n.hide-button {\r\n  background-color: #4e6b3d;\r\n  color: white;\r\n}\r\n\r\n@keyframes slideInFromLeft {\r\n  from {\r\n    transform: translateX(-100%);\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n  }\r\n}\r\n\r\n@keyframes slideOutToLeft {\r\n  from {\r\n    transform: translateX(0);\r\n  }\r\n  to {\r\n    transform: translateX(-100%);\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n  #datapanel {\r\n    margin: 0rem 0rem 0rem 0rem;\r\n  }\r\n\r\n  .content-area {\r\n    margin-bottom: 0rem;\r\n  }\r\n\r\n  .info-header {\r\n    border-top-left-radius: 0rem;\r\n    border-top-right-radius: 0rem;\r\n    border-top: none;\r\n  }\r\n\r\n  .bottom-nav-bar {\r\n    border-bottom-left-radius: 0rem;\r\n    border-bottom-right-radius: 0rem;\r\n  }\r\n}\r\n</style>\r\n","\r\n#datapanel\r\n  .content-area(:class=\"{'is-hidden': isHidden, 'bye': isLeaving}\")\r\n    .info-header(v-if=\"title\")\r\n      h3(style=\"padding: 0.5rem 3rem; font-size: 1rem; font-weight: normal; color: white;\") {{ title }}\r\n\r\n    .top-area\r\n      slot\r\n\r\n  .restore-button(:class=\"{'add-margin': !isHidden}\")\r\n    button.button.is-small.hide-button(@click=\"toggleHidePanel\")\r\n      i.fa.fa-arrow-left(v-if=\"!isHidden\")\r\n      i.fa.fa-arrow-right(v-if=\"isHidden\")\r\n\r\n","<template lang=\"pug\">\r\n.legend-container\r\n  p.control-label Legend\r\n  .legend-item(v-for=\"item in rows\" :key=\"item[0]\")\r\n    .legend-col-1(:style=\"{'background-color': item[0]}\")\r\n    span.legend-col-2 {{ item[1] }}\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n  name: 'LegendBox',\r\n  props: {\r\n    rows: { type: Array, required: true },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.legend-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: var(--text);\r\n\r\n  h3 {\r\n    font-size: 1rem;\r\n    margin-bottom: 0.25rem;\r\n  }\r\n}\r\n\r\n.control-label {\r\n  margin: 0 0;\r\n  font-size: 0.8rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin-bottom: 0.25rem;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.legend-col-1 {\r\n  width: 3rem;\r\n}\r\n\r\n.legend-col-2 {\r\n  margin-left: 1rem;\r\n}\r\n\r\np.title {\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  margin-bottom: 1rem;\r\n  font-weight: normal;\r\n}\r\n</style>\r\n","\r\n.legend-container\r\n  p.control-label Legend\r\n  .legend-item(v-for=\"item in rows\" :key=\"item[0]\")\r\n    .legend-col-1(:style=\"{'background-color': item[0]}\")\r\n    span.legend-col-2 {{ item[1] }}\r\n","<template lang=\"pug\">\r\n.transit-viz(:class=\"{'hide-thumbnail': !thumbnail}\")\r\n  .map-container(:class=\"{'hide-thumbnail': !thumbnail }\")\r\n    div.map-styles(:id=\"mapID\")\r\n      .stop-marker(v-for=\"stop in stopMarkers\" :key=\"stop.i\"\r\n        :style=\"{transform: 'translate(-50%,-50%) rotate('+stop.bearing+'deg)', left: stop.xy.x + 'px', top: stop.xy.y+'px'}\"\r\n      )\r\n\r\n    legend-box.legend(v-if=\"!thumbnail\"\r\n      :rows=\"legendRows\"\r\n    )\r\n\r\n  zoom-buttons(v-if=\"!thumbnail\")\r\n  //- drawing-tool(v-if=\"!thumbnail\")\r\n\r\n  collapsible-panel.left-side(v-if=\"!thumbnail\"\r\n    :darkMode=\"isDarkMode\"\r\n    :locked=\"true\"\r\n    direction=\"left\")\r\n\r\n    .panel-items\r\n      //- .panel-item(v-if=\"vizDetails.title\")\r\n      //-   h3 {{ vizDetails.title }}\r\n      //-   p {{ vizDetails.description }}\r\n\r\n      .route-list(v-if=\"routesOnLink.length > 0\")\r\n        .route(v-for=\"route in routesOnLink\"\r\n            :key=\"route.uniqueRouteID\"\r\n            :class=\"{highlightedRoute: selectedRoute && route.id === selectedRoute.id}\"\r\n            @click=\"showRouteDetails(route.id)\")\r\n          .route-title {{route.id}}\r\n          .detailed-route-data\r\n            .col\r\n              p: b {{route.departures}} departures\r\n              p First: {{route.firstDeparture}}\r\n              p Last: {{route.lastDeparture}}\r\n            .col(v-if=\"route.passengersAtArrival\")\r\n              p: b {{ route.passengersAtArrival }} passengers\r\n              p {{ route.totalVehicleCapacity }} capacity\r\n\r\n  .control-panel(v-if=\"!thumbnail\"\r\n    :class=\"{'is-dashboard': config !== undefined }\"\r\n  )\r\n\r\n    .panel-item\r\n      p.control-label {{  $t('metrics') }}:\r\n      .metric-buttons\r\n        button.button.is-small.metric-button(\r\n          v-for=\"metric,i in metrics\" :key=\"metric.field\"\r\n          :style=\"{'color': activeMetric===metric.field ? 'white' : buttonColors[i], 'border': `1px solid ${buttonColors[i]}`, 'border-right': `0.4rem solid ${buttonColors[i]}`,'border-radius': '4px', 'background-color': activeMetric===metric.field ? buttonColors[i] : isDarkMode ? '#333':'white'}\"\r\n          @click=\"handleClickedMetric(metric)\") {{ $i18n.locale === 'de' ? metric.name_de : metric.name_en }}\r\n\r\n  .status-corner(v-if=\"!thumbnail && loadingText\")\r\n    p {{ loadingText }}\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: { metrics: 'Metrics', viewer: 'Transit Network' },\r\n    de: { metrics: 'Metrics', viewer: 'Ã–V Netzwerk' },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport * as turf from '@turf/turf'\r\nimport colormap from 'colormap'\r\nimport crossfilter from 'crossfilter2'\r\nimport maplibregl, { GeoJSONSource, LngLatBoundsLike, LngLatLike, Popup } from 'maplibre-gl'\r\nimport Papa from '@simwrapper/papaparse'\r\nimport yaml from 'yaml'\r\n\r\nimport globalStore from '@/store'\r\nimport CollapsiblePanel from '@/components/CollapsiblePanel.vue'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport LeftDataPanel from '@/components/LeftDataPanel.vue'\r\nimport { Network, NetworkInputs, NetworkNode, TransitLine, RouteDetails } from './Interfaces'\r\nimport NewXmlFetcher from '@/workers/NewXmlFetcher.worker?worker'\r\nimport TransitSupplyWorker from './TransitSupplyHelper.worker?worker'\r\nimport LegendBox from './LegendBox.vue'\r\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\r\nimport ZoomButtons from '@/components/ZoomButtons.vue'\r\n\r\nimport { FileSystem, FileSystemConfig, ColorScheme, VisualizationPlugin } from '@/Globals'\r\n\r\nimport GzipWorker from '@/workers/GzipFetcher.worker?worker'\r\n\r\nconst DEFAULT_PROJECTION = 'EPSG:31468' // 31468' // 2048'\r\n\r\nconst COLOR_CATEGORIES = 10\r\nconst SHOW_STOPS_AT_ZOOM_LEVEL = 11\r\n\r\nclass Departure {\r\n  public total: number = 0\r\n  public routes: Set<string> = new Set()\r\n}\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'TransitViewer',\r\n  i18n,\r\n  components: { CollapsiblePanel, LeftDataPanel, LegendBox, DrawingTool, ZoomButtons },\r\n\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    yamlConfig: String,\r\n    config: { type: Object as any },\r\n    thumbnail: Boolean,\r\n  },\r\n\r\n  data: () => {\r\n    const metrics = [{ field: 'departures', name_en: 'Departures', name_de: 'Abfahrten' }]\r\n\r\n    return {\r\n      mapPopup: new Popup({\r\n        closeButton: false,\r\n        closeOnClick: false,\r\n      }),\r\n      buttonColors: ['#5E8AAE', '#BF7230', '#269367', '#9C439C'],\r\n      metrics: metrics,\r\n      activeMetric: metrics[0].field as any,\r\n      vizDetails: {\r\n        transitSchedule: '',\r\n        network: '',\r\n        demand: '',\r\n        projection: '',\r\n        title: '',\r\n        description: '',\r\n      },\r\n      myState: {\r\n        subfolder: '',\r\n        yamlConfig: '',\r\n        thumbnail: true,\r\n      },\r\n      isDarkMode: globalStore.state.isDarkMode,\r\n      isMapMoving: false,\r\n      loadingText: 'MATSim Transit Inspector',\r\n      mymap: null as any,\r\n      mapID: `map-id-${Math.floor(1e12 * Math.random())}` as any,\r\n\r\n      projection: DEFAULT_PROJECTION,\r\n      routesOnLink: [] as any[],\r\n      selectedRoute: {} as any,\r\n      stopMarkers: [] as any[],\r\n\r\n      _attachedRouteLayers: [] as string[],\r\n      _departures: {} as { [linkID: string]: Departure },\r\n      _linkData: null as any,\r\n      _mapExtentXYXY: null as any,\r\n      _maximum: -Infinity,\r\n      _network: {} as Network,\r\n      _routeData: {} as { [index: string]: RouteDetails },\r\n      _stopFacilities: {} as { [index: string]: NetworkNode },\r\n      _transitLines: {} as { [index: string]: TransitLine },\r\n      _roadFetcher: {} as any,\r\n      _transitFetcher: {} as any,\r\n      _transitHelper: {} as any,\r\n      _transitLinks: null as any,\r\n      _geoTransitLinks: null as any,\r\n\r\n      resolvers: {} as { [id: number]: any },\r\n      resolverId: 0,\r\n      xmlWorker: null as null | Worker,\r\n      cfDemand: null as crossfilter.Crossfilter<any> | null,\r\n      cfDemandLink: null as crossfilter.Dimension<any, any> | null,\r\n      hoverWait: false,\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    legendRows(): string[][] {\r\n      return [\r\n        ['#a03919', 'Rail'],\r\n        ['#448', 'Bus'],\r\n      ]\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    '$store.state.resizeEvents'() {\r\n      if (this.mymap) this.mymap.resize()\r\n    },\r\n\r\n    '$store.state.viewState'({ bearing, longitude, latitude, zoom, pitch }: any) {\r\n      // ignore my own farts; they smell like roses\r\n      if (!this.mymap || this.isMapMoving) {\r\n        this.isMapMoving = false\r\n        return\r\n      }\r\n\r\n      // sometimes closing a view returns a null map, ignore it!\r\n      if (!zoom) return\r\n\r\n      this.mymap.off('move', this.handleMapMotion)\r\n\r\n      this.mymap.jumpTo({\r\n        bearing,\r\n        zoom,\r\n        center: [longitude, latitude],\r\n        pitch,\r\n      })\r\n\r\n      this.mymap.on('move', this.handleMapMotion)\r\n\r\n      if (this.stopMarkers.length > 0) this.showTransitStops()\r\n    },\r\n\r\n    '$store.state.colorScheme'() {\r\n      this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode\r\n      if (!this.mymap) return\r\n\r\n      this.removeAttachedRoutes()\r\n\r\n      this.mymap.setStyle(globalStore.getters.mapStyle)\r\n\r\n      this.mymap.on('style.load', () => {\r\n        if (this._geoTransitLinks) this.addTransitToMap(this._geoTransitLinks)\r\n        this.highlightAllAttachedRoutes()\r\n        if (this.selectedRoute) this.showTransitRoute(this.selectedRoute.id)\r\n      })\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    async getVizDetails() {\r\n      // are we in a dashboard?\r\n      if (this.config) {\r\n        this.vizDetails = Object.assign({}, this.config)\r\n        return true\r\n      }\r\n\r\n      // if a YAML file was passed in, just use it\r\n      if (this.myState.yamlConfig?.endsWith('yaml') || this.myState.yamlConfig?.endsWith('yml')) {\r\n        return this.loadYamlConfig()\r\n      }\r\n\r\n      // Build the config based on folder contents\r\n      const title = this.myState.yamlConfig.substring(\r\n        0,\r\n        15 + this.myState.yamlConfig.indexOf('transitSchedule')\r\n      )\r\n\r\n      this.vizDetails = {\r\n        transitSchedule: this.myState.yamlConfig,\r\n        network: '',\r\n        title,\r\n        description: '',\r\n        demand: '',\r\n        projection: '',\r\n      }\r\n\r\n      this.$emit('title', title)\r\n      return true\r\n    },\r\n\r\n    async prepareView() {\r\n      const { files } = await this.fileApi.getDirectory(this.myState.subfolder)\r\n\r\n      // Road network: first try the most obvious network filename:\r\n      let network =\r\n        this.vizDetails.network ?? this.myState.yamlConfig.replaceAll('transitSchedule', 'network')\r\n\r\n      // if the obvious network file doesn't exist, just grab... the first network file:\r\n      if (files.indexOf(network) == -1) {\r\n        const allNetworks = files.filter(f => f.endsWith('network.xml.gz'))\r\n        if (allNetworks.length) network = allNetworks[0]\r\n        else {\r\n          this.loadingText = 'No road network found.'\r\n          network = ''\r\n        }\r\n      }\r\n\r\n      // Departures: use them if we are in an output folder (and they exist)\r\n      let demandFiles = [] as string[]\r\n      if (this.myState.yamlConfig.indexOf('output_transitSchedule') > -1) {\r\n        demandFiles = files.filter(f => f.endsWith('pt_stop2stop_departures.csv.gz'))\r\n      }\r\n\r\n      // Save everything\r\n      this.vizDetails.network = network\r\n      if (demandFiles.length) this.vizDetails.demand = demandFiles[0]\r\n    },\r\n\r\n    async guessProjection(networks: any): Promise<string> {\r\n      // 00. If it's in config, use it\r\n      if (this.vizDetails.projection) return this.vizDetails.projection\r\n      if (this.config?.projection) return this.config.projection\r\n\r\n      // 0. If it's in the network, use it\r\n      if (networks?.roadXML?.network?.attributes?.attribute?.name === 'coordinateReferenceSystem') {\r\n        return networks?.roadXML?.network?.attributes?.attribute['#text']\r\n      }\r\n\r\n      // 1. if we have it in storage already, use it\r\n      const storagePath = `${this.root}/${this.subfolder}`\r\n      let savedConfig = undefined // localStorage.getItem(storagePath) as any\r\n\r\n      const goodEPSG = /EPSG:.\\d/\r\n\r\n      if (savedConfig) {\r\n        try {\r\n          const config = JSON.parse(savedConfig)\r\n\r\n          if (goodEPSG.test(config.networkProjection)) {\r\n            return config.networkProjection\r\n          } else {\r\n            savedConfig = {}\r\n          }\r\n        } catch (e) {\r\n          console.error('bad saved config in storage', savedConfig)\r\n          savedConfig = {}\r\n          // fail! ok try something else\r\n        }\r\n      }\r\n\r\n      // 2. try to get it from config\r\n      const { files } = await this.fileApi.getDirectory(this.myState.subfolder)\r\n      const outputConfigs = files.filter(\r\n        f => f.indexOf('.output_config.xml') > -1 || f.indexOf('.output_config_reduced.xml') > -1\r\n      )\r\n      if (outputConfigs.length && this.fileSystem) {\r\n        // console.log('trying to find CRS in', outputConfigs[0])\r\n\r\n        for (const xmlConfigFileName of outputConfigs) {\r\n          try {\r\n            const configXML: any = await this.fetchXML({\r\n              worker: null,\r\n              slug: this.fileSystem.slug,\r\n              filePath: this.myState.subfolder + '/' + xmlConfigFileName,\r\n            })\r\n\r\n            const global = configXML.config.module.filter((f: any) => f.$name === 'global')[0]\r\n            const crs = global.param.filter((p: any) => p.$name === 'coordinateSystem')[0]\r\n\r\n            const crsValue = crs.$value\r\n\r\n            // save it\r\n            // savedConfig = savedConfig || {}\r\n            // savedConfig.networkProjection = crsValue\r\n            // localStorage.setItem(storagePath, JSON.stringify(savedConfig))\r\n            return crsValue\r\n          } catch (e) {\r\n            console.warn('Failed parsing', xmlConfigFileName)\r\n          }\r\n        }\r\n      }\r\n\r\n      // 3. ask the user\r\n      let entry = prompt('Need coordinate EPSG number:', '') || ''\r\n\r\n      // if user cancelled, give up\r\n      if (!entry) return ''\r\n      // if user gave bad answer, try again\r\n      if (isNaN(parseInt(entry, 10)) && !goodEPSG.test(entry)) return this.guessProjection(networks)\r\n\r\n      // hopefully user gave a good EPSG number\r\n      if (!entry.startsWith('EPSG:')) entry = 'EPSG:' + entry\r\n\r\n      const networkProjection = entry\r\n      localStorage.setItem(storagePath, JSON.stringify({ networkProjection }))\r\n      return networkProjection\r\n    },\r\n\r\n    async loadYamlConfig() {\r\n      const filename =\r\n        this.myState.yamlConfig.indexOf('/') > -1\r\n          ? this.myState.yamlConfig\r\n          : this.myState.subfolder + '/' + this.myState.yamlConfig\r\n\r\n      try {\r\n        const text = await this.fileApi.getFileText(filename)\r\n        this.vizDetails = yaml.parse(text)\r\n      } catch (e) {\r\n        // maybe it failed because password?\r\n        const err = e as any\r\n        if (this.fileSystem && this.fileSystem.needPassword && err.status === 401) {\r\n          this.$store.commit('requestLogin', this.fileSystem.slug)\r\n        } else {\r\n          const msg = 'Could not load ' + filename\r\n          this.$store.commit('error', msg)\r\n          this.loadingText = msg\r\n        }\r\n        return false\r\n      }\r\n\r\n      const t = this.vizDetails.title ? this.vizDetails.title : 'Transit Ridership'\r\n      this.$emit('title', t)\r\n\r\n      this.projection = this.vizDetails.projection\r\n      return true\r\n    },\r\n\r\n    isMobile() {\r\n      const w = window\r\n      const d = document\r\n      const e = d.documentElement\r\n      const g = d.getElementsByTagName('body')[0]\r\n      const x = w.innerWidth || e.clientWidth || g.clientWidth\r\n      const y = w.innerHeight || e.clientHeight || g.clientHeight\r\n      return x < 640\r\n    },\r\n\r\n    setupMap() {\r\n      try {\r\n        this.mymap = new maplibregl.Map({\r\n          bearing: 0,\r\n          container: this.mapID,\r\n          logoPosition: 'bottom-left',\r\n          style: globalStore.getters.mapStyle,\r\n          pitch: 0,\r\n        })\r\n\r\n        const extent = localStorage.getItem(this.$route.fullPath + '-bounds')\r\n\r\n        if (extent) {\r\n          try {\r\n            const lnglat = JSON.parse(extent)\r\n            const mFac = this.isMobile() ? 0 : 1\r\n            const padding = { top: 50 * mFac, bottom: 50 * mFac, right: 50 * mFac, left: 50 * mFac }\r\n\r\n            this.mymap.fitBounds(lnglat, {\r\n              animate: false,\r\n              padding,\r\n            })\r\n          } catch (e) {\r\n            // ignore this, it's ok\r\n          }\r\n        }\r\n        // Start doing stuff AFTER the MapBox library has fully initialized\r\n        this.mymap.on('load', this.mapIsReady)\r\n        this.mymap.on('move', this.handleMapMotion)\r\n        this.mymap.on('click', this.handleEmptyClick)\r\n\r\n        this.mymap.keyboard.disable() // so arrow keys don't pan\r\n      } catch (e) {\r\n        console.error('' + e)\r\n\r\n        // no worries\r\n      }\r\n    },\r\n\r\n    handleClickedMetric(metric: { field: string }) {\r\n      console.log('transit metric:', metric.field)\r\n\r\n      this.activeMetric = metric.field\r\n\r\n      let widthExpression: any = 3\r\n\r\n      switch (metric.field) {\r\n        case 'departures':\r\n          widthExpression = ['max', 2, ['*', 0.03, ['get', 'departures']]]\r\n          break\r\n\r\n        case 'pax':\r\n          widthExpression = ['max', 2, ['*', 0.003, ['get', 'pax']]]\r\n          break\r\n\r\n        case 'loadfac':\r\n          widthExpression = ['max', 2, ['*', 200, ['get', 'loadfac']]]\r\n          break\r\n      }\r\n\r\n      this.mymap.setPaintProperty('transit-link', 'line-width', widthExpression)\r\n    },\r\n\r\n    handleMapMotion() {\r\n      const mapCamera = {\r\n        longitude: this.mymap.getCenter().lng,\r\n        latitude: this.mymap.getCenter().lat,\r\n        bearing: this.mymap.getBearing(),\r\n        zoom: this.mymap.getZoom(),\r\n        pitch: this.mymap.getPitch(),\r\n      }\r\n\r\n      if (!this.isMapMoving) this.$store.commit('setMapCamera', mapCamera)\r\n      this.isMapMoving = true\r\n\r\n      if (this.stopMarkers.length > 0) this.showTransitStops()\r\n    },\r\n\r\n    handleEmptyClick(e: mapboxgl.MapMouseEvent) {\r\n      this.removeStopMarkers()\r\n      this.removeSelectedRoute()\r\n      this.removeAttachedRoutes()\r\n      this.routesOnLink = []\r\n    },\r\n\r\n    showRouteDetails(routeID: string) {\r\n      if (!routeID && !this.selectedRoute) return\r\n\r\n      console.log({ routeID })\r\n\r\n      if (routeID) this.showTransitRoute(routeID)\r\n      else this.showTransitRoute(this.selectedRoute.id)\r\n\r\n      this.showTransitStops()\r\n    },\r\n\r\n    async mapIsReady() {\r\n      const networks = await this.loadNetworks()\r\n      const projection = await this.guessProjection(networks)\r\n      this.vizDetails.projection = projection\r\n      this.projection = this.vizDetails.projection\r\n      console.log(projection)\r\n\r\n      if (networks) this.processInputs(networks)\r\n\r\n      // TODO remove for now until we research whether this causes a memory leak:\r\n      // this.setupKeyListeners()\r\n    },\r\n\r\n    setupKeyListeners() {\r\n      window.addEventListener('keyup', event => {\r\n        if (event.keyCode === 27) {\r\n          // ESC\r\n          this.pressedEscape()\r\n        }\r\n      })\r\n      window.addEventListener('keydown', event => {\r\n        if (event.keyCode === 38) {\r\n          this.pressedArrowKey(-1) // UP\r\n        }\r\n        if (event.keyCode === 40) {\r\n          this.pressedArrowKey(+1) // DOWN\r\n        }\r\n      })\r\n    },\r\n\r\n    fetchXML(props: { worker: any; slug: string; filePath: string; options?: any }) {\r\n      let xmlWorker = props.worker\r\n\r\n      xmlWorker.onmessage = (message: MessageEvent) => {\r\n        // message.data will have .id and either .error or .xml\r\n        const { resolve, reject } = this.resolvers[message.data.id]\r\n\r\n        xmlWorker.terminate()\r\n\r\n        if (message.data.error) reject(message.data.error)\r\n        resolve(message.data.xml)\r\n      }\r\n\r\n      // save the promise by id so we can look it up when we get messages\r\n      const id = this.resolverId++\r\n\r\n      xmlWorker.postMessage({\r\n        id,\r\n        fileSystem: this.fileSystem,\r\n        filePath: props.filePath,\r\n        options: props.options,\r\n      })\r\n\r\n      const promise = new Promise((resolve, reject) => {\r\n        this.resolvers[id] = { resolve, reject }\r\n      })\r\n      return promise\r\n    },\r\n\r\n    async loadNetworks() {\r\n      try {\r\n        if (!this.fileSystem || !this.vizDetails.network || !this.vizDetails.transitSchedule) return\r\n\r\n        this.loadingText = 'Loading networks...'\r\n\r\n        const roads = this.fetchXML({\r\n          worker: this._roadFetcher,\r\n          slug: this.fileSystem.slug,\r\n          filePath: this.myState.subfolder + '/' + this.vizDetails.network,\r\n          options: { attributeNamePrefix: '' },\r\n        })\r\n\r\n        const transit = this.fetchXML({\r\n          worker: this._transitFetcher,\r\n          slug: this.fileSystem.slug,\r\n          filePath: this.myState.subfolder + '/' + this.vizDetails.transitSchedule,\r\n          options: {\r\n            attributeNamePrefix: '',\r\n            alwaysArray: [\r\n              'transitSchedule.transitLine.transitRoute',\r\n              'transitSchedule.transitLine.transitRoute.departures.departure',\r\n            ],\r\n          },\r\n        })\r\n\r\n        // and wait for them to all complete\r\n        const results = await Promise.all([roads, transit])\r\n        return { roadXML: results[0], transitXML: results[1], ridership: [] }\r\n      } catch (e) {\r\n        console.error('TRANSIT:', e)\r\n        this.loadingText = '' + e\r\n        globalStore.commit('error', 'Transit: ' + e)\r\n        return null\r\n      }\r\n    },\r\n\r\n    loadDemandData(filename: string): Promise<any[]> {\r\n      const promise: Promise<any[]> = new Promise<any[]>((resolve, reject) => {\r\n        if (!filename) resolve([])\r\n        this.loadingText = 'Loading demand...'\r\n        const worker = new GzipWorker() as Worker\r\n\r\n        worker.onmessage = (event: MessageEvent) => {\r\n          this.loadingText = 'Processing demand...'\r\n          const csvData = new TextDecoder('utf-8').decode(event.data)\r\n          worker.terminate()\r\n\r\n          Papa.parse(csvData, {\r\n            // preview: 10000,\r\n            header: true,\r\n            skipEmptyLines: true,\r\n            dynamicTyping: true,\r\n            worker: true,\r\n            complete: (results: any) => {\r\n              resolve(this.processDemand(results))\r\n            },\r\n          })\r\n        }\r\n\r\n        worker.postMessage({\r\n          filePath: this.myState.subfolder + '/' + filename,\r\n          fileSystem: this.fileSystem,\r\n        })\r\n      })\r\n      return promise\r\n    },\r\n\r\n    processDemand(results: any) {\r\n      // todo: make sure meta contains fields we need!\r\n      this.loadingText = 'Processing demand data...'\r\n\r\n      // build crossfilter\r\n      console.log('BUILD crossfilter')\r\n      this.cfDemand = crossfilter(results.data)\r\n      this.cfDemandLink = this.cfDemand.dimension((d: any) => d.linkIdsSincePreviousStop)\r\n\r\n      // build link-level passenger ridership\r\n      console.log('COUNTING RIDERSHIP')\r\n\r\n      const linkPassengersById = {} as any\r\n      const group = this.cfDemandLink.group()\r\n      group\r\n        .reduceSum((d: any) => d.passengersAtArrival)\r\n        .all()\r\n        .map(link => {\r\n          linkPassengersById[link.key as any] = link.value\r\n        })\r\n\r\n      // and pax load-factors\r\n      const capacity = {} as any\r\n      group\r\n        .reduceSum((d: any) => d.totalVehicleCapacity)\r\n        .all()\r\n        .map(link => {\r\n          capacity[link.key as any] = link.value\r\n        })\r\n\r\n      // update passenger value in the transit-link geojson.\r\n      for (const transitLink of this._transitLinks.features) {\r\n        transitLink.properties['pax'] = linkPassengersById[transitLink.properties.id]\r\n        transitLink.properties['cap'] = capacity[transitLink.properties.id]\r\n        transitLink.properties['loadfac'] =\r\n          Math.round(\r\n            (1000 * linkPassengersById[transitLink.properties.id]) /\r\n              capacity[transitLink.properties.id]\r\n          ) / 1000\r\n      }\r\n\r\n      this.metrics = this.metrics.concat([\r\n        { field: 'pax', name_en: 'Passengers', name_de: 'Passagiere' },\r\n        { field: 'loadfac', name_en: 'Load Factor', name_de: 'Auslastung' },\r\n      ])\r\n\r\n      const source = this.mymap.getSource('transit-source') as GeoJSONSource\r\n      source.setData(this._transitLinks)\r\n\r\n      this.loadingText = ''\r\n      return []\r\n    },\r\n\r\n    async processInputs(networks: NetworkInputs) {\r\n      this.loadingText = 'Preparing...'\r\n      // spawn transit helper web worker\r\n      this._transitHelper = new TransitSupplyWorker()\r\n\r\n      this._transitHelper.onmessage = async (buffer: MessageEvent) => {\r\n        this.receivedProcessedTransit(buffer)\r\n      }\r\n\r\n      this._transitHelper.postMessage({\r\n        xml: networks,\r\n        projection: this.projection,\r\n      })\r\n    },\r\n\r\n    async receivedProcessedTransit(buffer: MessageEvent) {\r\n      if (buffer.data.status) {\r\n        this.loadingText = buffer.data.status\r\n        return\r\n      }\r\n\r\n      if (buffer.data.error) {\r\n        console.error(buffer.data.error)\r\n        this.$store.commit('error', buffer.data.error)\r\n        return\r\n      }\r\n\r\n      const { network, routeData, stopFacilities, transitLines, mapExtent } = buffer.data\r\n      this._network = network\r\n      this._routeData = routeData\r\n      this._stopFacilities = stopFacilities\r\n      this._transitLines = transitLines\r\n      this._mapExtentXYXY = mapExtent\r\n\r\n      this._transitHelper.terminate()\r\n\r\n      this.loadingText = 'Summarizing departures...'\r\n\r\n      await this.processDepartures()\r\n\r\n      // Build the links layer and add it\r\n      this._transitLinks = await this.constructDepartureFrequencyGeoJson()\r\n      this.addTransitToMap(this._transitLinks)\r\n\r\n      this.handleClickedMetric({ field: 'departures' })\r\n\r\n      localStorage.setItem(this.$route.fullPath + '-bounds', JSON.stringify(this._mapExtentXYXY))\r\n      this.mymap.fitBounds(this._mapExtentXYXY, { animate: false })\r\n\r\n      if (this.vizDetails.demand) await this.loadDemandData(this.vizDetails.demand)\r\n\r\n      this.loadingText = ''\r\n    },\r\n\r\n    async processDepartures() {\r\n      this.loadingText = 'Processing departures...'\r\n\r\n      for (const id in this._transitLines) {\r\n        if (this._transitLines.hasOwnProperty(id)) {\r\n          const transitLine = this._transitLines[id]\r\n          for (const route of transitLine.transitRoutes) {\r\n            for (const linkID of route.route) {\r\n              if (!(linkID in this._departures))\r\n                this._departures[linkID] = { total: 0, routes: new Set() }\r\n\r\n              this._departures[linkID].total += route.departures\r\n              this._departures[linkID].routes.add(route.id)\r\n\r\n              this._maximum = Math.max(this._maximum, this._departures[linkID].total)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    addTransitToMap(geodata: any) {\r\n      this._geoTransitLinks = geodata\r\n\r\n      this.mymap.addSource('transit-source', {\r\n        data: geodata,\r\n        type: 'geojson',\r\n      } as any)\r\n\r\n      this.mymap.addLayer({\r\n        id: 'transit-link',\r\n        source: 'transit-source',\r\n        type: 'line',\r\n        paint: {\r\n          'line-opacity': 1.0,\r\n          'line-width': 1,\r\n          'line-color': ['get', 'color'],\r\n        },\r\n      })\r\n\r\n      this.mymap.on('click', 'transit-link', (e: maplibregl.MapMouseEvent) => {\r\n        this.clickedOnTransitLink(e)\r\n      })\r\n\r\n      // turn \"hover cursor\" into a pointer, so user knows they can click.\r\n      this.mymap.on('mousemove', 'transit-link', (e: maplibregl.MapLayerMouseEvent) => {\r\n        this.mymap.getCanvas().style.cursor = e ? 'pointer' : 'grab'\r\n        this.hoveredOnElement(e)\r\n      })\r\n\r\n      // and back to normal when they mouse away\r\n      this.mymap.on('mouseleave', 'transit-link', () => {\r\n        this.mymap.getCanvas().style.cursor = 'grab'\r\n        this.mapPopup.remove()\r\n      })\r\n    },\r\n\r\n    hoveredOnElement(event: any) {\r\n      const props = event.features[0].properties\r\n\r\n      let content = '<div class=\"map-popup\">'\r\n\r\n      for (const metric of this.metrics) {\r\n        let label = this.$i18n.locale == 'de' ? metric.name_de : metric.name_en\r\n        label = label.replaceAll(' ', '&nbsp;')\r\n\r\n        if (!isNaN(props[metric.field]))\r\n          content += `\r\n          <div style=\"display: flex\">\r\n            <div>${label}:&nbsp;&nbsp;</div>\r\n            <b style=\"margin-left: auto; text-align: right\">${props[metric.field]}</b>\r\n          </div>`\r\n      }\r\n\r\n      content += '<div>'\r\n      this.mapPopup.setLngLat(event.lngLat).setHTML(content).addTo(this.mymap)\r\n    },\r\n\r\n    async constructDepartureFrequencyGeoJson() {\r\n      const geojson = []\r\n\r\n      for (const linkID in this._departures) {\r\n        if (this._departures.hasOwnProperty(linkID)) {\r\n          const link = this._network.links[linkID]\r\n          if (!link) continue\r\n\r\n          const coordinates = [\r\n            [this._network.nodes[link.from].x, this._network.nodes[link.from].y],\r\n            [this._network.nodes[link.to].x, this._network.nodes[link.to].y],\r\n          ]\r\n\r\n          const departures = this._departures[linkID].total\r\n\r\n          // shift scale from 0->1 to 0.25->1.0, because dark blue is hard to see on a black map\r\n          const ratio = 0.25 + (0.75 * (departures - 1)) / this._maximum\r\n          const colorBin = Math.floor(COLOR_CATEGORIES * ratio)\r\n\r\n          let isRail = true\r\n          for (const route of this._departures[linkID].routes) {\r\n            if (this._routeData[route].transportMode === 'bus') {\r\n              isRail = false\r\n            }\r\n          }\r\n\r\n          let line = {\r\n            type: 'Feature',\r\n            geometry: {\r\n              type: 'LineString',\r\n              coordinates: coordinates,\r\n            },\r\n            properties: {\r\n              color: isRail ? '#a03919' : _colorScale[colorBin],\r\n              colorBin: colorBin,\r\n              departures: departures,\r\n              // pax: 0,\r\n              // loadfac: 0,\r\n              // cap: 0,\r\n              id: linkID,\r\n              isRail: isRail,\r\n              from: link.from, // _stopFacilities[fromNode].name || fromNode,\r\n              to: link.to, // _stopFacilities[toNode].name || toNode,\r\n            },\r\n          }\r\n\r\n          line = this.offsetLineByMeters(line, 15)\r\n          geojson.push(line)\r\n        }\r\n      }\r\n\r\n      geojson.sort(function (a: any, b: any) {\r\n        if (a.isRail && !b.isRail) return -1\r\n        if (b.isRail && !a.isRail) return 1\r\n        return 0\r\n      })\r\n\r\n      return { type: 'FeatureCollection', features: geojson }\r\n    },\r\n\r\n    offsetLineByMeters(line: any, metersToTheRight: number) {\r\n      try {\r\n        const offsetLine = turf.lineOffset(line, metersToTheRight, { units: 'meters' })\r\n        return offsetLine\r\n      } catch (e) {\r\n        // offset can fail if points are exactly on top of each other; ignore.\r\n      }\r\n      return line\r\n    },\r\n\r\n    removeStopMarkers() {\r\n      this.stopMarkers = []\r\n    },\r\n\r\n    async showTransitStops() {\r\n      this.removeStopMarkers()\r\n\r\n      const route = this.selectedRoute\r\n      const stopSizeClass = 'stopmarker' // this.mymap.getZoom() > SHOW_STOPS_AT_ZOOM_LEVEL ? 'stop-marker-big' : 'stop-marker'\r\n      const mapBearing = this.mymap.getBearing()\r\n\r\n      let bearing\r\n\r\n      for (const [i, stop] of route.routeProfile.entries()) {\r\n        const coord = [this._stopFacilities[stop.refId].x, this._stopFacilities[stop.refId].y]\r\n        // recalc bearing for every node except the last\r\n        if (i < route.routeProfile.length - 1) {\r\n          const point1 = turf.point([coord[0], coord[1]])\r\n          const point2 = turf.point([\r\n            this._stopFacilities[route.routeProfile[i + 1].refId].x,\r\n            this._stopFacilities[route.routeProfile[i + 1].refId].y,\r\n          ])\r\n          bearing = turf.bearing(point1, point2) - mapBearing // so icons rotate along with map\r\n        }\r\n\r\n        const xy = this.mymap.project([coord[0], coord[1]])\r\n\r\n        // every marker has a latlng coord and a bearing\r\n        const marker = { i, bearing, xy: { x: Math.floor(xy.x), y: Math.floor(xy.y) } }\r\n        this.stopMarkers.push(marker)\r\n      }\r\n    },\r\n\r\n    showTransitRoute(routeID: string) {\r\n      if (!routeID) return\r\n\r\n      const route = this._routeData[routeID]\r\n      // console.log({ selectedRoute: route })\r\n\r\n      this.selectedRoute = route\r\n\r\n      const source = this.mymap.getSource('selected-route-data') as GeoJSONSource\r\n      if (source) {\r\n        source.setData(route.geojson)\r\n      } else {\r\n        this.mymap.addSource('selected-route-data', {\r\n          data: route.geojson,\r\n          type: 'geojson',\r\n        })\r\n      }\r\n\r\n      if (!this.mymap.getLayer('selected-route')) {\r\n        this.mymap.addLayer({\r\n          id: 'selected-route',\r\n          source: 'selected-route-data',\r\n          type: 'line',\r\n          paint: {\r\n            'line-opacity': 1.0,\r\n            'line-width': 5, // ['get', 'width'],\r\n            'line-color': '#097c43', // ['get', 'color'],\r\n          },\r\n        })\r\n      }\r\n    },\r\n\r\n    removeSelectedRoute() {\r\n      if (this.selectedRoute) {\r\n        try {\r\n          this.mymap.removeLayer('selected-route')\r\n        } catch (e) {\r\n          // oh well\r\n        }\r\n        this.selectedRoute = null\r\n      }\r\n    },\r\n\r\n    clickedOnTransitLink(e: any) {\r\n      this.removeStopMarkers()\r\n      this.removeSelectedRoute()\r\n\r\n      // the browser delivers some details that we need, in the fn argument 'e'\r\n      const props = e.features[0].properties\r\n      const routeIDs = this._departures[props.id].routes\r\n\r\n      this.calculatePassengerVolumes(props.id)\r\n\r\n      const routes = []\r\n      for (const id of routeIDs) {\r\n        routes.push(this._routeData[id])\r\n      }\r\n\r\n      // sort by highest departures first\r\n      routes.sort(function (a, b) {\r\n        return a.departures > b.departures ? -1 : 1\r\n      })\r\n\r\n      this.routesOnLink = routes\r\n      this.highlightAllAttachedRoutes()\r\n\r\n      // highlight the first route, if there is one\r\n      if (routes.length > 0) this.showRouteDetails(routes[0].id)\r\n    },\r\n\r\n    calculatePassengerVolumes(id: string) {\r\n      if (!this.cfDemandLink || !this.cfDemand) return\r\n\r\n      this.cfDemandLink.filter(id)\r\n\r\n      const allLinks = this.cfDemand.allFiltered()\r\n      let sum = 0\r\n\r\n      allLinks.map(d => {\r\n        sum = sum + d.passengersBoarding + d.passengersAtArrival - d.passengersAlighting\r\n      })\r\n\r\n      // console.log({ sum, allLinks })\r\n    },\r\n\r\n    removeAttachedRoutes() {\r\n      for (const layerID of this._attachedRouteLayers) {\r\n        try {\r\n          this.mymap.removeLayer('route-' + layerID)\r\n          this.mymap.removeSource('source-route-' + layerID)\r\n        } catch (e) {\r\n          //meh\r\n        }\r\n      }\r\n      this._attachedRouteLayers = []\r\n    },\r\n\r\n    highlightAllAttachedRoutes() {\r\n      this.removeAttachedRoutes()\r\n\r\n      for (const route of this.routesOnLink) {\r\n        this.mymap.addSource('source-route-' + route.id, {\r\n          data: route.geojson,\r\n          type: 'geojson',\r\n        })\r\n        this.mymap.addLayer({\r\n          id: 'route-' + route.id,\r\n          source: 'source-route-' + route.id,\r\n          type: 'line',\r\n          paint: {\r\n            'line-opacity': 0.7,\r\n            'line-width': 8, // ['get', 'width'],\r\n            'line-color': '#ccff33', // ['get', 'color'],\r\n          },\r\n        })\r\n        this._attachedRouteLayers.push(route.id)\r\n      }\r\n    },\r\n\r\n    pressedEscape() {\r\n      this.removeSelectedRoute()\r\n      this.removeStopMarkers()\r\n      this.removeAttachedRoutes()\r\n\r\n      this.selectedRoute = null\r\n      this.routesOnLink = []\r\n    },\r\n\r\n    pressedArrowKey(delta: number) {\r\n      if (!this.selectedRoute) return\r\n\r\n      let i = this.routesOnLink.indexOf(this.selectedRoute)\r\n      i = i + delta\r\n\r\n      if (i < 0 || i >= this.routesOnLink.length) return\r\n\r\n      this.showRouteDetails(this.routesOnLink[i].id)\r\n    },\r\n\r\n    clearData() {\r\n      this._attachedRouteLayers = []\r\n      this._departures = {}\r\n      this._mapExtentXYXY = [180, 90, -180, -90]\r\n      this._maximum = 0\r\n      this._network = { nodes: {}, links: {} }\r\n      this._routeData = {}\r\n      this._stopFacilities = {}\r\n      this._transitLinks = null\r\n      this._transitLines = {}\r\n      this.selectedRoute = null\r\n      this.cfDemand = null\r\n      this.cfDemandLink?.dispose()\r\n      this.resolvers = {}\r\n      this.routesOnLink = []\r\n      this.selectedRoute = {}\r\n      this.stopMarkers = []\r\n      this._linkData = null\r\n      this._geoTransitLinks = null\r\n    },\r\n  },\r\n\r\n  async mounted() {\r\n    this.$store.commit('setFullScreen', !this.thumbnail)\r\n\r\n    this.clearData()\r\n\r\n    this._roadFetcher = new NewXmlFetcher()\r\n    this._transitFetcher = new NewXmlFetcher()\r\n    this._transitHelper = new TransitSupplyWorker()\r\n\r\n    // populate props after we attach, not before!\r\n    this.myState.subfolder = this.subfolder\r\n    this.myState.yamlConfig = this.yamlConfig ?? ''\r\n    this.myState.thumbnail = this.thumbnail\r\n\r\n    const status = await this.getVizDetails()\r\n    if (!status) return\r\n\r\n    if (this.thumbnail) return\r\n\r\n    await this.prepareView()\r\n    this.setupMap()\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.mymap) this.mymap.remove()\r\n\r\n    this.clearData()\r\n\r\n    if (this.xmlWorker) this.xmlWorker.terminate()\r\n    if (this._roadFetcher) this._roadFetcher.terminate()\r\n    if (this._transitFetcher) this._transitFetcher.terminate()\r\n    if (this._transitHelper) this._transitHelper.terminate()\r\n\r\n    this.$store.commit('setFullScreen', false)\r\n  },\r\n})\r\n\r\nconst _colorScale = colormap({ colormap: 'viridis', nshades: COLOR_CATEGORIES })\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.mapboxgl-popup-content {\r\n  padding: 0px 20px 0px 0px;\r\n  opacity: 0.95;\r\n  box-shadow: 0 0 3px #00000080;\r\n}\r\n\r\nh4,\r\np {\r\n  margin: 0px 10px;\r\n}\r\n\r\n.transit-popup {\r\n  padding: 0px 0px;\r\n  margin: 0px 0px;\r\n  border-style: solid;\r\n  border-width: 0px 0px 0px 20px;\r\n}\r\n\r\n.transit-viz {\r\n  position: relative;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: $thumbnailHeight;\r\n  background: url('assets/thumbnail.jpg') no-repeat;\r\n  background-size: cover;\r\n  pointer-events: none;\r\n}\r\n\r\n.map-container {\r\n  position: relative;\r\n  flex: 1;\r\n  pointer-events: auto;\r\n  background: url('assets/thumbnail.jpg') no-repeat;\r\n  background-color: #eee;\r\n  background-size: cover;\r\n  min-height: $thumbnailHeight;\r\n}\r\n\r\n.hide-thumbnail {\r\n  background: none;\r\n  z-index: 0;\r\n}\r\n\r\n.control-panel {\r\n  position: absolute;\r\n  bottom: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  font-size: 0.8rem;\r\n  margin: 0 0 0.5rem 0.5rem;\r\n  pointer-events: auto;\r\n  background-color: var(--bgPanel);\r\n  padding: 0.5rem 0.5rem;\r\n  filter: drop-shadow(0px 2px 4px #22222233);\r\n}\r\n\r\n.is-dashboard {\r\n  position: static;\r\n  margin: 0 0;\r\n  padding: 0.25rem 0 0 0;\r\n  filter: unset;\r\n  background-color: unset;\r\n}\r\n\r\n.legend {\r\n  background-color: var(--bgPanel);\r\n  padding: 0.25rem 0.5rem;\r\n  position: absolute;\r\n  bottom: 3.5rem;\r\n  right: 0.5rem;\r\n}\r\n\r\n.control-label {\r\n  margin: 0 0;\r\n  font-size: 0.8rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.route {\r\n  padding: 5px 0px;\r\n  text-align: left;\r\n  color: var(--text);\r\n  border-left: solid 8px #00000000;\r\n  border-right: solid 8px #00000000;\r\n}\r\n\r\n.route:hover {\r\n  background-color: var(--bgCream3);\r\n  cursor: pointer;\r\n}\r\n\r\nh3 {\r\n  margin: 0px 0px;\r\n  font-size: 1.5rem;\r\n  line-height: 1.7rem;\r\n}\r\n\r\n.route-title {\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  line-height: 1.2rem;\r\n  margin-left: 10px;\r\n  color: var(--link);\r\n}\r\n\r\n.stopmarker {\r\n  width: 12px;\r\n  height: 12px;\r\n  cursor: pointer;\r\n}\r\n\r\n.stop-marker-big {\r\n  background: url('assets/icon-stop-triangle.png') no-repeat;\r\n  background-size: 100%;\r\n  width: 16px;\r\n  height: 16px;\r\n}\r\n\r\n.highlightedRoute {\r\n  background-color: #faffae;\r\n  border-left: solid 8px #606aff;\r\n  color: black;\r\n}\r\n\r\n.highlightedRoute:hover {\r\n  background-color: #faffae;\r\n}\r\n\r\n.bigtitle {\r\n  font-weight: bold;\r\n  font-style: italic;\r\n  font-size: 20px;\r\n  margin: 20px 0px;\r\n}\r\n\r\n.info-header {\r\n  text-align: center;\r\n  background-color: #097c43;\r\n  padding: 0.5rem 0rem;\r\n  border-top: solid 1px #888;\r\n  border-bottom: solid 1px #888;\r\n}\r\n\r\n.project-summary-block {\r\n  width: 16rem;\r\n  grid-column: 1 / 2;\r\n  grid-row: 1 / 2;\r\n  margin: 0px auto auto 0px;\r\n  z-index: 10;\r\n}\r\n\r\n@keyframes slideInFromLeft {\r\n  from {\r\n    transform: translateX(-100%);\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n  }\r\n}\r\n\r\n.stop-marker {\r\n  position: absolute;\r\n  width: 12px;\r\n  height: 12px;\r\n  background: url('assets/icon-stop-triangle.png') no-repeat;\r\n  transform: translate(-50%, -50%);\r\n  background-size: 100%;\r\n  cursor: pointer;\r\n}\r\n\r\n.help-text {\r\n  color: #ccc;\r\n}\r\n\r\n.left-side {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  margin-bottom: auto;\r\n  margin-right: auto;\r\n  display: flex;\r\n  flex-direction: row;\r\n  pointer-events: auto;\r\n  max-height: 40%;\r\n  max-width: 80%;\r\n  opacity: 0.96;\r\n}\r\n\r\n.right-side {\r\n  z-index: 1;\r\n  position: absolute;\r\n  bottom: 3.75rem;\r\n  right: 0;\r\n  color: white;\r\n  display: flex;\r\n  flex-direction: row;\r\n  pointer-events: auto;\r\n}\r\n\r\n.panel-items {\r\n  color: var(--text);\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 0;\r\n  max-height: 100%;\r\n}\r\n\r\n.panel-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  h3 {\r\n    padding: 0.5rem 1rem 1.5rem 0.5rem;\r\n  }\r\n}\r\n\r\n.route-list {\r\n  user-select: none;\r\n  position: relative;\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  cursor: pointer;\r\n  scrollbar-color: #888 var(--bgCream);\r\n  -webkit-scrollbar-color: #888 var(--bgCream);\r\n\r\n  h3 {\r\n    font-size: 1.2rem;\r\n  }\r\n}\r\n\r\n.dashboard-panel {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.metric-buttons {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.metric-button {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.detailed-route-data {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.col {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.map-styles {\r\n  height: 100%;\r\n}\r\n\r\n.status-corner {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 15;\r\n  display: flex;\r\n  flex-direction: row;\r\n  background-color: var(--bgPanel);\r\n  padding: 0rem 3rem;\r\n\r\n  a {\r\n    color: white;\r\n    text-decoration: none;\r\n\r\n    &.router-link-exact-active {\r\n      color: white;\r\n    }\r\n  }\r\n\r\n  p {\r\n    color: var(--textFancy);\r\n    font-weight: normal;\r\n    font-size: 1.3rem;\r\n    line-height: 2.6rem;\r\n    margin: auto 0.5rem auto 0;\r\n    padding: 0 0;\r\n  }\r\n}\r\n</style>\r\n","\r\n.transit-viz(:class=\"{'hide-thumbnail': !thumbnail}\")\r\n  .map-container(:class=\"{'hide-thumbnail': !thumbnail }\")\r\n    div.map-styles(:id=\"mapID\")\r\n      .stop-marker(v-for=\"stop in stopMarkers\" :key=\"stop.i\"\r\n        :style=\"{transform: 'translate(-50%,-50%) rotate('+stop.bearing+'deg)', left: stop.xy.x + 'px', top: stop.xy.y+'px'}\"\r\n      )\r\n\r\n    legend-box.legend(v-if=\"!thumbnail\"\r\n      :rows=\"legendRows\"\r\n    )\r\n\r\n  zoom-buttons(v-if=\"!thumbnail\")\r\n  //- drawing-tool(v-if=\"!thumbnail\")\r\n\r\n  collapsible-panel.left-side(v-if=\"!thumbnail\"\r\n    :darkMode=\"isDarkMode\"\r\n    :locked=\"true\"\r\n    direction=\"left\")\r\n\r\n    .panel-items\r\n      //- .panel-item(v-if=\"vizDetails.title\")\r\n      //-   h3 {{ vizDetails.title }}\r\n      //-   p {{ vizDetails.description }}\r\n\r\n      .route-list(v-if=\"routesOnLink.length > 0\")\r\n        .route(v-for=\"route in routesOnLink\"\r\n            :key=\"route.uniqueRouteID\"\r\n            :class=\"{highlightedRoute: selectedRoute && route.id === selectedRoute.id}\"\r\n            @click=\"showRouteDetails(route.id)\")\r\n          .route-title {{route.id}}\r\n          .detailed-route-data\r\n            .col\r\n              p: b {{route.departures}} departures\r\n              p First: {{route.firstDeparture}}\r\n              p Last: {{route.lastDeparture}}\r\n            .col(v-if=\"route.passengersAtArrival\")\r\n              p: b {{ route.passengersAtArrival }} passengers\r\n              p {{ route.totalVehicleCapacity }} capacity\r\n\r\n  .control-panel(v-if=\"!thumbnail\"\r\n    :class=\"{'is-dashboard': config !== undefined }\"\r\n  )\r\n\r\n    .panel-item\r\n      p.control-label {{  $t('metrics') }}:\r\n      .metric-buttons\r\n        button.button.is-small.metric-button(\r\n          v-for=\"metric,i in metrics\" :key=\"metric.field\"\r\n          :style=\"{'color': activeMetric===metric.field ? 'white' : buttonColors[i], 'border': `1px solid ${buttonColors[i]}`, 'border-right': `0.4rem solid ${buttonColors[i]}`,'border-radius': '4px', 'background-color': activeMetric===metric.field ? buttonColors[i] : isDarkMode ? '#333':'white'}\"\r\n          @click=\"handleClickedMetric(metric)\") {{ $i18n.locale === 'de' ? metric.name_de : metric.name_en }}\r\n\r\n  .status-corner(v-if=\"!thumbnail && loadingText\")\r\n    p {{ loadingText }}\r\n\r\n"],"names":["__vue2_script$1","defineComponent","render","_vm","_h","_c","staticRenderFns","__vue2_script","item","i18n","DEFAULT_PROJECTION","COLOR_CATEGORIES","MyComponent","CollapsiblePanel","LeftDataPanel","LegendBox","DrawingTool","ZoomButtons","metrics","Popup","globalStore","HTTPFileSystem","svnProject","a","bearing","longitude","latitude","zoom","pitch","ColorScheme","_a","_b","title","files","network","allNetworks","f","demandFiles","networks","_e","_d","_g","_f","storagePath","goodEPSG","outputConfigs","xmlConfigFileName","p","entry","networkProjection","filename","text","yaml","err","msg","t","w","d","g","x","maplibregl","extent","lnglat","mFac","padding","e","metric","widthExpression","mapCamera","routeID","projection","event","props","xmlWorker","message","resolve","reject","id","roads","transit","results","worker","GzipWorker","csvData","Papa","crossfilter","linkPassengersById","group","link","capacity","transitLink","TransitSupplyWorker","buffer","routeData","stopFacilities","transitLines","mapExtent","transitLine","route","linkID","geodata","content","label","geojson","coordinates","departures","ratio","colorBin","isRail","line","_colorScale","b","metersToTheRight","turf.lineOffset","mapBearing","stop","coord","point1","turf.point","point2","turf.bearing","xy","marker","source","routeIDs","routes","allLinks","sum","layerID","delta","i","NewXmlFetcher","colormap","$event"],"mappings":"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"}