{"version":3,"file":"XmlViewer.03f9eae7.js","sources":["../../src/plugins/xml-viewer/TreeItem.vue","../../src/plugins/xml-viewer/TreeItem.vue?vue&type=template&lang.js","../../src/plugins/xml-viewer/TreeView.vue","../../src/plugins/xml-viewer/TreeView.vue?vue&type=template&lang.js","../../src/plugins/xml-viewer/XmlViewer.vue","../../src/plugins/xml-viewer/XmlViewer.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\nli\r\n  .leaf-node(@click=\"toggle\")\r\n    .leaf-nav-title\r\n      .toggle(v-if=\"children.length\")\r\n        i.fa(\r\n          :class=\"{'fa-plus-square': !isOpen, 'fa-minus-square': isOpen}\"\r\n          style=\"font-size: 0.7rem; margin: 5px 0 auto -8px;\"\r\n        )\r\n      b.leaf-label {{ elementId }}\r\n\r\n    .leaf-text(v-if=\"text\") &nbsp;&nbsp;{{ text }}\r\n\r\n    .leaf-attribute(v-for=\"attribute in attributes\")\r\n      span &nbsp;&nbsp;{{ attribute[0] }}:&nbsp;\r\n      b \"{{ attribute[1] }}\"\r\n\r\n  ul.children(v-if=\"isFolder && isOpen\")\r\n    tree-item.item(\r\n      v-for=\"(child, index) in children\"\r\n      :key=\"index\"\r\n      :item=\"child\"\r\n      :root=\"false\"\r\n      :expandAll=\"expandAll\"\r\n      :numberOfUnfoldLevel=\"numberOfUnfoldLevel\"\r\n      :level=\"level + 1\"\r\n      @navigate=\"$emit('navigate', $event)\"\r\n    )\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from 'vue'\r\n\r\nexport default Vue.component('tree-item', {\r\n  props: {\r\n    item: { type: Object, required: true },\r\n    expandAll: { type: Boolean },\r\n    level: { type: Number },\r\n    numberOfUnfoldLevel: { type: Number },\r\n  },\r\n  data() {\r\n    return {\r\n      isOpen: this.expandAll, // this.item.level < 2, // default to all-open\r\n      text: '',\r\n      elementId: '',\r\n      children: [] as any[],\r\n      attributes: [] as any[],\r\n    }\r\n  },\r\n  mounted() {\r\n    const thing = { ...this.item } as any // could be anything really!\r\n    this.attributes = this.getAttributes(thing)\r\n    delete thing[':@']\r\n\r\n    const keys = Object.keys(thing)\r\n    if (keys.length !== 1) {\r\n      console.log('WHAT', keys)\r\n    }\r\n\r\n    this.elementId = keys[0]\r\n    this.children = thing[keys[0]] || []\r\n\r\n    // figure out #text content\r\n    if (this.children.length === 1 && this.children[0]['#text']) {\r\n      this.text = this.children[0]['#text']\r\n      this.children = []\r\n    }\r\n\r\n    if (this.level < this.numberOfUnfoldLevel + 1) {\r\n      this.isOpen = true\r\n    } else {\r\n      this.isOpen = this.expandAll\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    getAttributes(thing: any) {\r\n      // XML parser returns attributes in a ':@' object\r\n      const attr = thing[':@'] as any\r\n      if (!attr) return []\r\n\r\n      return Object.entries(attr).map(entry => {\r\n        const [k, v] = entry\r\n        const key = k.startsWith('$$') ? k.substring(2) : k\r\n        return [key, v]\r\n      })\r\n    },\r\n\r\n    toggle() {\r\n      this.isOpen = !this.isOpen\r\n    },\r\n  },\r\n\r\n  computed: {\r\n    isFolder(): boolean {\r\n      return this.children.length > 0\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\nul {\r\n  list-style: none outside none;\r\n  margin-bottom: 0px;\r\n}\r\n\r\nli {\r\n  padding-left: 12px;\r\n  line-height: 1.2rem;\r\n}\r\n\r\n.item {\r\n  cursor: pointer;\r\n}\r\n\r\n.leaf-node {\r\n  display: flex;\r\n  // flex-direction: row;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.leaf-label:hover {\r\n  background-color: var(--bgHover);\r\n}\r\n\r\n.leaf-nav-title {\r\n  display: flex;\r\n  margin-right: 0px;\r\n}\r\n\r\n.leaf-text {\r\n  font-weight: bold;\r\n  font-style: italic;\r\n  color: var(--linkHover);\r\n}\r\n\r\n.leaf-label {\r\n  color: var(--link);\r\n  margin-left: 0.2rem;\r\n}\r\n\r\n.toggle {\r\n  margin-top: -1px;\r\n  color: var(--textPale);\r\n}\r\n\r\n.toggle:hover {\r\n  color: var(--textVeryPale);\r\n}\r\n</style>\r\n","\r\nli\r\n  .leaf-node(@click=\"toggle\")\r\n    .leaf-nav-title\r\n      .toggle(v-if=\"children.length\")\r\n        i.fa(\r\n          :class=\"{'fa-plus-square': !isOpen, 'fa-minus-square': isOpen}\"\r\n          style=\"font-size: 0.7rem; margin: 5px 0 auto -8px;\"\r\n        )\r\n      b.leaf-label {{ elementId }}\r\n\r\n    .leaf-text(v-if=\"text\") &nbsp;&nbsp;{{ text }}\r\n\r\n    .leaf-attribute(v-for=\"attribute in attributes\")\r\n      span &nbsp;&nbsp;{{ attribute[0] }}:&nbsp;\r\n      b \"{{ attribute[1] }}\"\r\n\r\n  ul.children(v-if=\"isFolder && isOpen\")\r\n    tree-item.item(\r\n      v-for=\"(child, index) in children\"\r\n      :key=\"index\"\r\n      :item=\"child\"\r\n      :root=\"false\"\r\n      :expandAll=\"expandAll\"\r\n      :numberOfUnfoldLevel=\"numberOfUnfoldLevel\"\r\n      :level=\"level + 1\"\r\n      @navigate=\"$emit('navigate', $event)\"\r\n    )\r\n\r\n","<template lang=\"pug\">\r\nul\r\n  tree-item.item(\r\n    :item=\"treeData || {}\"\r\n    :expandAll=\"expandAll\"\r\n    :level=\"level + 1\"\r\n    :numberOfUnfoldLevel=\"numberOfUnfoldLevel\"\r\n  )\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from 'vue'\r\nimport TreeItem from './TreeItem.vue'\r\nimport { faLevelDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default Vue.component('tree-view', {\r\n  props: {\r\n    initialData: {},\r\n    expandAll: { type: Boolean },\r\n    level: { type: Number },\r\n    numberOfUnfoldLevel: { type: Number },\r\n  },\r\n  components: {\r\n    TreeItem,\r\n  },\r\n  data: function () {\r\n    return {\r\n      treeData: this.initialData,\r\n    }\r\n  },\r\n  methods: {},\r\n})\r\n</script>\r\n\r\n<style scoped></style>\r\n","\r\nul\r\n  tree-item.item(\r\n    :item=\"treeData || {}\"\r\n    :expandAll=\"expandAll\"\r\n    :level=\"level + 1\"\r\n    :numberOfUnfoldLevel=\"numberOfUnfoldLevel\"\r\n  )\r\n\r\n","<template lang=\"pug\">\r\n.mycomponent(:class=\"{'is-thumbnail': thumbnail}\")\r\n  b-input.searchbox(\r\n    type=\"search\"\r\n    icon-pack=\"fas\"\r\n    icon=\"search\"\r\n    placeholder=\"search...\"\r\n    v-model=\"searchTerm\"\r\n  )\r\n  .viewer\r\n    tree-view.things(v-if=\"isLoaded\"\r\n      :initialData=\"viewXml\"\r\n      :expandAll=\"isSearch\"\r\n      :level=\"1\"\r\n      :numberOfUnfoldLevel=\"numberOfUnfoldLevel\"\r\n    )\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {},\r\n    de: {},\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\nimport debounce from 'debounce'\r\n\r\nimport globalStore from '@/store'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport TreeView from './TreeView.vue'\r\nimport XmlWorker from '@/workers/NewXmlFetcher.worker?worker'\r\n\r\nimport { FileSystemConfig, UI_FONT, BG_COLOR_DASHBOARD } from '@/Globals'\r\n\r\n//@ts-ignore\r\nconst isChrome = !!window.showDirectoryPicker // Chrome has File Access API\r\nconst isFirefox = !isChrome\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'XmlViewer',\r\n  components: { TreeView },\r\n  i18n,\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    config: { type: Object as any },\r\n    resize: Object as any,\r\n    thumbnail: Boolean,\r\n    yamlConfig: String,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      globalState: globalStore.state,\r\n      vizDetails: { title: '', description: '', file: '' },\r\n      loadingText: '',\r\n      id: `id-${Math.floor(1e12 * Math.random())}` as any,\r\n      xmlWorker: null as any,\r\n      viewXml: {} as any,\r\n      fullXml: null as any,\r\n      searchXml: null as any,\r\n      searchTerm: '',\r\n      debounceSearch: {} as any,\r\n      isLoaded: false,\r\n      isSearch: false,\r\n      numberOfUnfoldLevel: 1,\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    searchTerm() {\r\n      this.debounceSearch()\r\n    },\r\n  },\r\n\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n  },\r\n\r\n  async mounted() {\r\n    this.debounceSearch = debounce(this.handleSearch, 500)\r\n\r\n    try {\r\n      await this.getVizDetails()\r\n      // only continue if we are on a real page and not the file browser\r\n      if (this.thumbnail) return\r\n\r\n      const answer = await this.fetchXml()\r\n\r\n      //TODO remove '?xml' correctly\r\n      this.fullXml = answer[1]\r\n\r\n      this.viewXml = this.fullXml\r\n      this.isLoaded = true\r\n    } catch (err) {\r\n      const e = err as any\r\n      console.error({ e })\r\n      this.loadingText = '' + e\r\n    }\r\n\r\n    this.numberOfUnfoldLevel = this.config.unfoldLevel + 1\r\n  },\r\n\r\n  methods: {\r\n    async getVizDetails() {\r\n      if (this.config) {\r\n        // config came in from the dashboard and is already parsed\r\n        this.vizDetails = { ...this.config }\r\n        this.vizDetails.file = `/${this.subfolder}/${this.config.file}`\r\n        this.$emit('title', this.vizDetails.title || this.vizDetails.file || 'XML')\r\n      } else {\r\n        // Otherwise this is an XML file\r\n        const filename = this.yamlConfig ?? ''\r\n        this.vizDetails = {\r\n          title: filename,\r\n          description: '',\r\n          file: this.subfolder + '/' + filename,\r\n        }\r\n      }\r\n      if (!this.vizDetails.title) this.vizDetails.title = 'XML'\r\n      this.$emit('title', this.vizDetails.title)\r\n    },\r\n\r\n    async fetchXml() {\r\n      this.loadingText = `Loading ${this.vizDetails.file}...`\r\n\r\n      if (this.xmlWorker) this.xmlWorker.terminate()\r\n      this.xmlWorker = new XmlWorker()\r\n\r\n      return new Promise<any>((resolve, reject) => {\r\n        this.xmlWorker.onmessage = (message: MessageEvent) => {\r\n          this.xmlWorker.terminate()\r\n\r\n          if (message.data.error) reject(message.data.error)\r\n          resolve(message.data.xml)\r\n        }\r\n\r\n        this.xmlWorker.postMessage({\r\n          id: 1,\r\n          fileSystem: this.fileSystem,\r\n          filePath: this.vizDetails.file,\r\n          options: {\r\n            ignoreAttributes: false,\r\n            preserveOrder: true,\r\n            attributeNamePrefix: '$$',\r\n            isFirefox,\r\n          },\r\n        })\r\n      })\r\n    },\r\n\r\n    async handleSearch() {\r\n      console.log('search:', this.searchTerm)\r\n\r\n      if (!this.searchTerm) {\r\n        // clear empty search\r\n        this.viewXml = this.fullXml\r\n        this.isSearch = false\r\n      } else {\r\n        const searchXML = this.findSearchTermInElement(\r\n          [this.fullXml],\r\n          this.searchTerm.toLocaleLowerCase()\r\n        )\r\n        this.viewXml = searchXML[0]\r\n        this.isSearch = true\r\n      }\r\n      this.isLoaded = false\r\n      await this.$nextTick()\r\n      this.isLoaded = true\r\n    },\r\n\r\n    findSearchTermInElement(element: any[], term: string): any[] {\r\n      if (term !== this.searchTerm.toLocaleLowerCase()) return []\r\n\r\n      const found = [] as any[]\r\n      for (const node of element) {\r\n        const items = { ...node }\r\n        // check attributes\r\n        if (items[':@']) {\r\n          const attributes = JSON.stringify(items[':@']).toLocaleLowerCase()\r\n          if (attributes.indexOf(term) > -1) {\r\n            found.push(node)\r\n            continue\r\n          }\r\n        }\r\n\r\n        // check #text\r\n        if (items['#text']) {\r\n          // convert to string!\r\n          if (`${items['#text']}`.toLocaleLowerCase().indexOf(term) > -1) {\r\n            found.push(node)\r\n          }\r\n          continue\r\n        }\r\n\r\n        // check children\r\n        const attr = items[':@']\r\n        delete items[':@']\r\n        const key = Object.keys(items)[0]\r\n        const children = items[key]\r\n        if (!children.length) continue\r\n\r\n        // recurse into kids:\r\n        const foundInChildren = this.findSearchTermInElement(children, term)\r\n        if (foundInChildren.length) {\r\n          const leaf = {} as any\r\n          if (attr) leaf[':@'] = attr\r\n          leaf[key] = foundInChildren\r\n          found.push(leaf)\r\n        }\r\n      }\r\n      return found\r\n    },\r\n  },\r\n})\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.mycomponent {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  // margin: 1rem;\r\n}\r\n\r\n.mycomponent.is-thumbnail {\r\n  padding-top: 0;\r\n  height: $thumbnailHeight;\r\n}\r\n\r\n.viewer {\r\n  height: 100%;\r\n  width: 100%;\r\n  flex: 1;\r\n  margin: 0 auto;\r\n  overflow: auto;\r\n}\r\n\r\n.viewer.is-thumbnail {\r\n  padding: 0rem 0rem;\r\n  margin: 0 0;\r\n}\r\n\r\n.things {\r\n  background-color: var(--bgBold);\r\n  width: 100%;\r\n  padding: 0.25rem 0;\r\n}\r\n\r\n.searchbox {\r\n  padding: 1px 0px;\r\n}\r\n</style>\r\n","\r\n.mycomponent(:class=\"{'is-thumbnail': thumbnail}\")\r\n  b-input.searchbox(\r\n    type=\"search\"\r\n    icon-pack=\"fas\"\r\n    icon=\"search\"\r\n    placeholder=\"search...\"\r\n    v-model=\"searchTerm\"\r\n  )\r\n  .viewer\r\n    tree-view.things(v-if=\"isLoaded\"\r\n      :initialData=\"viewXml\"\r\n      :expandAll=\"isSearch\"\r\n      :level=\"1\"\r\n      :numberOfUnfoldLevel=\"numberOfUnfoldLevel\"\r\n    )\r\n\r\n"],"names":["__vue2_script$1","Vue","thing","keys","attr","entry","k","v","render","_vm","_h","_c","attribute","child","index","$event","staticRenderFns","__vue2_script","TreeItem","i18n","isChrome","isFirefox","MyComponent","defineComponent","TreeView","globalStore","HTTPFileSystem","svnProject","a","debounce","answer","err","e","filename","_a","XmlWorker","resolve","reject","message","searchXML","element","term","found","node","items","key","children","foundInChildren","leaf","$$v"],"mappings":"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"}