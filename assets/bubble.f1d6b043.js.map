{"version":3,"file":"bubble.f1d6b043.js","sources":["../../src/dash-panels/bubble.vue","../../src/dash-panels/bubble.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\nVuePlotly.yplot(\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n)\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport DashboardDataManager, { FilterDefinition } from '@/js/DashboardDataManager'\r\nimport VuePlotly from '@/components/VuePlotly.vue'\r\n\r\nimport { FileSystemConfig, Status, BG_COLOR_DASHBOARD, UI_FONT } from '@/Globals'\r\nimport globalStore from '@/store'\r\nimport { buildCleanTitle } from './_allPanels'\r\n\r\nexport default defineComponent({\r\n  name: 'BubbleChartPanel',\r\n  components: { VuePlotly },\r\n  props: {\r\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\r\n    subfolder: { type: String, required: true },\r\n    files: { type: Array, required: true },\r\n    config: { type: Object as any, required: true },\r\n    cardTitle: { type: String, required: true },\r\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\r\n    cardId: String,\r\n  },\r\n  data: () => {\r\n    return {\r\n      globalState: globalStore.state,\r\n\r\n      // dataSet is either x,y or allRows[]\r\n      dataSet: {} as { x?: any[]; y?: any[]; allRows?: any },\r\n      id: 'bubble-' + Math.floor(1e12 * Math.random()),\r\n      layout: {\r\n        height: 300,\r\n        margin: { t: 8, b: 0, l: 0, r: 0, pad: 2 },\r\n        font: {\r\n          color: '#444444',\r\n          family: UI_FONT,\r\n        },\r\n        xaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 12 },\r\n          animate: true,\r\n        },\r\n        yaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 16 },\r\n          animate: true,\r\n        },\r\n        legend: {\r\n          orientation: 'v',\r\n          x: 1,\r\n          y: 1,\r\n        },\r\n      },\r\n\r\n      data: [] as any[],\r\n\r\n      options: {\r\n        displaylogo: false,\r\n        responsive: true,\r\n        modeBarButtonsToRemove: [\r\n          'pan2d',\r\n          'zoom2d',\r\n          'select2d',\r\n          'lasso2d',\r\n          'zoomIn2d',\r\n          'zoomOut2d',\r\n          'autoScale2d',\r\n          'hoverClosestCartesian',\r\n          'hoverCompareCartesian',\r\n          'resetScale2d',\r\n          'toggleSpikelines',\r\n          'resetViewMapbox',\r\n        ],\r\n        toImageButtonOptions: {\r\n          format: 'png', // one of png, svg, jpeg, webp\r\n          filename: 'bubble-chart',\r\n          width: null,\r\n          height: null,\r\n        },\r\n      },\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.updateTheme()\r\n    this.options.toImageButtonOptions.filename = buildCleanTitle(this.cardTitle, this.subfolder)\r\n\r\n    this.dataSet = await this.loadData()\r\n    this.updateChart()\r\n\r\n    this.$emit('dimension-resizer', { id: this.cardId, resizer: this.changeDimensions })\r\n    this.$emit('isLoaded')\r\n  },\r\n  beforeDestroy() {\r\n    this.datamanager?.removeFilterListener(this.config, this.handleFilterChanged)\r\n  },\r\n\r\n  watch: {\r\n    'globalState.isDarkMode'() {\r\n      this.updateTheme()\r\n    },\r\n  },\r\n  methods: {\r\n    changeDimensions(dimensions: { width: number; height: number }) {\r\n      this.layout = Object.assign({}, this.layout, dimensions)\r\n    },\r\n\r\n    updateTheme() {\r\n      const colors = {\r\n        paper_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        plot_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        font: { color: this.globalState.isDarkMode ? '#cccccc' : '#444444' },\r\n      }\r\n      this.layout = Object.assign({}, this.layout, colors)\r\n    },\r\n\r\n    async loadData() {\r\n      if (!this.datamanager) return {}\r\n\r\n      try {\r\n        let dataset = await this.datamanager.getDataset(this.config)\r\n\r\n        // no filter? we are done\r\n        if (!this.config.filters) return dataset\r\n\r\n        // filter data before returning:\r\n        this.datamanager.addFilterListener(this.config, this.handleFilterChanged)\r\n\r\n        for (const [column, value] of Object.entries(this.config.filters)) {\r\n          const filter: FilterDefinition = {\r\n            dataset: this.config.dataset,\r\n            column: column,\r\n            value: value,\r\n            range: Array.isArray(value),\r\n          }\r\n          this.datamanager.setFilter(filter)\r\n        }\r\n        // empty for now; filtered data will come back later via handleFilterChanged async.\r\n        return { allRows: {} }\r\n      } catch (e) {\r\n        console.error('' + e)\r\n      }\r\n      return { allRows: {} }\r\n    },\r\n\r\n    handleFilterChanged() {\r\n      if (!this.datamanager) return\r\n\r\n      const { filteredRows } = this.datamanager.getFilteredDataset(this.config) as any\r\n\r\n      if (!filteredRows || !filteredRows.length) {\r\n        this.dataSet = { allRows: {} }\r\n      } else {\r\n        const allRows = {} as any\r\n\r\n        const keys = Object.keys(filteredRows[0])\r\n        keys.forEach(key => (allRows[key] = { name: key, values: [] as any }))\r\n\r\n        filteredRows.forEach((row: any) => {\r\n          keys.forEach(key => allRows[key].values.push(row[key]))\r\n        })\r\n        this.dataSet = { allRows }\r\n      }\r\n\r\n      this.updateChart()\r\n    },\r\n\r\n    updateChart() {\r\n      this.layout.xaxis.title.text = this.config.xAxisTitle || this.config.xAxisName || ''\r\n      this.layout.yaxis.title.text = this.config.yAxisTitle || this.config.yAxisName || ''\r\n\r\n      try {\r\n        if (this.config.groupBy) this.updateChartWithGroupBy()\r\n        else this.updateChartSimple()\r\n      } catch (e) {\r\n        const msg = '' + e\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg,\r\n          desc: 'Add a desription...',\r\n        })\r\n      }\r\n    },\r\n\r\n    updateChartWithGroupBy() {\r\n      // tba\r\n    },\r\n\r\n    // size circle\r\n    // color is data\r\n    updateChartSimple() {\r\n      const factor = this.config.factor || 1.0\r\n\r\n      var legendname = this.config.bubble\r\n      if (this.config.legendName) legendname = this.config.legendName\r\n      if (this.config.legendTitle) legendname = this.config.legendTitle\r\n\r\n      const allRows = this.dataSet.allRows || ({} as any)\r\n\r\n      if (Object.keys(allRows).length === 0) return\r\n\r\n      // bubble sizes\r\n      let bubble = allRows[this.config.bubble].values.map((v: any) => v * factor)\r\n      if (this.config.skipFirstRow) bubble = bubble.slice(1)\r\n\r\n      let x = allRows[this.config.x].values || []\r\n      if (this.config.skipFirstRow) x = x.slice(1)\r\n\r\n      let y = allRows[this.config.y].values\r\n      if (this.config.skipFirstRow) y = y.slice(1)\r\n\r\n      this.data = [\r\n        {\r\n          x: x,\r\n          y: y,\r\n          name: legendname,\r\n          mode: 'markers',\r\n          type: 'scatter',\r\n          textinfo: 'label+percent',\r\n          textposition: 'inside',\r\n          automargin: true,\r\n          showlegend: true,\r\n          marker: { size: bubble },\r\n        },\r\n      ]\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.myplot {\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n}\r\n</style>\r\n","\r\nVuePlotly.yplot(\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n)\r\n"],"names":["__vue2_script","defineComponent","VuePlotly","globalStore","UI_FONT","buildCleanTitle","_a","dimensions","colors","BG_COLOR_DASHBOARD","dataset","column","value","filter","e","filteredRows","allRows","keys","key","row","msg","Status","factor","legendname","bubble","v","x","y","render","_vm","_h","_c","staticRenderFns"],"mappings":"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"}