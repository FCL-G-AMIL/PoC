{"version":3,"file":"util.5fe75924.js","sources":["../../node_modules/fast-xml-parser/src/util.js","../../node_modules/fast-xml-parser/src/validator.js","../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../../node_modules/strnum/strnum.js","../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../../node_modules/fast-xml-parser/src/fxp.js","../../node_modules/fflate/esm/browser.js","../../src/js/util.ts"],"sourcesContent":["'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.isFirefox && (tagName === \"link\" || tagName == \"node\")) console.log(tagName)\r\n\r\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup ){\n            listTagVal += this.j2x(item, level + 1).val;\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level)\n          }\n        } else {\n          listTagVal += this.buildTextValNode(item, key, '', level);\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, '', level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\n// see fleb note\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new u32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return [b, r];\n};\nvar _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 0; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, buf, st) {\n    // source length\n    var sl = dat.length;\n    if (!sl || (st && st.f && !st.l))\n        return buf || new u8(0);\n    // have to estimate size\n    var noBuf = !buf || st;\n    // no state\n    var noSt = !st || st.i;\n    if (!st)\n        st = {};\n    // Assumes roughly 33% compression ratio average\n    if (!buf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (noBuf)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >>> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17;\n        if (noBuf)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (noBuf)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                for (; bt < end; bt += 4) {\n                    buf[bt] = buf[bt - dt];\n                    buf[bt + 1] = buf[bt + 1 - dt];\n                    buf[bt + 2] = buf[bt + 2 - dt];\n                    buf[bt + 3] = buf[bt + 3 - dt];\n                }\n                bt = end;\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    return bt == buf.length ? buf : slc(buf, 0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n    d[o + 2] |= v >>> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return [et, 0];\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return [v, 1];\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return [new u8(tr), mbt];\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return [cl.subarray(0, cli), s];\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >>> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];\n    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];\n    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];\n    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        lcfreq[lclt[i] & 31]++;\n    for (var i = 0; i < lcdt.length; ++i)\n        lcfreq[lcdt[i] & 31]++;\n    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n    if (flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >>> 5) & 127), p += clct[i] >>> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        if (syms[i] > 255) {\n            var len = (syms[i] >>> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (syms[i] >>> 23) & 31), p += fleb[len];\n            var dst = syms[i] & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (syms[i] >>> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, lst) {\n    var s = dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var pos = 0;\n    if (!lvl || s < 8) {\n        for (var i = 0; i <= s; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[pos >> 3] = lst;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n    }\n    else {\n        var opt = deo[lvl - 1];\n        var n = opt >>> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = new u16(32768), head = new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new u32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos\n        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;\n        for (; i < s; ++i) {\n            // hash value\n            // deopt when i > s - 3 - at end, deopt acceptable\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && rem > 423) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = (imod - pimod) & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = (i - dif + j + 32768) & 32767;\n                                    var pti = prev[ti];\n                                    var cd = (ti - pti + 32768) & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += (imod - pimod + 32768) & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one Uint32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        // this is the easiest way to avoid needing to maintain state\n        if (!lst && pos & 7)\n            pos = wfblk(w, pos + 1, et);\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Alder32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a >>> 8) << 16 | (b & 255) << 8 | (b >>> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, !st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return [fnStr, td];\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    var _a;\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];\n        ch[id] = wcln(fns[m], fnStr, td_1);\n    }\n    var td = mrg({}, ch[id][1]);\n    return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gu8]; };\nvar bDflt = function () { return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zlv]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get u8\nvar gu8 = function (o) { return o && o.size && new u8(o.size); };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += d[10] | (d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return ((d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) | (d[l - 1] << 24)) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + ((o.filename && (o.filename.length + 1)) || 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (fl ? (32 - 2 * fl) : 1);\n};\n// zlib valid\nvar zlv = function (d) {\n    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if (d[1] & 32)\n        err(6, 'invalid zlib data: preset dictionaries not supported');\n};\nfunction AsyncCmpStrm(opts, cb) {\n    if (!cb && typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n// zlib footer: -4 to -0 is Adler32\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (!cb && typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, !f), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.d = final;\n        this.p(chunk, final || false);\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an inflation stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Inflate(cb) {\n        this.s = {};\n        this.p = new u8(0);\n        this.ondata = cb;\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        var l = this.p.length;\n        var n = new u8(l + c.length);\n        n.set(this.p), n.set(c, l), this.p = n;\n    };\n    Inflate.prototype.c = function (final) {\n        this.d = this.s.i = final || false;\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.o, this.s);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous inflation stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncInflate(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, 0, function () {\n            var strm = new Inflate();\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gu8(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, out) {\n    return inflt(data, out);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        this.c.p(c);\n        this.l += c.length;\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a GUNZIP stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Gunzip(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            var s = this.p.length > 3 ? gzs(this.p) : 4;\n            if (s >= this.p.length && !final)\n                return;\n            this.p = this.p.subarray(s), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 8)\n                err(6, 'invalid gzip data');\n            this.p = this.p.subarray(0, -8);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous GUNZIP stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncGunzip(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, 0, function () {\n            var strm = new Gunzip();\n            onmessage = astrm(strm);\n        }, 9);\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, out) {\n    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        this.c.p(c);\n        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates a Zlib decompression stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Unzlib(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 2 && !final)\n                return;\n            this.p = this.p.subarray(2), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous Zlib decompression stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncUnzlib(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, 0, function () {\n            var strm = new Unzlib();\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gu8(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, out) {\n    return inflt((zlv(data), data.subarray(2, -4)), out);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    /**\n     * Creates a decompression stream\n     * @param cb The callback to call whenever data is decompressed\n     */\n    function Decompress(cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_1 = this;\n                var cb = function () { _this_1.ondata.apply(_this_1, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(cb)\n                        : new this.Z(cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    /**\n   * Creates an asynchronous decompression stream\n   * @param cb The callback to call whenever data is decompressed\n   */\n    function AsyncDecompress(cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, out) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, out)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, out)\n            : unzlibSync(data, out);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return [r, slc(d, i - 1)];\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), ch = _a[0], np = _a[1];\n        if (final) {\n            if (np.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = np;\n        this.ondata(ch, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td)\n        return td.decode(dat);\n    else {\n        var _a = dutf8(dat), out = _a[0], ext = _a[1];\n        if (ext.length)\n            err(8);\n        return out;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >>> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, new u8(su)));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n","import micromatch from 'micromatch'\r\nimport { XMLParser } from 'fast-xml-parser'\r\nimport { decompressSync } from 'fflate'\r\n\r\n/**\r\n * Useful for converting loaded PNG images to CSS\r\n * @param buffer input (e.g. PNG content)\r\n * @returns base64-converted output\r\n */\r\nexport function arrayBufferToBase64(buffer: any) {\r\n  let binary = ''\r\n  const bytes = new Uint8Array(buffer)\r\n  const len = bytes.byteLength\r\n  for (let i = 0; i < len; i++) {\r\n    binary += String.fromCharCode(bytes[i])\r\n  }\r\n  return window.btoa(binary)\r\n}\r\n\r\n/**\r\n * Concat multiple typed arrays into one.\r\n * @param arrays a list of  typed arrays\r\n * @returns\r\n */\r\nexport function mergeTypedArrays(arrays: Array<any>[]): Array<any> {\r\n  if (arrays.length == 0) return new Array()\r\n  if (arrays.length == 1) return arrays[0]\r\n\r\n  const total = arrays.map(a => a.length).reduce((t, n) => t + n)\r\n\r\n  const c = Object.getPrototypeOf(arrays[0]).constructor\r\n  const result = new c(total)\r\n\r\n  let n = 0\r\n  for (const arr of arrays) {\r\n    result.set(arr, n)\r\n    n += arr.length\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Debounce any function for better UI responsiveness\r\n * @param fn function to debounce\r\n * @param ms milliseconds to wait\r\n * @returns wrapped function\r\n */\r\nexport function debounce(fn: any, ms: number) {\r\n  let timer: any\r\n  return (...args: any) => {\r\n    clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      timer = null\r\n      //@ts-ignore\r\n      fn.apply(this, args)\r\n    }, ms)\r\n  }\r\n}\r\n\r\nexport function findMatchingGlobInFiles(filenames: string[], glob: string): string[] {\r\n  // first see if file itself is in this folder\r\n  if (filenames.indexOf(glob) > -1) return [glob]\r\n\r\n  // return globs in this folder\r\n  const matches = micromatch(filenames, glob)\r\n  if (matches.length) return matches\r\n\r\n  // nothing!\r\n  return []\r\n}\r\n\r\nexport async function parseXML(xml: string, settings: any = {}) {\r\n  // This uses the fast-xml-parser library, which is the least-quirky\r\n  // of all the terrible XML libraries.\r\n  //\r\n  // - Element attributes are stored directly in the element as \"$attributeName\"\r\n  //\r\n  // - Items with just one element are stored as is; but you can\r\n  //   force a path to be always-array with \"alwaysArray: ['my.path.to.element]\"\r\n  //\r\n  // - Order is not preserved; like items are stored as arrays. For matsim, this\r\n  //   is only a problem for plans (I think?) but you can recreate the plan order\r\n  //   since act and leg elements always alternate. (Or use \"preserveOrder: true\"\r\n  //   but that creates LOTS of one-item arrays everywhere. Sad.)\r\n\r\n  const defaultConfig = {\r\n    ignoreAttributes: false,\r\n    preserveOrder: false,\r\n    attributeNamePrefix: '$',\r\n    isArray: undefined as any,\r\n  }\r\n\r\n  // Allow user to pass in an array of \"always as array\" XML paths:\r\n  if (settings.alwaysArray) {\r\n    defaultConfig.isArray = (name: string, jpath: string) => {\r\n      if (settings.alwaysArray.indexOf(jpath) !== -1) return true\r\n    }\r\n  } else {\r\n    delete defaultConfig.isArray\r\n  }\r\n\r\n  const options = Object.assign(defaultConfig, settings)\r\n  const parser = new XMLParser(options)\r\n\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const result = parser.parse(xml)\r\n      resolve(result)\r\n    } catch (err) {\r\n      reject(err)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * This recursive function gunzips the buffer. It is recursive because\r\n * some combinations of subversion, nginx, and various user browsers\r\n * can single- or double-gzip .gz files on the wire. It's insane but true.\r\n */\r\nexport function gUnzip(buffer: ArrayBuffer): any {\r\n  const u8 = new Uint8Array(buffer)\r\n\r\n  // GZIP always starts with a magic number, hex 0x8b1f\r\n  const header = new Uint16Array(buffer, 0, 2)\r\n\r\n  if (header[0] === 0x8b1f) {\r\n    try {\r\n      const result = decompressSync(u8)\r\n      return result\r\n    } catch (e) {\r\n      console.error('eee', e)\r\n    }\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\nexport default { arrayBufferToBase64, debounce, findMatchingGlobInFiles, gUnzip, parseXML }\r\n"],"names":["nameStartChar","nameChar","nameRegexp","regexName","getAllMatches","string","regex","matches","match","allmatches","len","index","isName","exports","v","obj","target","a","arrayMode","keys","i","util","require$$0","defaultOptions","validator","xmlData","options","tags","tagFound","reachedRoot","readPI","tagStartPos","readCommentAndCDATA","closingTag","tagName","validateTagName","msg","getErrorObject","getLineNumberForPosition","result","readAttributeStr","attrStr","attrStrStart","isValid","validateAttributeString","otg","openPos","afterAmp","validateAmpersand","isWhiteSpace","t","char","start","tagname","angleBracketsCount","doubleQuote","singleQuote","startChar","tagClosed","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","validateNumberAmpersand","re","count","code","message","lineNumber","lines","val","jPath","attrs","buildOptions","OptionsBuilder","XmlNode","key","node","xmlNode","readDocType","entities","hasBody","comment","exp","isEntity","readEntityExp","validateEntityName","isElement","isAttlist","isNotation","isComment","entityName","name","DocTypeReader","hexRegex","numRegex","consider","toNumber","str","trimmedStr","sign","leadingZeros","numTrimmedByZeros","trimZeros","eNotation","num","numStr","strnum","require$$1","require$$2","require$$3","OrderedObjParser","addExternalEntities","parseXml","parseTextData","resolveNameSpace","buildAttributesMap","isItStopNode","replaceEntitiesValue","readStopNodeData","saveTextToParentTag","addChild","externalEntities","entKeys","ent","dontTrim","hasAttributes","isLeafNode","escapeEntities","newval","parseValue","prefix","attrsRegx","oldVal","aName","newVal","attrCollection","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","lastTagName","propIndex","tagData","readTagExp","childNode","endIndex","tagExp","attrExpPresent","lastTag","tagContent","entity","stopNodes","currentTagName","allNodesExp","stopNodePath","stopNodeExp","tagExpWithClosingIndex","closingChar","attrBoundary","ch","errMsg","closingIndex","removeNSPrefix","separatorIndex","startIndex","openTagCount","shouldParse","OrderedObjParser_1","prettify","compress","arr","text","compressedObj","tagObj","property","propName","newJpath","isLeaf","isLeafTag","assignAttributes","attrMap","jpath","atrrName","textNodeName","propCount","node2json","XMLParser","validationOption","orderedObjParser","orderedResult","value","XMLParser_1","EOL","toXml","jArray","indentation","arrToStr","xmlStr","isPreviousElementTag","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","tagStart","tagValue","attr","attrVal","textValue","orderedJs2Xml","buildFromOrderedJs","Builder","isAttribute","processTextOrObjNode","indentate","jObj","level","arrLen","listTagVal","j","item","Ks","L","object","tagEndExp","piClosingChar","closeTag","json2xml","XMLBuilder","fxp","u8","u16","u32","fleb","fdeb","clim","freb","eb","b","r","_a","fl","revfl","_b","fd","rev","x","hMap","cd","mb","l","le","co","rvb","sv","r_1","m","flt","fdt","flrm","fdrm","max","bits","d","p","o","bits16","shft","slc","s","e","n","ec","err","ind","nt","inflt","dat","buf","st","sl","noBuf","noSt","cbuf","bl","nbuf","final","pos","bt","lm","dm","lbt","dbt","tbts","type","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","c","lt","dt","lms","dms","lpos","sym","add","dsym","end","et","gzs","flg","zs","gzl","zlv","inflateSync","data","out","gunzipSync","unzlibSync","decompressSync","td","tds","arrayBufferToBase64","buffer","binary","bytes","mergeTypedArrays","arrays","total","debounce","fn","ms","timer","args","findMatchingGlobInFiles","filenames","glob","micromatch","parseXML","xml","settings","defaultConfig","parser","resolve","reject","gUnzip"],"mappings":"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"}