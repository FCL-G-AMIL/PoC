{"version":3,"file":"plotly.ebf80527.js","sources":["../../src/plugins/plotly/PlotlyDiagram.vue","../../src/plugins/plotly/PlotlyDiagram.vue?vue&type=template&lang.js","../../src/dash-panels/plotly.vue","../../src/dash-panels/plotly.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\n.mycomponent(:class=\"{'is-thumbnail': thumbnail}\")\r\n\r\n  VuePlotly.myplot(\r\n    :data=\"traces\"\r\n    :layout=\"layout\"\r\n    :options=\"options\"\r\n    :id=\"id\"\r\n  )\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: { total: 'total', showChanges: 'Only show changes' },\r\n    de: { total: 'Insgesamt', showChanges: 'Nur Ã„nderungen zeigen' },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport yaml from 'yaml'\r\n\r\nimport globalStore from '@/store'\r\nimport VuePlotly from '@/components/VuePlotly.vue'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport DashboardDataManager from '@/js/DashboardDataManager'\r\nimport { colorRamp, Ramp } from '@/js/ColorsAndWidths'\r\nimport { mergeTypedArrays } from '@/js/util'\r\nimport {\r\n  FileSystemConfig,\r\n  UI_FONT,\r\n  BG_COLOR_DASHBOARD,\r\n  DataTable,\r\n  DataSet,\r\n  DataTableColumn,\r\n} from '@/Globals'\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'PlotlyPlugin',\r\n  components: { VuePlotly },\r\n  i18n,\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    config: { type: Object as any },\r\n    datamanager: { type: Object as PropType<DashboardDataManager> },\r\n    resize: Object as any,\r\n    thumbnail: Boolean,\r\n    yamlConfig: String,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      globalState: globalStore.state,\r\n      vizDetails: { title: '', description: '' } as any,\r\n      loadingText: '',\r\n      jsonChart: {} as any,\r\n      id: `plotly-id-${Math.floor(1e12 * Math.random())}` as any,\r\n      traces: [] as any[],\r\n      prevWidth: -1,\r\n      prevHeight: -1,\r\n      // DataManager might be passed in from the dashboard; or we might be\r\n      // in single-view mode, in which case we need to create one for ourselves\r\n      myDataManager: this.datamanager || new DashboardDataManager(this.root, this.subfolder),\r\n      // Plotly layout\r\n      layout: {\r\n        margin: { t: 8, b: 0, l: 0, r: 0, pad: 2 },\r\n        font: {\r\n          color: '#444444',\r\n          family: UI_FONT,\r\n        },\r\n        xaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 12 },\r\n          animate: true,\r\n        },\r\n        yaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 16 },\r\n          animate: true,\r\n          rangemode: 'tozero',\r\n        },\r\n        legend: {\r\n          orientation: 'v',\r\n          x: 1,\r\n          y: 1,\r\n        },\r\n      },\r\n      // Plotly options\r\n      options: {\r\n        displaylogo: false,\r\n        responsive: true,\r\n        modeBarButtonsToRemove: [\r\n          'pan2d',\r\n          'zoom2d',\r\n          'select2d',\r\n          'lasso2d',\r\n          'zoomIn2d',\r\n          'zoomOut2d',\r\n          'autoScale2d',\r\n          'hoverClosestCartesian',\r\n          'hoverCompareCartesian',\r\n          'resetScale2d',\r\n          'toggleSpikelines',\r\n          'resetViewMapbox',\r\n        ],\r\n        toImageButtonOptions: {\r\n          format: 'png', // one of png, svg, jpeg, webp\r\n          filename: 'chart',\r\n          width: null,\r\n          height: null,\r\n        },\r\n      },\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    'globalState.resizeEvents'() {\r\n      this.changeDimensions({})\r\n    },\r\n\r\n    resize(event: any) {\r\n      this.changeDimensions(event)\r\n    },\r\n    'globalState.isDarkMode'() {\r\n      this.updateTheme()\r\n    },\r\n  },\r\n\r\n  async mounted() {\r\n    await this.getVizDetails()\r\n    // only continue if we are on a real page and not the file browser\r\n    if (this.thumbnail) return\r\n\r\n    try {\r\n      if (this.vizDetails.datasets) await this.prepareData()\r\n      if (this.vizDetails.traces) this.traces = this.vizDetails.traces\r\n      // merge user-supplied layout with SimWrapper layout defaults\r\n      if (this.vizDetails.layout) this.mergeLayouts()\r\n\r\n      if (this.vizDetails.fixedRatio) {\r\n        this.vizDetails.layout.xaxis = Object.assign(this.vizDetails.layout.xaxis, {\r\n          constrain: 'domain',\r\n        })\r\n\r\n        this.vizDetails.layout.yaxis = Object.assign(this.vizDetails.layout.yaxis, {\r\n          constrain: 'domain',\r\n          scaleanchor: 'x',\r\n          scaleration: 1,\r\n        })\r\n      }\r\n\r\n      // Backwards compatiblity with the older \"dropdownMenu\" option\r\n      if (this.vizDetails.dropdownMenu) this.vizDetails.interactive = 'dropdown'\r\n\r\n      // create interactive elements\r\n      if (this.vizDetails.interactive) this.createMenus(this.vizDetails.interactive)\r\n    } catch (err) {\r\n      const e = err as any\r\n      console.error({ e })\r\n      this.loadingText = '' + e\r\n    }\r\n\r\n    this.updateTheme()\r\n    window.addEventListener('resize', this.changeDimensions)\r\n  },\r\n\r\n  beforeDestroy() {\r\n    window.removeEventListener('resize', this.changeDimensions)\r\n  },\r\n\r\n  methods: {\r\n    changeDimensions(dim: any) {\r\n      if (dim?.height && dim?.width) {\r\n        if (dim.height !== this.prevHeight || dim.width !== this.prevWidth) {\r\n          this.prevHeight = dim.height\r\n          this.prevWidth = dim.width\r\n          this.layout = Object.assign({}, this.layout, dim)\r\n        }\r\n      }\r\n    },\r\n\r\n    mergeLayouts() {\r\n      const mergedLayout = { ...this.vizDetails.layout }\r\n\r\n      // TODO: only if the y axis title is set, the margin to the left needs to be little bit larger\r\n\r\n      // we always want to use SimWrapper defaults for these:\r\n      mergedLayout.margin = this.layout.margin\r\n      mergedLayout.font = this.layout.font\r\n      mergedLayout.legend = this.layout.legend\r\n\r\n      // we never want these:\r\n      delete mergedLayout.height\r\n      delete mergedLayout.width\r\n\r\n      // be selective about these:\r\n      if (mergedLayout.xaxis) {\r\n        mergedLayout.xaxis.automargin = true\r\n        mergedLayout.xaxis.autorange = true\r\n        mergedLayout.xaxis.animate = true\r\n        if (!mergedLayout.xaxis.title) mergedLayout.xaxis.title = this.layout.xaxis.title\r\n      } else {\r\n        mergedLayout.xaxis = this.layout.xaxis\r\n      }\r\n\r\n      if (mergedLayout.yaxis) {\r\n        mergedLayout.yaxis.automargin = true\r\n        mergedLayout.yaxis.autorange = true\r\n        mergedLayout.yaxis.animate = true\r\n        if (!mergedLayout.yaxis.title) mergedLayout.yaxis.title = this.layout.yaxis.title\r\n      } else {\r\n        mergedLayout.yaxis = this.layout.yaxis\r\n      }\r\n\r\n      this.layout = mergedLayout\r\n    },\r\n\r\n    createMenus(mode: string) {\r\n      if (mode == 'none') return\r\n\r\n      const buttons: any[] = []\r\n\r\n      // index of traces for each group\r\n      const groups: { [key: string]: number[] } = {}\r\n\r\n      const n = Object.values(this.traces).length\r\n\r\n      Object.values(this.traces).forEach((tr, idx) => {\r\n        // restore the indended legend label\r\n        if ('original_name' in tr) {\r\n          tr.name = tr.original_name\r\n        }\r\n\r\n        if (!(tr.group_name in groups)) groups[tr.group_name] = []\r\n\r\n        groups[tr.group_name].push(idx)\r\n\r\n        tr.visible = false\r\n      })\r\n\r\n      Object.entries(groups).forEach(kv => {\r\n        const [group, ids] = kv\r\n\r\n        const arr = new Array(n)\r\n        arr.fill(false)\r\n\r\n        for (const idx of ids as any[]) {\r\n          arr[idx] = true\r\n        }\r\n\r\n        buttons.push({\r\n          method: 'update',\r\n          args: [{ visible: arr }],\r\n          label: group,\r\n        })\r\n      })\r\n\r\n      const first = Object.values(groups)[0]\r\n      for (const idx of first) {\r\n        this.traces[idx].visible = true\r\n      }\r\n\r\n      const layout: any = this.layout\r\n\r\n      if (mode == 'dropdown') {\r\n        const updatemenus = [\r\n          {\r\n            buttons: buttons,\r\n            y: 1,\r\n            yanchor: 'top',\r\n          },\r\n        ]\r\n        layout.updatemenus = updatemenus\r\n      } else if (mode == 'slider') {\r\n        const sliders = [\r\n          {\r\n            pad: { t: 10 },\r\n            currentvalue: {\r\n              visible: false,\r\n              xanchor: 'left',\r\n              prefix: '',\r\n            },\r\n            steps: buttons,\r\n          },\r\n        ]\r\n        layout.sliders = sliders\r\n      }\r\n    },\r\n\r\n    updateTheme() {\r\n      const colors = {\r\n        paper_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        plot_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        font: { color: this.globalState.isDarkMode ? '#cccccc' : '#444444' },\r\n      }\r\n      this.layout = Object.assign({}, this.layout, colors)\r\n    },\r\n\r\n    async getVizDetails() {\r\n      if (this.config) {\r\n        this.vizDetails = Object.assign({}, this.config)\r\n        this.$emit('title', this.vizDetails.title || 'Chart')\r\n        if (this.vizDetails.traces) this.traces = this.vizDetails.traces\r\n        return\r\n      }\r\n\r\n      // might be a project config:\r\n      this.loadingText = 'Loading config...'\r\n      const config = this.yamlConfig ?? ''\r\n      const filename = config.indexOf('/') > -1 ? config : this.subfolder + '/' + config\r\n\r\n      const text = await this.fileApi.getFileText(filename)\r\n      const parsed = yaml.parse(text)\r\n\r\n      this.vizDetails = parsed\r\n      if (!this.vizDetails.title) this.vizDetails.title = 'Chart'\r\n      this.$emit('title', this.vizDetails.title)\r\n    },\r\n\r\n    async prepareData(): Promise<any> {\r\n      await Promise.all(\r\n        Object.entries(this.vizDetails.datasets).map(kv => {\r\n          let [key, value] = kv\r\n\r\n          // Dataset can be single string or full object\r\n          if (typeof value === 'string') {\r\n            value = {\r\n              file: value,\r\n            }\r\n          }\r\n\r\n          return this.loadDataset(key, value as DataSet)\r\n        })\r\n      )\r\n\r\n      if (this.vizDetails.mergeDatasets && Object.values(this.vizDetails.datasets).length > 1) {\r\n        this.vizDetails.datasets = {\r\n          dataset: {\r\n            name: 'dataset',\r\n            file: 'none',\r\n            data: this.mergeDatasets(Object.values(this.vizDetails.datasets)),\r\n          },\r\n        }\r\n      }\r\n\r\n      const datasets = Object.values(this.vizDetails.datasets) as DataSet[]\r\n      const traces = [] as any[]\r\n\r\n      const color = this.getColors(this.vizDetails, this.vizDetails.traces.length)\r\n\r\n      this.vizDetails.traces.forEach((tr: any, trIdx: number) => {\r\n        // Grouped traces won't be added without its group\r\n        let grouped = false\r\n\r\n        datasets.forEach((ds: DataSet) => {\r\n          // This data uses array as name and needs to be split into multiple traces.\r\n          const name = '$' + ds.name\r\n\r\n          if (tr.name?.startsWith(name)) {\r\n            const ref = tr.name.replace(name + '.', '')\r\n            const groups = this.groupDataTable(ds.data as DataTable, ref)\r\n\r\n            const n = Object.keys(groups).length\r\n            const c = this.getColors(tr, n)\r\n\r\n            Object.keys(groups).forEach((group, idx) => {\r\n              // TODO: Is there a library for deep copy ?\r\n              const copy = JSON.parse(JSON.stringify(tr))\r\n\r\n              copy.name = group\r\n              copy.group_name = group\r\n              this.recursiveCheckForTemplate(groups[group], copy, name)\r\n\r\n              if (c) {\r\n                if (!('marker' in tr)) copy.marker = {}\r\n                copy.marker.color = c[idx]\r\n              }\r\n              traces.push(copy)\r\n            })\r\n\r\n            grouped = true\r\n          } else {\r\n            this.recursiveCheckForTemplate(ds.data as DataTable, tr, name)\r\n          }\r\n        })\r\n\r\n        if (!grouped) {\r\n          if (color) {\r\n            // Assign marker\r\n            if (!('marker' in tr)) tr.marker = {}\r\n\r\n            tr.marker.color = color[trIdx]\r\n          }\r\n          traces.push(tr)\r\n        }\r\n      })\r\n\r\n      this.vizDetails.traces = traces\r\n    },\r\n\r\n    async loadDataset(name: string, ds: DataSet): Promise<DataSet> {\r\n      this.loadingText = 'Loading datasets...'\r\n\r\n      const csvData = await this.myDataManager.getDataset(\r\n        { dataset: ds.file },\r\n        { highPrecision: true }\r\n      )\r\n\r\n      ds.data = csvData.allRows\r\n      ds.name = name\r\n\r\n      this.vizDetails.datasets[name] = ds\r\n      this.transformData(ds)\r\n\r\n      return ds\r\n    },\r\n\r\n    getColors(conf: any, n: number): null | string[] {\r\n      if ('colorRamp' in conf) {\r\n        const ramp = typeof conf.colorRamp === 'string' ? { ramp: conf.colorRamp } : conf.colorRamp\r\n        // Produce at least two color or strange effects happen\r\n        return colorRamp(ramp, n >= 2 ? n : 2)\r\n      }\r\n\r\n      return null\r\n    },\r\n\r\n    // Transform dataset if requested\r\n    transformData(ds: DataSet) {\r\n      if ('pivot' in ds) {\r\n        this.pivot(\r\n          ds.name as string,\r\n          ds.data as DataTable,\r\n          ds.pivot.exclude,\r\n          ds.pivot.valuesTo,\r\n          ds.pivot.namesTo\r\n        )\r\n      }\r\n\r\n      if ('aggregate' in ds) {\r\n        this.aggregateColumns(ds.data as DataTable, ds.aggregate.groupBy, ds.aggregate.target)\r\n      }\r\n\r\n      if ('constant' in ds) {\r\n        Object.entries(ds.constant!).forEach(kv => {\r\n          const [column, value] = kv\r\n\r\n          const values = new Array(Object.values(ds.data!)[0].values.length)\r\n          values.fill(value)\r\n\r\n          ds.data![column] = {\r\n            name: column,\r\n            values: values,\r\n            type: 1,\r\n          }\r\n        })\r\n      }\r\n    },\r\n\r\n    countOccurrences(array: Float64Array | Float32Array | any[]): { [key: string]: number } {\r\n      let counts = {} as { [key: string]: number }\r\n      array.forEach((el: any) => {\r\n        counts[el] = counts[el] ? counts[el] + 1 : 1\r\n      })\r\n\r\n      return counts\r\n    },\r\n\r\n    // Group data table by values in columnName and generate multiple tables\r\n    groupDataTable(dataTable: DataTable, columnName: string): { [key: string]: DataTable } {\r\n      let obj = {} as { [key: string]: DataTable }\r\n\r\n      let column = dataTable[columnName]\r\n\r\n      let occ = this.countOccurrences(column.values)\r\n\r\n      // Copy all columns and initialize as empty\r\n      Object.entries(occ).forEach(kv => {\r\n        const [group, n] = kv\r\n\r\n        let dt = {} as DataTable\r\n\r\n        // Shallow copy each column\r\n        Object.entries(dataTable).forEach(kv => {\r\n          const [key, column] = kv\r\n          dt[key] = { ...column }\r\n\r\n          let c = Object.getPrototypeOf(column.values).constructor\r\n\r\n          // Construct array of same type\r\n          dt[key].values = new c(n)\r\n        })\r\n\r\n        obj[group] = dt\r\n      })\r\n\r\n      for (var i = 0; i < dataTable[columnName].values.length; i++) {\r\n        var group = dataTable[columnName].values[i]\r\n        let target = obj[group]\r\n\r\n        // determine index by subtracting the total for each group\r\n        let idx = target[columnName].values.length - occ[group]--\r\n\r\n        // Copy columns\r\n        Object.entries(dataTable).forEach(kv => {\r\n          const [key, column] = kv\r\n\r\n          target[key].values[idx] = column.values[i]\r\n        })\r\n      }\r\n\r\n      return obj\r\n    },\r\n\r\n    // Aggregate columns, currently only sum\r\n    aggregateColumns(dataTable: DataTable, groupBy: any[], target: string) {\r\n      const aggr = {} as any\r\n\r\n      const n = dataTable[Object.keys(dataTable)[0]].values.length\r\n\r\n      for (let i = 0; i < n; i++) {\r\n        const k = groupBy.reduce((acc, column) => (acc += dataTable[column].values[i]), '')\r\n\r\n        if (k in aggr) {\r\n          aggr[k][target] += dataTable[target].values[i]\r\n        } else {\r\n          aggr[k] = Object.fromEntries(groupBy.map(column => [column, dataTable[column].values[i]]))\r\n          aggr[k][target] = dataTable[target].values[i]\r\n        }\r\n      }\r\n\r\n      // Remove the unneeded columns\r\n      Object.keys(dataTable).forEach(column => {\r\n        if (groupBy.indexOf(column) == -1 && column != target) delete dataTable[column]\r\n      })\r\n\r\n      // Initial empty arrays for final columns\r\n      const values = Object.fromEntries([...groupBy, target].map(c => [c, []])) as any\r\n\r\n      Object.values(aggr).forEach((a: any) => {\r\n        Object.entries(a).forEach(cv => {\r\n          values[cv[0]].push(cv[1])\r\n        })\r\n      })\r\n\r\n      Object.entries(values).forEach(kv => {\r\n        dataTable[kv[0]].values = kv[1] as any[]\r\n      })\r\n    },\r\n\r\n    // Pivot wide to long format\r\n    pivot(name: string, dataTable: DataTable, exclude: any[], valuesTo: string, namesTo: string) {\r\n      // Columns to pivot\r\n      const pivot = Object.keys(dataTable).filter(k => exclude.indexOf(k) == -1)\r\n\r\n      exclude.forEach(column => {\r\n        if (!(column in dataTable)) {\r\n          globalStore.commit('error', `Pivot column ${column} not in ${name}`)\r\n        }\r\n      })\r\n\r\n      // New data entries\r\n      const columns = Object.fromEntries(exclude.map(c => [c, []]))\r\n\r\n      // Pivot target arrays\r\n      const values = [] as any[]\r\n      const names = [] as any[]\r\n\r\n      const n = dataTable[Object.keys(dataTable)[0]].values.length\r\n\r\n      //console.log('Columns', columns, 'Pivot', pivot, 'n', n)\r\n\r\n      for (let i = 0; i < n; i++) {\r\n        pivot.forEach(c => {\r\n          exclude.forEach(c => columns[c].push(dataTable[c].values[i]))\r\n          names.push(c)\r\n          values.push(dataTable[c].values[i])\r\n        })\r\n      }\r\n\r\n      //console.log('Columns', columns, 'Values', values, 'Names', names)\r\n\r\n      exclude.forEach(c => {\r\n        dataTable[c].values = columns[c]\r\n      })\r\n      dataTable[valuesTo] = { name: valuesTo, values: values } as DataTableColumn\r\n      dataTable[namesTo] = { name: namesTo, values: names } as DataTableColumn\r\n    },\r\n\r\n    mergeDatasets(datasets: DataSet[]): DataTable {\r\n      const data = {} as DataTable\r\n      const first = datasets[0].data!\r\n\r\n      Object.keys(first).forEach((column: string) => {\r\n        const mapped = datasets.map(ds => {\r\n          if (!(column in ds.data!)) {\r\n            globalStore.commit(\r\n              'error',\r\n              `Merged dataset ${ds.name} does not contain column ${column}`\r\n            )\r\n          }\r\n\r\n          return ds.data![column].values\r\n        })\r\n\r\n        // Need to distinguish primitive arrays and standard ones\r\n        let values\r\n        if (\r\n          first[column].values instanceof Float32Array ||\r\n          first[column].values instanceof Float64Array\r\n        )\r\n          values = mergeTypedArrays(mapped as Array<any>[])\r\n        else values = mapped.flat()\r\n\r\n        data[column] = {\r\n          name: column,\r\n          type: first[column].type,\r\n          values: values,\r\n        }\r\n      })\r\n\r\n      return data\r\n    },\r\n\r\n    recursiveCheckForTemplate(dataTable: DataTable, object: any, template: string) {\r\n      Object.entries(object).forEach(kv => {\r\n        const [key, value] = kv\r\n        if (typeof value === 'string') {\r\n          // string stuff\r\n          if (value.includes(template)) {\r\n            const column = value.substring(value.indexOf('.') + 1)\r\n            if (column in dataTable) {\r\n              // Merge two columns into a multi index\r\n              if (this.vizDetails.multiIndex && column in this.vizDetails.multiIndex) {\r\n                // This creates a tuples of two arrays that has special handling in plotly\r\n                object[key] = [\r\n                  dataTable[column].values,\r\n                  dataTable[this.vizDetails.multiIndex[column]].values,\r\n                ]\r\n              }\r\n              // Normal way to add values into the column\r\n              else object[key] = dataTable[column].values\r\n            } else {\r\n              globalStore.commit('error', `Column \"${column}\" not in ${Object.keys(dataTable)}`)\r\n            }\r\n          }\r\n        } else if (Array.isArray(value)) {\r\n          // array stuff\r\n          if (typeof value[0] == 'object') {\r\n            value.forEach(v => this.recursiveCheckForTemplate(dataTable, v, template))\r\n          }\r\n        } else if (typeof value == 'object') {\r\n          this.recursiveCheckForTemplate(dataTable, value, template)\r\n        }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.mycomponent {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  // margin: 1rem;\r\n}\r\n\r\n.mycomponent.is-thumbnail {\r\n  padding-top: 0;\r\n  height: $thumbnailHeight;\r\n}\r\n\r\n.myplot {\r\n  height: 100%;\r\n  width: 100%;\r\n  flex: 1;\r\n  margin: 0 auto;\r\n}\r\n\r\n.myplot.is-thumbnail {\r\n  padding: 0rem 0rem;\r\n  margin: 0 0;\r\n}\r\n</style>\r\n","\r\n.mycomponent(:class=\"{'is-thumbnail': thumbnail}\")\r\n\r\n  VuePlotly.myplot(\r\n    :data=\"traces\"\r\n    :layout=\"layout\"\r\n    :options=\"options\"\r\n    :id=\"id\"\r\n  )\r\n\r\n","<template lang=\"pug\">\r\nplotly-diagram.plotly-panel(\r\n  :root=\"fileSystemConfig.slug\"\r\n  :subfolder=\"subfolder\"\r\n  :config=\"config\"\r\n  :thumbnail=\"false\"\r\n  :resize=\"resizeEvent\"\r\n\r\n)\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport { FileSystemConfig } from '@/Globals'\r\nimport PlotlyDiagram from '@/plugins/plotly/PlotlyDiagram.vue'\r\n\r\nexport default defineComponent({\r\n  name: 'PlotlyDiagramPanel',\r\n  components: { PlotlyDiagram },\r\n\r\n  data: () => {\r\n    return {\r\n      resizeEvent: {} as any,\r\n    }\r\n  },\r\n\r\n  props: {\r\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\r\n    subfolder: { type: String, required: true },\r\n    config: { type: Object, required: true },\r\n    cardId: String,\r\n  },\r\n  mounted() {\r\n    this.$emit('isLoaded')\r\n    this.$emit('dimension-resizer', { id: this.cardId, resizer: this.changeDimensions })\r\n  },\r\n  methods: {\r\n    changeDimensions(event: any) {\r\n      this.resizeEvent = event\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.plotly-panel {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  // background-color: cyan;\r\n}\r\n</style>\r\n","\r\nplotly-diagram.plotly-panel(\r\n  :root=\"fileSystemConfig.slug\"\r\n  :subfolder=\"subfolder\"\r\n  :config=\"config\"\r\n  :thumbnail=\"false\"\r\n  :resize=\"resizeEvent\"\r\n\r\n)\r\n"],"names":["i18n","MyComponent","defineComponent","VuePlotly","globalStore","DashboardDataManager","UI_FONT","HTTPFileSystem","svnProject","a","event","err","dim","mergedLayout","mode","buttons","groups","n","tr","idx","kv","group","ids","arr","first","layout","updatemenus","sliders","colors","BG_COLOR_DASHBOARD","config","_a","filename","text","parsed","yaml","key","value","datasets","traces","color","trIdx","grouped","ds","name","ref","c","copy","csvData","conf","ramp","colorRamp","column","values","array","counts","el","dataTable","columnName","obj","occ","dt","i","target","groupBy","aggr","k","acc","cv","exclude","valuesTo","namesTo","pivot","columns","names","data","mapped","mergeTypedArrays","object","template","v","render","_vm","_h","_c","staticRenderFns","__vue2_script","PlotlyDiagram"],"mappings":"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"}