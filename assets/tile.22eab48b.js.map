{"version":3,"file":"tile.22eab48b.js","sources":["../../src/dash-panels/tile.vue","../../src/dash-panels/tile.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\n.content\r\n    .tiles-container(v-if=\"imagesAreLoaded\")\r\n      .tile(v-for=\"(value, index) in this.dataSet.data\" v-bind:style=\"{ 'background-color': colors[index % colors.length]}\")\r\n        p.tile-title {{ value[tileNameIndex] }}\r\n        p.tile-value {{ value[tileValueIndex] }}\r\n        .tile-image(v-if=\"value[tileImageIndex] != undefined && checkIfItIsACustomIcon(value[tileImageIndex])\" :style=\"{'background': base64Images[index], 'background-size': 'contain'}\")\r\n        img.tile-image(v-else-if=\"value[tileImageIndex] != undefined && checkIfIconIsInAssetsFolder(value[tileImageIndex])\" v-bind:src=\"'/src/assets/tile-icons/' + value[tileImageIndex].trim() + '.svg'\" :style=\"{'background': ''}\")\r\n        font-awesome-icon.tile-image(v-else-if=\"value[tileImageIndex] != undefined\" :icon=\"value[tileImageIndex].trim()\" size=\"2xl\" :style=\"{'background': '', 'color': 'black'}\")\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\nimport readBlob from 'read-blob'\r\nimport Papa from '@simwrapper/papaparse'\r\n\r\nimport DashboardDataManager from '@/js/DashboardDataManager'\r\nimport { FileSystemConfig, Status } from '@/Globals'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport globalStore from '@/store'\r\nimport { arrayBufferToBase64 } from '@/js/util'\r\n\r\nexport default defineComponent({\r\n  name: 'OverviewPanel',\r\n  components: {},\r\n  props: {\r\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\r\n    subfolder: { type: String, required: true },\r\n    files: { type: Array, required: true },\r\n    config: { type: Object as any, required: true },\r\n    cardTitle: { type: String, required: false },\r\n    cardId: String,\r\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\r\n  },\r\n  data: () => {\r\n    return {\r\n      globalState: globalStore.state,\r\n      id: ('tiles-' + Math.floor(1e12 * Math.random())) as any,\r\n      // dataSet is either x,y or allRows[]\r\n      dataSet: {} as { data?: any; x?: any[]; y?: any[]; allRows?: any },\r\n      YAMLrequirementsOverview: { dataset: '' },\r\n      colors: [\r\n        '#F08080', // Light coral pink\r\n        '#FFB6C1', // Pale pink\r\n        '#FFDAB9', // peach\r\n        '#FFECB3', // cream yellow\r\n        '#B0E0E6', // light blue\r\n        '#98FB98', // light green\r\n        '#FFD700', // golden yellow\r\n        '#FFA07A', // salmon pink\r\n        '#E0FFFF', // light turquoise\r\n        '#FFDAB9', // pink\r\n        '#FFC0CB', // pink\r\n        '#FFA500', // orange\r\n        '#FF8C00', // dark orange\r\n        '#FF7F50', // coral red\r\n        '#FFE4B5', // papaya\r\n        '#ADD8E6', // light blue\r\n        '#90EE90', // light green\r\n        '#FFD700', // golden yellow\r\n        '#FFC0CB', // pink\r\n        '#FFA500', // Orange\r\n      ],\r\n      colorsD3: [\r\n        '#1F77B4',\r\n        '#FF7F0E',\r\n        '#2CA02C',\r\n        '#D62728',\r\n        '#9467BD',\r\n        '#8C564B',\r\n        '#E377C2',\r\n        '#7F7F7F',\r\n        '#BCBD22',\r\n        '#17BECF',\r\n      ],\r\n\r\n      localTileIcons: [\r\n        'departure_board',\r\n        'directions_car',\r\n        'emoji_transportation',\r\n        'local_taxi',\r\n        'subway',\r\n        'directions_bike',\r\n        'directions_subway',\r\n        'ev_station',\r\n        'local_gas_station',\r\n        'motorcycle',\r\n        'train',\r\n        'directions_boat',\r\n        'electric_car',\r\n        'group',\r\n        'local_parking',\r\n        'person',\r\n        'transportation',\r\n        'directions_bus',\r\n        'electric_rickshaw',\r\n        'groups',\r\n        'local_shipping',\r\n        'route',\r\n        'two_wheeler',\r\n      ],\r\n      testImage: '',\r\n      base64Images: [] as any[],\r\n      imagesAreLoaded: false,\r\n      tileNameIndex: 0,\r\n      tileValueIndex: 1,\r\n      tileImageIndex: 2,\r\n    }\r\n  },\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystemConfig, globalStore)\r\n    },\r\n  },\r\n  async mounted() {\r\n    this.dataSet = await this.loadFile()\r\n    this.validateDataSet()\r\n    await this.loadImages()\r\n    this.$emit('isLoaded')\r\n  },\r\n  methods: {\r\n    forceRerender() {\r\n      // Removing my-component from the DOM\r\n      this.imagesAreLoaded = false\r\n\r\n      this.$nextTick(() => {\r\n        // Adding the component back in\r\n        this.imagesAreLoaded = true\r\n      })\r\n    },\r\n    async loadImages() {\r\n      this.imagesAreLoaded = false\r\n\r\n      for (let i = 0; i < this.dataSet.data.length; i++) {\r\n        const value = this.dataSet.data[i] as any\r\n        if (this.checkIfItIsACustomIcon(value[this.tileImageIndex])) {\r\n          try {\r\n            const blob = await this.fileApi.getFileBlob(\r\n              this.subfolder +\r\n                '/' +\r\n                this.config.dataset +\r\n                '/../' +\r\n                value[this.tileImageIndex].trim()\r\n            )\r\n            const buffer = await readBlob.arraybuffer(blob)\r\n            const base64 = arrayBufferToBase64(buffer)\r\n            if (base64)\r\n              this.base64Images[i] = `center / cover no-repeat url(data:image/png;base64,${base64})`\r\n          } catch (e) {\r\n            if (e instanceof Response) {\r\n              this.$store.commit('setStatus', {\r\n                type: Status.WARNING,\r\n                msg: e.statusText,\r\n                desc: `The file ${value[this.tileImageIndex]} was not found in this path ${\r\n                  this.subfolder + '/' + this.config.dataset + '/../' + value[this.tileImageIndex]\r\n                }.`,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        this.forceRerender()\r\n      }\r\n\r\n      this.imagesAreLoaded = true\r\n    },\r\n\r\n    async loadFile() {\r\n      const rawText = await this.fileApi.getFileText(this.subfolder + '/' + this.config.dataset)\r\n      const csv = Papa.parse(rawText, {\r\n        comments: '#',\r\n        delimitersToGuess: [';', '\\t', ',', ' '],\r\n        dynamicTyping: true,\r\n        header: false,\r\n        skipEmptyLines: true,\r\n      })\r\n\r\n      return csv\r\n    },\r\n\r\n    validateYAML() {\r\n      for (const key in this.YAMLrequirementsOverview) {\r\n        if (key in this.config === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `YAML file missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsXY for required keys',\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    validateDataSet() {\r\n      // TODO: Update validation for new format\r\n    },\r\n\r\n    checkIfIconIsInAssetsFolder(name: string) {\r\n      return this.localTileIcons.includes(name.trim())\r\n    },\r\n\r\n    checkIfItIsACustomIcon(name: string) {\r\n      if (name == undefined) return\r\n      if (\r\n        name.includes('.png') ||\r\n        name.includes('.jpg') ||\r\n        name.includes('.svg') ||\r\n        name.includes('.jpeg')\r\n      ) {\r\n        return true\r\n      }\r\n      return false\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.content {\r\n  display: flex;\r\n  width: 100%;\r\n  font-family: $fancyFont;\r\n  flex-direction: row;\r\n}\r\n\r\n.elements {\r\n  display: flex;\r\n  flex-grow: 1;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  color: var(--text);\r\n  font-weight: 700;\r\n  font-size: 25px;\r\n}\r\n\r\n.line {\r\n  border-top: 1px solid black;\r\n}\r\n\r\n.text {\r\n  margin-bottom: 0 !important;\r\n}\r\n\r\n.tiles-container {\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  flex-wrap: wrap;\r\n  position: relative;\r\n}\r\n\r\n.tile {\r\n  display: grid;\r\n  grid-auto-columns: 1fr;\r\n  grid-auto-flow: column;\r\n  background-color: #845ec2;\r\n  margin: 10px;\r\n  padding: 20px;\r\n  min-width: 250px;\r\n  font-family: $fancyFont;\r\n}\r\n\r\n.tile .tile-value {\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n  width: 100%;\r\n  color: #363636; // var(--text) but always the color from the light mode.\r\n  grid-column-start: 2;\r\n  grid-column-end: 4;\r\n  text-align: center;\r\n  grid-row: 2;\r\n}\r\n\r\n.tile .tile-title {\r\n  width: 100%;\r\n  font-size: 1.4rem;\r\n  height: 5rem;\r\n  margin-bottom: 0;\r\n  color: #363636; // var(--text) but always the color from the light mode.\r\n  text-align: center;\r\n  grid-column-start: 1;\r\n  grid-column-end: 5;\r\n  grid-row: 1;\r\n}\r\n\r\n.tile .tile-image {\r\n  height: 4rem;\r\n  grid-row: 2;\r\n  align-items: baseline;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n}\r\n</style>\r\n","\r\n.content\r\n    .tiles-container(v-if=\"imagesAreLoaded\")\r\n      .tile(v-for=\"(value, index) in this.dataSet.data\" v-bind:style=\"{ 'background-color': colors[index % colors.length]}\")\r\n        p.tile-title {{ value[tileNameIndex] }}\r\n        p.tile-value {{ value[tileValueIndex] }}\r\n        .tile-image(v-if=\"value[tileImageIndex] != undefined && checkIfItIsACustomIcon(value[tileImageIndex])\" :style=\"{'background': base64Images[index], 'background-size': 'contain'}\")\r\n        img.tile-image(v-else-if=\"value[tileImageIndex] != undefined && checkIfIconIsInAssetsFolder(value[tileImageIndex])\" v-bind:src=\"'/src/assets/tile-icons/' + value[tileImageIndex].trim() + '.svg'\" :style=\"{'background': ''}\")\r\n        font-awesome-icon.tile-image(v-else-if=\"value[tileImageIndex] != undefined\" :icon=\"value[tileImageIndex].trim()\" size=\"2xl\" :style=\"{'background': '', 'color': 'black'}\")\r\n"],"names":["__vue2_script","defineComponent","globalStore","HTTPFileSystem","i","value","blob","buffer","readBlob","base64","arrayBufferToBase64","e","Status","rawText","Papa","key","name","render","_vm","_h","_c","index","staticRenderFns"],"mappings":"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"}