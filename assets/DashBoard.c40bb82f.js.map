{"version":3,"mappings":"+MAMO,MAAMA,EAAiD,CAC5D,UAAWC,EAAqB,IAAMC,aAAO,8BAAqB,uoBAClE,KAAMD,EAAqB,IAAMC,aAAO,sBAAa,2QACrD,IAAKD,EAAqB,IAAMC,aAAO,qBAAY,yQACnD,OAAQD,EAAqB,IAAMC,aAAO,wBAAe,+QACzD,IAAKD,EAAqB,IAAMC,aAAO,uBAAc,kHACrD,QAASD,EAAqB,IAAMC,aAAO,yBAAgB,8VAC3D,SAAUD,EAAqB,IAAMC,aAAO,0BAAiB,gwBAC7D,KAAMD,EAAqB,IAAMC,aAAO,sBAAa,2QACrD,IAAKD,EAAqB,IAAMC,aAAO,qBAAY,yQACnD,OAAQD,EAAqB,IAAMC,aAAO,wBAAe,+dACzD,OAAQD,EAAqB,IAAMC,aAAO,wBAAe,uZACzD,QAASD,EAAqB,IAAMC,aAAO,yBAAgB,iRAC3D,UAAWD,EAAqB,IAAMC,aAAO,2BAAkB,wLAC/D,KAAMD,EAAqB,IAAMC,aAAO,sBAAa,+KACrD,KAAMD,EAAqB,IAAMC,aAAO,sBAAa,4OACrD,QAASD,EAAqB,IAAMC,aAAO,yBAAgB,kvBAC3D,KAAMD,EAAqB,IAAMC,aAAO,sBAAa,qdACrD,MAAOD,EAAqB,IAAMC,aAAO,uBAAc,sJACvD,IAAKD,EAAqB,IAAMC,aAAO,qBAAY,sRAGnD,SAAUD,EAAqB,IAAMC,aAAO,0BAAiB,kvBAC7D,QAASD,EAAqB,IAAMC,aAAO,yBAAgB,y+BAC3D,MAAOD,EAAqB,IAAMC,aAAO,uBAAc,4tCACvD,IAAKD,EAAqB,IAAMC,aAAO,0BAAiB,8zCACxD,OAAQD,EAAqB,IAAMC,aAAO,wBAAe,m5BAC3D,EAmCgB,WAAgBC,EAAmBC,EAA2B,CAC5E,IAAIC,EAAQF,EAEZ,OAAIC,IACMC,IAAU,UAAU,EAAID,EAAU,YAAY,GAAG,CAAC,EAAI,MAAQC,GAGhEA,IAAM,WAAW,IAAK,GAAG,EAC1BA,CACT,CCOA,WACAC,iBAGAA,cACAC,mBAGA,GAEA,SACA,iBACA,yCACA,OACA,+BACA,qCACA,yCACA,sCACA,YACA,cACA,cACA,EACA,UACA,CACA,SACA,eACA,mDACA,QACA,QACA,YACA,oBACA,oBACA,YACA,cACA,cACA,WACA,yBACA,iBACA,uBAGA,UACA,sBACA,uEACA,4CAEA,EACA,EACA,QACA,oCACA,EACA,UACA,mCACA,CACA,EACA,OACA,mCACA,uBACA,qBACA,EACA,wBACA,2BACA,CACA,EACA,SAKA,mBACA,iBACAC,UACAA,gBACA,EAEA,iBACA,mBACA,yBACA,uBACA,4BAGA,kBACA,EAEA,yBACA,4CACA,EAEA,iBAKA,OAJA,kDAGA,0CAEA,EAEA,oBAEA,GADA,iBACAA,uDAGA,aACA,iBAIA,4CAIA,EAEA,uBACA,8BACA,2BACA,EAEA,oBACA,sBACA,yBAEA,2BAEA,yCAEA,uBAEA,2BACA,EAEA,oBACA,mCAEA,MACA,oDACA,qCACA,CACA,mCACA,EAEA,gBAIA,iCAIA,OAEA,KAJAA,UAIA,EAGA,WACAC,sBAGA,wBACA,6BACAA,iBAEAA,GACA,oBACA,MACA,SACA,OACA,QACA,iCAKAA,CACA,EAEA,iBACA,6CACAC,eAEA,+CACA,WACA,EAEA,uBAEA,eACA,8BACA,UACA,wBACA,CACA,4EACA,oBACA,CAGA,4BAGA,QAEA,8CACA,0BAGAC,mBAEAA,cACAH,oBACAA,cACAA,WAIAA,uCAGAI,4BACAA,+BAGA,yCACAJ,gBAEAK,IACA,EAEA,8BACA,CACA,4BACA,EAEA,uBACA,2CACA,uDAEA,wBACA,qDAEA,EACA,qBACA,yBACA,YAEA,uCACAC,4CAEAA,4CAGAA,CACA,EAEA,4BACAN,cACA,qBACA,yBACA,EAEA,2BACA,6CACA,+DACA,mCACA,EAEA,eACA,6CACAO,0CACA,4BACA,EAEA,eACA,+CACA,2BACAC,CACA,CACA,EACA,gBACA,sDACA,gCAEA,UACA,uBACA,YACA,YACA,0BACA,kCAGA,oDAGA,oCAEA,4BAEA,qBACA,EACA,gBACA,iBACA,wDACA,CACA,GClYIC,EAAS,UAAY,CACvB,IAAIC,EAAI,KACJC,EAAGD,EAAI,eACPE,EAAGF,EAAI,MAAM,IAAIC,EAErB,OAAOC,EAAG,MAAO,CACf,YAAa,YACb,MAAO,CACL,MA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","names":["panelLookup","defineAsyncComponent","__vitePreload","plotTitle","subfolder","title","chartTypes","namedCharts","card","style","a","cards","Vue","numCard","tag","dashboard","rowClass","render","_vm","_h","_c","row","i","j","$event","staticRenderFns"],"sources":["../../src/dash-panels/_allPanels.ts","../../src/layout-manager/DashBoard.vue","../../src/layout-manager/DashBoard.vue?vue&type=template&lang.js"],"sourcesContent":["import { AsyncComponent, defineAsyncComponent } from 'vue'\r\n\r\n// add every chart type here.\r\n// the name of the import will be the chart \"type\" in YAML.\r\n\r\n// resizable charts:\r\nexport const panelLookup: { [key: string]: AsyncComponent } = {\r\n  aggregate: defineAsyncComponent(() => import('./aggregate-od.vue')),\r\n  area: defineAsyncComponent(() => import('./area.vue')),\r\n  bar: defineAsyncComponent(() => import('./bar.vue')),\r\n  bubble: defineAsyncComponent(() => import('./bubble.vue')),\r\n  csv: defineAsyncComponent(() => import('./table.vue')),\r\n  heatmap: defineAsyncComponent(() => import('./heatmap.vue')),\r\n  hexagons: defineAsyncComponent(() => import('./hexagons.vue')),\r\n  line: defineAsyncComponent(() => import('./line.vue')),\r\n  pie: defineAsyncComponent(() => import('./pie.vue')),\r\n  plotly: defineAsyncComponent(() => import('./plotly.vue')),\r\n  sankey: defineAsyncComponent(() => import('./sankey.vue')),\r\n  scatter: defineAsyncComponent(() => import('./scatter.vue')),\r\n  slideshow: defineAsyncComponent(() => import('./slideshow.vue')),\r\n  text: defineAsyncComponent(() => import('./text.vue')),\r\n  tile: defineAsyncComponent(() => import('./tile.vue')),\r\n  transit: defineAsyncComponent(() => import('./transit.vue')),\r\n  vega: defineAsyncComponent(() => import('./vega.vue')),\r\n  video: defineAsyncComponent(() => import('./video.vue')),\r\n  xml: defineAsyncComponent(() => import('./xml.vue')),\r\n\r\n  // full-screen map visualizations:\r\n  carriers: defineAsyncComponent(() => import('./carriers.vue')),\r\n  flowmap: defineAsyncComponent(() => import('./flowmap.vue')),\r\n  links: defineAsyncComponent(() => import('./links.vue')),\r\n  map: defineAsyncComponent(() => import('./area-map.vue')),\r\n  xytime: defineAsyncComponent(() => import('./xytime.vue')),\r\n}\r\n\r\n// ----- EXPORT CHARTS HERE ---------------------------------------------------\r\n// export all resizable charts here\r\nexport const plotlyCharts = {\r\n  // aggregate,\r\n  // area,\r\n  // bar,\r\n  // bubble,\r\n  // csv,\r\n  // heatmap,\r\n  // hexagons,\r\n  // image: slideshow, // both 'image' and 'slideshow' types work for images\r\n  // line,\r\n  // markdown: text,\r\n  // pie,\r\n  // plotly,\r\n  // sankey,\r\n  // slideshow,\r\n  // text,\r\n  // tile,\r\n  // transit,\r\n  // scatter,\r\n  // vega,\r\n  // video,\r\n  // xml,\r\n  // xytime,\r\n}\r\n\r\n// export all remaining charts/maps here:\r\n// export default Object.assign({}, /*{ carriers, flowmap, links, map },*/ plotlyCharts)\r\n// export default { panelLookup }\r\n\r\n// ----- HELPER FUNCTIONS -----------------------------------------------------\r\n\r\nexport function buildCleanTitle(plotTitle: string, subfolder: string): string {\r\n  let title = plotTitle\r\n\r\n  if (subfolder) {\r\n    title = subfolder.substring(1 + subfolder.lastIndexOf('/')) + ' - ' + title\r\n  }\r\n\r\n  title = title.replaceAll('/', '-')\r\n  return title\r\n}\r\n","<template lang=\"pug\">\r\n.dashboard(:class=\"{wiide, 'is-panel-narrow': isPanelNarrow }\" :id=\"viewId\")\r\n  .dashboard-content(:class=\"{wiide}\" :style=\"dashWidthCalculator\")\r\n    .dashboard-header(v-if=\"!fullScreenCardId && (title + description)\"\r\n      :class=\"{wiide, 'is-panel-narrow': isPanelNarrow}\"\r\n    )\r\n      h2 {{ title }}\r\n      p {{ description }}\r\n\r\n    //- start row here\r\n    .dash-row(v-for=\"row,i in rows\" :key=\"i\" :class=\"getRowClass(row)\")\r\n\r\n      //- each card here\r\n      .dash-card-frame(v-for=\"card,j in row.cards\" :key=\"`${i}/${j}`\"\r\n        :style=\"getCardStyle(card)\"\r\n        :class=\"{wiide, 'is-panel-narrow': isPanelNarrow}\"\r\n      )\r\n\r\n        //- card header/title\r\n        .dash-card-headers(v-if=\"card.title + card.description\" :class=\"{'fullscreen': !!fullScreenCardId}\")\r\n          .header-labels\r\n            h3 {{ card.title }}\r\n            p(v-if=\"card.description\") {{ card.description }}\r\n\r\n          //- zoom button\r\n          .header-buttons\r\n            button.button.is-small.is-white(\r\n              v-if=\"card.info\"\r\n              @click=\"handleToggleInfoClick(card)\"\r\n              :title=\"infoToggle[card.id] ? 'Hide Info':'Show Info'\"\r\n            )\r\n              i.fa.fa-info-circle\r\n\r\n            button.button.is-small.is-white(\r\n              @click=\"toggleZoom(card)\"\r\n              :title=\"fullScreenCardId ? 'Restore':'Enlarge'\"\r\n            )\r\n              i.fa.fa-expand\r\n\r\n        // info contents\r\n        .info(v-show=\"infoToggle[card.id]\")\r\n          p\r\n          p {{ card.info }}\r\n\r\n\r\n        //- card contents\r\n        .spinner-box(v-if=\"getCardComponent(card)\" :id=\"card.id\" :class=\"{'is-loaded': card.isLoaded}\")\r\n\r\n          component.dash-card(\r\n            :is=\"getCardComponent(card)\"\r\n            :fileSystemConfig=\"fileSystemConfig\"\r\n            :subfolder=\"xsubfolder\"\r\n            :files=\"fileList\"\r\n            :yaml=\"card.props.configFile\"\r\n            :config=\"card.props\"\r\n            :datamanager=\"datamanager\"\r\n            :style=\"{opacity: opacity[card.id]}\"\r\n            :cardId=\"card.id\"\r\n            :cardTitle=\"card.title\"\r\n            :allConfigFiles=\"allConfigFiles\"\r\n            @isLoaded=\"handleCardIsLoaded(card)\"\r\n            @dimension-resizer=\"setDimensionResizer\"\r\n            @titles=\"setCardTitles(card, $event)\"\r\n          )\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue, { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport YAML from 'yaml'\r\n\r\nimport globalStore from '@/store'\r\nimport { FileSystemConfig, YamlConfigs } from '@/Globals'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\n\r\nimport TopSheet from '@/components/TopSheet/TopSheet.vue'\r\n// import charts, { plotlyCharts } from '@/dash-panels/_allPanels'\r\n\r\nimport { panelLookup } from '@/dash-panels/_allPanels'\r\nimport DashboardDataManager from '@/js/DashboardDataManager'\r\n\r\n// append a prefix so the html template is legal\r\nconst namedCharts = {} as any\r\nconst chartTypes = Object.keys(panelLookup)\r\n// const plotlyChartTypes = {} as any\r\n\r\nchartTypes.forEach((key: any) => {\r\n  namedCharts[`card-${key}`] = panelLookup[key] // key // charts[key] as any\r\n  // //@ts-ignore\r\n  // if (plotlyCharts[key]) plotlyChartTypes[key] = true\r\n})\r\n\r\nexport default defineComponent({\r\n  name: 'Dashboard',\r\n  components: Object.assign({ TopSheet }, namedCharts),\r\n  props: {\r\n    root: { type: String, required: true },\r\n    xsubfolder: { type: String, required: true },\r\n    allConfigFiles: { type: Object as PropType<YamlConfigs>, required: true },\r\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\r\n    gist: Object as any,\r\n    config: Object as any,\r\n    zoomed: Boolean,\r\n  },\r\n  data: () => {\r\n    return {\r\n      title: '',\r\n      description: '',\r\n      viewId: 'dashboard-' + Math.floor(1e12 * Math.random()),\r\n      yaml: {} as any,\r\n      rows: [] as { id: string; cards: any[] }[],\r\n      fileList: [] as string[],\r\n      fileSystemConfig: {} as FileSystemConfig,\r\n      fullScreenCardId: '',\r\n      resizers: {} as { [id: string]: any },\r\n      infoToggle: {} as { [id: string]: boolean },\r\n      isResizing: false,\r\n      opacity: {} as any,\r\n      narrowPanelObserver: null as ResizeObserver | null,\r\n      isPanelNarrow: false,\r\n      numberOfShownCards: 1,\r\n    }\r\n  },\r\n  computed: {\r\n    dashWidthCalculator(): any {\r\n      if (this.$store.state.dashboardWidth && this.$store.state.isFullWidth) {\r\n        return { maxWidth: this.$store.state.dashboardWidth }\r\n      }\r\n      return {}\r\n    },\r\n    wiide(): boolean {\r\n      return this.$store.state.isFullWidth\r\n    },\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystemConfig)\r\n    },\r\n  },\r\n  watch: {\r\n    async '$store.state.resizeEvents'() {\r\n      await this.$nextTick()\r\n      this.resizeAllCards()\r\n    },\r\n    '$store.state.locale'() {\r\n      this.updateThemeAndLabels()\r\n    },\r\n  },\r\n  methods: {\r\n    /**\r\n     * This only gets triggered when a topsheet has some titles.\r\n     * Remove the dashboard titles and use the ones from the topsheet.\r\n     */\r\n    setCardTitles(card: any, event: any) {\r\n      console.log(card, event)\r\n      card.title = event\r\n      card.description = ''\r\n    },\r\n\r\n    resizeAllCards() {\r\n      this.isResizing = true\r\n      for (const row of this.rows) {\r\n        for (const card of row.cards) {\r\n          this.updateDimensions(card.id)\r\n        }\r\n      }\r\n      this.isResizing = false\r\n    },\r\n\r\n    handleToggleInfoClick(card: any) {\r\n      this.infoToggle[card.id] = !this.infoToggle[card.id]\r\n    },\r\n\r\n    async getFiles() {\r\n      const folderContents = await this.fileApi.getDirectory(this.xsubfolder)\r\n\r\n      // hide dot folders\r\n      const files = folderContents.files.filter(f => !f.startsWith('.')).sort()\r\n      return files\r\n    },\r\n\r\n    getCardComponent(card: { type: string }) {\r\n      console.log(1, card)\r\n      if (card.type === 'table' || card.type === 'topsheet') return 'TopSheet'\r\n\r\n      // load the plugin\r\n      if (panelLookup[card.type]) {\r\n        return panelLookup[card.type]\r\n      }\r\n\r\n      // might be a chart\r\n      if (chartTypes.indexOf(card.type) > -1) return 'card-' + card.type\r\n\r\n      // or might be a vue component?\r\n      return undefined // card.type\r\n    },\r\n\r\n    setDimensionResizer(options: { id: string; resizer: any }) {\r\n      this.resizers[options.id] = options.resizer\r\n      this.updateDimensions(options.id)\r\n    },\r\n\r\n    async toggleZoom(card: any) {\r\n      if (this.fullScreenCardId) {\r\n        this.fullScreenCardId = ''\r\n      } else {\r\n        this.fullScreenCardId = card.id\r\n      }\r\n      this.$emit('zoom', this.fullScreenCardId)\r\n      // allow vue to resize everything\r\n      await this.$nextTick()\r\n      // tell plotly to resize everything\r\n      this.updateDimensions(card.id)\r\n    },\r\n\r\n    updateDimensions(cardId: string) {\r\n      const element = document.getElementById(cardId)\r\n\r\n      if (element) {\r\n        const dimensions = { width: element.clientWidth, height: element.clientHeight }\r\n        if (this.resizers[cardId]) this.resizers[cardId](dimensions)\r\n      }\r\n      if (!this.isResizing) globalStore.commit('resize')\r\n    },\r\n\r\n    getCardStyle(card: any) {\r\n      // figure out height. If card has registered a resizer with changeDimensions(),\r\n      // then it needs a default height (300)\r\n      const defaultHeight = 300 // plotlyChartTypes[card.type] ? 300 : undefined\r\n      const height = card.height ? card.height * 60 : defaultHeight\r\n\r\n      const flex = card.width || 1\r\n\r\n      let style: any = {\r\n        // margin: '2rem 1rem 2rem 0',\r\n        flex: flex,\r\n      }\r\n\r\n      if (height) {\r\n        style.minHeight = `${height}px`\r\n      }\r\n\r\n      if (this.fullScreenCardId) {\r\n        if (this.fullScreenCardId !== card.id) {\r\n          style.display = 'none'\r\n        } else {\r\n          style = {\r\n            position: 'absolute',\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            margin: '18px 1rem 0.5rem 1rem',\r\n          }\r\n        }\r\n      }\r\n\r\n      return style\r\n    },\r\n\r\n    getFileSystem(name: string): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === name\r\n      )\r\n      if (svnProject.length === 0) throw Error('no such project')\r\n      return svnProject[0]\r\n    },\r\n\r\n    async setupDashboard() {\r\n      // Do we have config already or do we need to fetch it from the yaml file?\r\n      if (this.config) {\r\n        this.yaml = this.config\r\n      } else if (this.gist) {\r\n        this.yaml = this.gist\r\n      } else {\r\n        const yaml = await this.fileApi.getFileText(`${this.xsubfolder}/dashboard.yaml`)\r\n        this.yaml = YAML.parse(yaml)\r\n      }\r\n\r\n      // set header\r\n      this.updateThemeAndLabels()\r\n\r\n      // build rows\r\n      let numCard = 1\r\n\r\n      for (const rowId of Object.keys(this.yaml.layout)) {\r\n        let cards: any[] = this.yaml.layout[rowId]\r\n\r\n        // row must be an array - if it isn't, assume it is an array of length one\r\n        if (!cards.forEach) cards = [cards]\r\n\r\n        cards.forEach(card => {\r\n          card.id = `card-id-${numCard}`\r\n          card.isLoaded = false\r\n          card.number = numCard\r\n\r\n          // make YAML easier to write: merge \"props\" property with other properties\r\n          // so user doesn't need to specify \"props: {...}\"\r\n          if (!card.props) card.props = Object.assign({}, card)\r\n\r\n          // Vue 2 is weird about new properties: use Vue.set() instead\r\n          Vue.set(this.opacity, card.id, 0.5)\r\n          Vue.set(this.infoToggle, card.id, false)\r\n\r\n          // Card header could be hidden\r\n          if (!card.title && !card.description) card.showHeader = false\r\n          else card.showHeader = true\r\n\r\n          numCard++\r\n        })\r\n\r\n        this.rows.push({ id: rowId, cards })\r\n      }\r\n      this.$emit('layoutComplete')\r\n    },\r\n\r\n    updateThemeAndLabels() {\r\n      this.title = this.getDashboardLabel('title')\r\n      this.description = this.getDashboardLabel('description')\r\n\r\n      if (this.yaml.header.theme) {\r\n        this.$store.commit('setTheme', this.yaml.header.theme)\r\n      }\r\n    },\r\n    getDashboardLabel(element: 'title' | 'description') {\r\n      const header = this.yaml.header\r\n      let tag = '...'\r\n\r\n      if (this.$store.state.locale === 'de') {\r\n        tag = header[`${element}_de`] || header[`${element}`] || header[`${element}_en`] || ''\r\n      } else {\r\n        tag = header[`${element}_en`] || header[`${element}`] || header[`${element}_de`] || ''\r\n      }\r\n\r\n      return tag\r\n    },\r\n\r\n    async handleCardIsLoaded(card: any) {\r\n      card.isLoaded = true\r\n      this.opacity[card.id] = 1.0\r\n      this.numberOfShownCards++\r\n    },\r\n\r\n    setupNarrowPanelObserver() {\r\n      const dashboard = document.getElementById(this.viewId) as HTMLElement\r\n      this.narrowPanelObserver = new ResizeObserver(this.handleResize)\r\n      this.narrowPanelObserver.observe(dashboard)\r\n    },\r\n\r\n    handleResize() {\r\n      const dashboard = document.getElementById(this.viewId) as HTMLElement\r\n      if (dashboard) this.isPanelNarrow = dashboard.clientWidth < 800\r\n      this.$store.commit('resize')\r\n    },\r\n\r\n    getRowClass(row: any) {\r\n      const rowClass = { 'is-panel-narrow': this.isPanelNarrow } as any\r\n      rowClass[`row-${row.id}`] = true\r\n      return rowClass\r\n    },\r\n  },\r\n  async mounted() {\r\n    window.addEventListener('resize', this.resizeAllCards)\r\n    this.setupNarrowPanelObserver()\r\n\r\n    if (this.gist) {\r\n      this.fileSystemConfig = {\r\n        name: 'gist',\r\n        slug: 'gist',\r\n        description: 'From GitHub',\r\n        baseURL: this.gist.config.baseUrl,\r\n      }\r\n    } else {\r\n      this.fileSystemConfig = this.getFileSystem(this.root)\r\n    }\r\n\r\n    this.fileList = await this.getFiles()\r\n\r\n    await this.setupDashboard()\r\n    // await this.$nextTick()\r\n    this.resizeAllCards()\r\n  },\r\n  beforeDestroy() {\r\n    this.resizers = {}\r\n    window.removeEventListener('resize', this.resizeAllCards)\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.dashboard {\r\n  margin: 0 0;\r\n  padding: 1rem 0rem 1rem 1rem;\r\n\r\n  .dashboard-content {\r\n    max-width: $dashboardWidth;\r\n    margin: 0 auto 0 auto;\r\n  }\r\n\r\n  .dashboard-content.wiide {\r\n    max-width: unset;\r\n  }\r\n}\r\n\r\n.dashboard.wiide {\r\n  padding-left: 2rem;\r\n}\r\n\r\n.dashboard-header {\r\n  margin: 1rem 3rem 1rem 0rem;\r\n\r\n  h2 {\r\n    line-height: 3rem;\r\n  }\r\n}\r\n\r\n.dashboard-header.wiide {\r\n  margin-right: 3rem;\r\n}\r\n\r\n.dash-row {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.dash-card-frame {\r\n  display: grid;\r\n  grid-auto-columns: 1fr;\r\n  grid-auto-rows: auto auto 1fr;\r\n  margin: 2rem 2rem 2rem 0;\r\n\r\n  .dash-card-headers {\r\n    display: flex;\r\n    flex-direction: row;\r\n    border-top: var(--borderDashboard);\r\n    padding-top: 0.1rem;\r\n  }\r\n\r\n  .dash-card-headers.fullscreen {\r\n    padding-top: 0;\r\n  }\r\n\r\n  .header-buttons {\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-left: auto;\r\n\r\n    button {\r\n      background-color: #00000000;\r\n      color: var(--link);\r\n      opacity: 0.5;\r\n    }\r\n    button:hover {\r\n      background-color: #ffffff20;\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  h3 {\r\n    grid-row: 1 / 2;\r\n    font-size: 1.2rem;\r\n    line-height: 1.5rem;\r\n    margin-top: 0.1rem;\r\n    margin-bottom: 0.5rem;\r\n    color: var(--link);\r\n  }\r\n\r\n  // if there is a description, fix the margins\r\n  p {\r\n    grid-row: 2 / 3;\r\n    margin-top: -0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n\r\n  .spinner-box {\r\n    grid-row: 3 / 4;\r\n    position: relative;\r\n    background: url('../assets/simwrapper-logo/SW_logo_icon_anim.gif');\r\n    background-size: 8rem;\r\n    background-repeat: no-repeat;\r\n    background-position: center center;\r\n  }\r\n\r\n  .spinner-box.is-loaded {\r\n    background: none;\r\n  }\r\n}\r\n\r\n.dash-card-frame.wiide {\r\n  margin-right: 2rem;\r\n}\r\n\r\n.dash-card {\r\n  transition: opacity 0.5s;\r\n  overflow-x: hidden;\r\n  overflow-y: hidden;\r\n}\r\n\r\n// Observe for narrowness instead of a media-query\r\n// since the panel might be narrow even if the window is wide.\r\n.dashboard.is-panel-narrow {\r\n  padding: 1rem 0rem 1rem 1rem;\r\n}\r\n\r\n.dashboard-header.is-panel-narrow {\r\n  margin: 1rem 1rem 1rem 0rem;\r\n}\r\n\r\n.dash-row.is-panel-narrow {\r\n  flex-direction: column;\r\n}\r\n\r\n.dash-card-frame.is-panel-narrow {\r\n  margin: 2rem 1rem 2rem 0;\r\n}\r\n</style>\r\n","\r\n.dashboard(:class=\"{wiide, 'is-panel-narrow': isPanelNarrow }\" :id=\"viewId\")\r\n  .dashboard-content(:class=\"{wiide}\" :style=\"dashWidthCalculator\")\r\n    .dashboard-header(v-if=\"!fullScreenCardId && (title + description)\"\r\n      :class=\"{wiide, 'is-panel-narrow': isPanelNarrow}\"\r\n    )\r\n      h2 {{ title }}\r\n      p {{ description }}\r\n\r\n    //- start row here\r\n    .dash-row(v-for=\"row,i in rows\" :key=\"i\" :class=\"getRowClass(row)\")\r\n\r\n      //- each card here\r\n      .dash-card-frame(v-for=\"card,j in row.cards\" :key=\"`${i}/${j}`\"\r\n        :style=\"getCardStyle(card)\"\r\n        :class=\"{wiide, 'is-panel-narrow': isPanelNarrow}\"\r\n      )\r\n\r\n        //- card header/title\r\n        .dash-card-headers(v-if=\"card.title + card.description\" :class=\"{'fullscreen': !!fullScreenCardId}\")\r\n          .header-labels\r\n            h3 {{ card.title }}\r\n            p(v-if=\"card.description\") {{ card.description }}\r\n\r\n          //- zoom button\r\n          .header-buttons\r\n            button.button.is-small.is-white(\r\n              v-if=\"card.info\"\r\n              @click=\"handleToggleInfoClick(card)\"\r\n              :title=\"infoToggle[card.id] ? 'Hide Info':'Show Info'\"\r\n            )\r\n              i.fa.fa-info-circle\r\n\r\n            button.button.is-small.is-white(\r\n              @click=\"toggleZoom(card)\"\r\n              :title=\"fullScreenCardId ? 'Restore':'Enlarge'\"\r\n            )\r\n              i.fa.fa-expand\r\n\r\n        // info contents\r\n        .info(v-show=\"infoToggle[card.id]\")\r\n          p\r\n          p {{ card.info }}\r\n\r\n\r\n        //- card contents\r\n        .spinner-box(v-if=\"getCardComponent(card)\" :id=\"card.id\" :class=\"{'is-loaded': card.isLoaded}\")\r\n\r\n          component.dash-card(\r\n            :is=\"getCardComponent(card)\"\r\n            :fileSystemConfig=\"fileSystemConfig\"\r\n            :subfolder=\"xsubfolder\"\r\n            :files=\"fileList\"\r\n            :yaml=\"card.props.configFile\"\r\n            :config=\"card.props\"\r\n            :datamanager=\"datamanager\"\r\n            :style=\"{opacity: opacity[card.id]}\"\r\n            :cardId=\"card.id\"\r\n            :cardTitle=\"card.title\"\r\n            :allConfigFiles=\"allConfigFiles\"\r\n            @isLoaded=\"handleCardIsLoaded(card)\"\r\n            @dimension-resizer=\"setDimensionResizer\"\r\n            @titles=\"setCardTitles(card, $event)\"\r\n          )\r\n\r\n"],"file":"assets/DashBoard.c40bb82f.js"}